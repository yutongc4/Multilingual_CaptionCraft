{"ast":null,"code":"var _jsxFileName = \"/homes/iws/yc888/Multilingual/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCaptionText = ({\n  text,\n  keywords,\n  getColor\n}) => {\n  if (!text) return null;\n\n  // Create regex from keywords\n  const regex = new RegExp(`\\\\b(${keywords.join('|')})\\\\b`, 'gi');\n\n  // Split text based on regex matches\n  const segments = [];\n  let lastIndex = 0;\n  let match;\n  while ((match = regex.exec(text)) !== null) {\n    if (match.index > lastIndex) {\n      segments.push({\n        type: 'text',\n        content: text.substring(lastIndex, match.index)\n      });\n    }\n    segments.push({\n      type: 'keyword',\n      content: match[0]\n    });\n    lastIndex = regex.lastIndex;\n  }\n  if (lastIndex < text.length) {\n    segments.push({\n      type: 'text',\n      content: text.substring(lastIndex)\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: segments.map((segment, index) => {\n      if (segment.type === 'keyword') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: getColor(),\n            textDecoration: 'underline'\n          },\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: segment.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_c = StyledCaptionText;\nfunction App() {\n  _s();\n  const [youtubeLink, setYoutubeLink] = useState('');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n  });\n  const [highlightingEnabled, setHighlightingEnabled] = useState(true);\n  const [collapsedSections, setCollapsedSections] = useState({});\n  const [keywordColor, setKeywordColor] = useState('Electric Blue');\n  const [status, setStatus] = useState('');\n  useHotkeys('ctrl+k', () => setHighlightingEnabled(prev => !prev));\n  const extractVideoId = url => {\n    const match = url.match(/(?:v=|\\/)([0-9A-Za-z_-]{11}).*/);\n    return match ? match[1] : null;\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Loading captions...');\n      fetchCaptions(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n  const fetchCaptions = async videoId => {\n    try {\n      // Mock fetch data (replace with real API endpoint)\n      const mockCaptions = {\n        en: [{\n          start: 0,\n          end: 5,\n          text: 'Hello world, this is a test caption.'\n        }, {\n          start: 5,\n          end: 10,\n          text: 'Another example of captions in a video.'\n        }]\n      };\n      setCaptions(mockCaptions);\n      setStatus('Captions loaded');\n    } catch (error) {\n      console.error('Error loading captions:', error);\n      setStatus('Failed to load captions');\n    }\n  };\n  const extractKeywords = text => {\n    const stopwords = new Set(['the', 'a', 'an', 'and', 'or', 'but', 'is', 'of', 'to', 'in']);\n    const words = text.toLowerCase().match(/\\b\\w+\\b/g) || [];\n    const filtered = words.filter(word => !stopwords.has(word) && word.length > 2);\n    const frequency = filtered.reduce((acc, word) => {\n      acc[word] = (acc[word] || 0) + 1;\n      return acc;\n    }, {});\n    return Object.keys(frequency).slice(0, 5);\n  };\n  const getColor = () => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    return colorMap[keywordColor] || colorMap['Electric Blue'];\n  };\n  const handleCollapseToggle = key => {\n    setCollapsedSections(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }));\n  };\n  const handleKeywordHighlightToggle = () => {\n    setHighlightingEnabled(!highlightingEnabled);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"YouTube Caption Highlighter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: youtubeLink,\n        onChange: e => setYoutubeLink(e.target.value),\n        placeholder: \"Paste YouTube URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 18\n    }, this), Object.keys(captions).map(lang => {\n      var _captions$lang;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleCollapseToggle(lang),\n          children: [collapsedSections[lang] ? 'Show' : 'Hide', \" \", lang]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), !collapsedSections[lang] && ((_captions$lang = captions[lang]) === null || _captions$lang === void 0 ? void 0 : _captions$lang.map((caption, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: highlightingEnabled ? /*#__PURE__*/_jsxDEV(StyledCaptionText, {\n            text: caption.text,\n            keywords: extractKeywords(caption.text),\n            getColor: getColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: caption.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)))]\n      }, lang, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Enable Keyword Highlighting:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: highlightingEnabled,\n          onChange: handleKeywordHighlightToggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Keyword Highlight Color:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: keywordColor,\n          onChange: e => setKeywordColor(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Electric Blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Cherry Red\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Forest Green\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Sunny Yellow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Royal Purple\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gqkGCtAlleSsQ2GZTJC2tULUaS0=\", false, function () {\n  return [useHotkeys];\n});\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledCaptionText\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useHotkeys","jsxDEV","_jsxDEV","StyledCaptionText","text","keywords","getColor","regex","RegExp","join","segments","lastIndex","match","exec","index","push","type","content","substring","length","children","map","segment","style","color","textDecoration","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s","youtubeLink","setYoutubeLink","videoId","setVideoId","captions","setCaptions","selectedLanguages","setSelectedLanguages","primary","secondary","highlightingEnabled","setHighlightingEnabled","collapsedSections","setCollapsedSections","keywordColor","setKeywordColor","status","setStatus","prev","extractVideoId","url","handleSubmit","e","preventDefault","id","fetchCaptions","mockCaptions","en","start","end","error","console","extractKeywords","stopwords","Set","words","toLowerCase","filtered","filter","word","has","frequency","reduce","acc","Object","keys","slice","colorMap","handleCollapseToggle","key","handleKeywordHighlightToggle","className","onSubmit","value","onChange","target","placeholder","lang","_captions$lang","onClick","caption","checked","_c2","$RefreshReg$"],"sources":["/homes/iws/yc888/Multilingual/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport './App.css';\n\nconst StyledCaptionText = ({ text, keywords, getColor }) => {\n  if (!text) return null;\n\n  // Create regex from keywords\n  const regex = new RegExp(`\\\\b(${keywords.join('|')})\\\\b`, 'gi');\n\n  // Split text based on regex matches\n  const segments = [];\n  let lastIndex = 0;\n  let match;\n\n  while ((match = regex.exec(text)) !== null) {\n    if (match.index > lastIndex) {\n      segments.push({ type: 'text', content: text.substring(lastIndex, match.index) });\n    }\n    segments.push({ type: 'keyword', content: match[0] });\n    lastIndex = regex.lastIndex;\n  }\n\n  if (lastIndex < text.length) {\n    segments.push({ type: 'text', content: text.substring(lastIndex) });\n  }\n\n  return (\n    <span>\n      {segments.map((segment, index) => {\n        if (segment.type === 'keyword') {\n          return (\n            <span key={index} style={{ color: getColor(), textDecoration: 'underline' }}>\n              {segment.content}\n            </span>\n          );\n        }\n        return <span key={index}>{segment.content}</span>;\n      })}\n    </span>\n  );\n};\n\nfunction App() {\n  const [youtubeLink, setYoutubeLink] = useState('');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({ primary: 'en', secondary: '' });\n  const [highlightingEnabled, setHighlightingEnabled] = useState(true);\n  const [collapsedSections, setCollapsedSections] = useState({});\n  const [keywordColor, setKeywordColor] = useState('Electric Blue');\n  const [status, setStatus] = useState('');\n\n  useHotkeys('ctrl+k', () => setHighlightingEnabled(prev => !prev));\n\n  const extractVideoId = (url) => {\n    const match = url.match(/(?:v=|\\/)([0-9A-Za-z_-]{11}).*/);\n    return match ? match[1] : null;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Loading captions...');\n      fetchCaptions(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  const fetchCaptions = async (videoId) => {\n    try {\n      // Mock fetch data (replace with real API endpoint)\n      const mockCaptions = {\n        en: [\n          { start: 0, end: 5, text: 'Hello world, this is a test caption.' },\n          { start: 5, end: 10, text: 'Another example of captions in a video.' }\n        ]\n      };\n      setCaptions(mockCaptions);\n      setStatus('Captions loaded');\n    } catch (error) {\n      console.error('Error loading captions:', error);\n      setStatus('Failed to load captions');\n    }\n  };\n\n  const extractKeywords = (text) => {\n    const stopwords = new Set(['the', 'a', 'an', 'and', 'or', 'but', 'is', 'of', 'to', 'in']);\n    const words = text.toLowerCase().match(/\\b\\w+\\b/g) || [];\n    const filtered = words.filter(word => !stopwords.has(word) && word.length > 2);\n    const frequency = filtered.reduce((acc, word) => {\n      acc[word] = (acc[word] || 0) + 1;\n      return acc;\n    }, {});\n    return Object.keys(frequency).slice(0, 5);\n  };\n\n  const getColor = () => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    return colorMap[keywordColor] || colorMap['Electric Blue'];\n  };\n\n  const handleCollapseToggle = (key) => {\n    setCollapsedSections(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }));\n  };\n\n  const handleKeywordHighlightToggle = () => {\n    setHighlightingEnabled(!highlightingEnabled);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>YouTube Caption Highlighter</h1>\n\n      {/* URL Input */}\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={youtubeLink}\n          onChange={(e) => setYoutubeLink(e.target.value)}\n          placeholder=\"Paste YouTube URL\"\n        />\n        <button type=\"submit\">Load</button>\n      </form>\n\n      {/* Status Message */}\n      {status && <p>{status}</p>}\n\n      {/* Display Captions */}\n      {Object.keys(captions).map((lang) => (\n        <div key={lang}>\n          <button onClick={() => handleCollapseToggle(lang)}>\n            {collapsedSections[lang] ? 'Show' : 'Hide'} {lang}\n          </button>\n\n          {!collapsedSections[lang] && captions[lang]?.map((caption, index) => (\n            <div key={index}>\n              {highlightingEnabled ? (\n                <StyledCaptionText\n                  text={caption.text}\n                  keywords={extractKeywords(caption.text)}\n                  getColor={getColor}\n                />\n              ) : (\n                <span>{caption.text}</span>\n              )}\n            </div>\n          ))}\n        </div>\n      ))}\n\n      {/* Highlighting Settings */}\n      <div>\n        <label>\n          Enable Keyword Highlighting:\n          <input type=\"checkbox\" checked={highlightingEnabled} onChange={handleKeywordHighlightToggle} />\n        </label>\n\n        <label>\n          Keyword Highlight Color:\n          <select value={keywordColor} onChange={(e) => setKeywordColor(e.target.value)}>\n            <option>Electric Blue</option>\n            <option>Cherry Red</option>\n            <option>Forest Green</option>\n            <option>Sunny Yellow</option>\n            <option>Royal Purple</option>\n          </select>\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}