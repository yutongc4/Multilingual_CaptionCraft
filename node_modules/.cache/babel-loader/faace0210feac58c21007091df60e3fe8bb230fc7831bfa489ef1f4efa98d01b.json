{"ast":null,"code":"var _jsxFileName = \"/Users/arunasrivastava/random/cse482/Multilingual/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// Update this component (around line 5-89 in your code)\n// Fixed StyledCaptionText component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCaptionText = ({\n  text,\n  customization,\n  darkMode,\n  getColor\n}) => {\n  // Font styles from customization\n  const fontStyles = {\n    fontFamily: getFontFamily(customization.fontFamily),\n    fontSize: getFontSize(customization.fontSize),\n    fontWeight: getFontWeight(customization.fontWeight),\n    // FIX: Always use custom textColor (don't override in dark mode)\n    color: customization.textColor,\n    letterSpacing: customization.letterSpacing || 'normal'\n  };\n\n  // Process the text to identify tagged parts\n  const processText = input => {\n    if (!input) return [];\n    const segments = [];\n    let currentIndex = 0;\n\n    // Regular expression to find tags\n    const tagRegex = /<(noun|verb|adjective)>(.*?)<\\/\\1>/g;\n    let match;\n\n    // Find all tag matches\n    while ((match = tagRegex.exec(input)) !== null) {\n      // If there's text before the match, add it as plain text\n      if (match.index > currentIndex) {\n        segments.push({\n          type: 'text',\n          content: input.substring(currentIndex, match.index)\n        });\n      }\n\n      // Add the tagged content\n      segments.push({\n        type: match[1],\n        // noun, verb, or adjective\n        content: match[2] // the content inside the tags\n      });\n\n      // Update the current index\n      currentIndex = match.index + match[0].length;\n    }\n\n    // Add any remaining text after the last match\n    if (currentIndex < input.length) {\n      segments.push({\n        type: 'text',\n        content: input.substring(currentIndex)\n      });\n    }\n    return segments;\n  };\n\n  // Parse text into segments\n  const segments = processText(text);\n\n  // Main render function - completely pure React approach\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: fontStyles,\n    children: segments.map((segment, index) => {\n      if (segment.type === 'text') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 18\n        }, this);\n      } else if (segment.type === 'noun') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: getColor('noun'),\n            textDecoration: 'underline'\n          },\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this);\n      } else if (segment.type === 'verb') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: getColor('verb'),\n            textDecoration: 'underline'\n          },\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this);\n      } else if (segment.type === 'adjective') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: getColor('adjective'),\n            textDecoration: 'underline'\n          },\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this);\n      }\n      return null;\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n// API base URL - change this if your backend is running on a different port/host\n_c = StyledCaptionText;\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n// Get font size based on settings - now supports numeric values\nconst getFontSize = sizeValue => {\n  if (typeof sizeValue === 'number') {\n    return `${sizeValue}px`;\n  }\n  const sizeMap = {\n    'Small': '14px',\n    'Medium': '16px',\n    'Large': '20px',\n    'X-Large': '24px'\n  };\n  return sizeMap[sizeValue] || '16px';\n};\n\n// Get font weight based on settings - now supports numeric values\nconst getFontWeight = weightValue => {\n  if (typeof weightValue === 'number') {\n    return weightValue;\n  }\n  return weightValue || 400;\n};\n\n// Get letter spacing based on settings - now supports numeric values\nconst getLetterSpacing = spacingValue => {\n  if (typeof spacingValue === 'number') {\n    return `${spacingValue}px`;\n  }\n  return spacingValue || 'normal';\n};\n\n// Get font family based on settings\nconst getFontFamily = fontOption => {\n  const fontMap = {\n    'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n    'Roboto': 'Roboto, Arial, sans-serif',\n    'Open Sans': 'Open Sans, Arial, sans-serif',\n    'Verdana': 'Verdana, Geneva, sans-serif'\n  };\n  return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n};\nfunction App() {\n  _s();\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=zy2Zj8yIe6c');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n    // tertiary language removed\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n\n  // Add missing hiddenLanguages state\n  const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n\n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50,\n    // percentage\n    y: 80,\n    // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0\n  });\n\n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n\n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n\n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n\n  // New state for UI enhancements\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n  const [captionsHeight, setCaptionsHeight] = useState('normal');\n\n  // Refs\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const videoResizeHandleRef = useRef(null);\n  const captionsResizeHandleRef = useRef(null);\n  const activeResizeRef = useRef(null);\n\n  // Add temporary customization state\n  const [tempCustomizations, setTempCustomizations] = useState({});\n\n  // Update the updateLanguageCustomization function\n  const updateLanguageCustomization = (lang, property, value) => {\n    setTempCustomizations(prev => ({\n      ...prev,\n      [lang]: {\n        ...(prev[lang] || languageCustomizations[lang] || {}),\n        [property]: value\n      }\n    }));\n  };\n\n  // Add function to apply customizations\n  const applyCustomizations = lang => {\n    if (tempCustomizations[lang]) {\n      setLanguageCustomizations(prev => ({\n        ...prev,\n        [lang]: {\n          ...prev[lang],\n          ...tempCustomizations[lang]\n        }\n      }));\n      // Clear temporary customizations for this language\n      setTempCustomizations(prev => {\n        const newTemp = {\n          ...prev\n        };\n        delete newTemp[lang];\n        return newTemp;\n      });\n    }\n  };\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = url => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[7].length === 11 ? match[7] : null;\n  };\n\n  // Toggle settings panel collapse\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]);\n\n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = lang => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n\n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n\n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n\n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = {\n      ...languageCustomizations\n    };\n\n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 'Large',\n          fontWeight: 'bold',\n          // FIX: Set color based on dark mode but preserve it in language customization\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 'normal'\n        };\n      }\n    });\n    setLanguageCustomizations(newLanguageCustomizations);\n  }, [selectedLanguages, darkMode, languageCustomizations]);\n\n  // Add this function to toggle language visibility\n  const toggleLanguageVisibility = lang => {\n    setHiddenLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = {\n      ...languageCustomizations\n    };\n    Object.keys(updatedCustomizations).forEach(lang => {\n      var _updatedCustomization, _updatedCustomization2;\n      if (((_updatedCustomization = updatedCustomizations[lang]) === null || _updatedCustomization === void 0 ? void 0 : _updatedCustomization.textColor) === '#000000' || ((_updatedCustomization2 = updatedCustomizations[lang]) === null || _updatedCustomization2 === void 0 ? void 0 : _updatedCustomization2.textColor) === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n      }\n    });\n    setLanguageCustomizations(updatedCustomizations);\n  }, [darkMode, languageCustomizations]);\n\n  // Set up video container resize functionality\n  useEffect(() => {\n    if (!videoId) return;\n    const videoContainer = videoContainerRef.current;\n    const resizeHandle = videoResizeHandleRef.current;\n    if (!videoContainer || !resizeHandle) return;\n    const handleMouseDown = e => {\n      e.preventDefault();\n\n      // Save initial position and dimensions\n      const startX = e.clientX;\n      const startWidth = videoContainer.offsetWidth;\n      activeResizeRef.current = 'video';\n      const handleMouseMove = moveEvent => {\n        if (activeResizeRef.current !== 'video') return;\n\n        // Calculate new width based on mouse movement\n        const deltaX = moveEvent.clientX - startX;\n        const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n\n        // Set width\n        videoContainer.style.width = `${newWidth}px`;\n\n        // Update the video wrapper's padding-top to maintain aspect ratio\n        const videoWrapper = videoContainer.querySelector('.video-wrapper');\n        if (videoWrapper) {\n          // No need to explicitly set height - padding-top maintains ratio\n          videoWrapper.style.paddingTop = `${9 / 16 * 100}%`; // Keep 16:9 ratio\n        }\n        moveEvent.preventDefault();\n      };\n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    return () => {\n      if (resizeHandle) {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      }\n    };\n  }, [videoId]);\n\n  // Set up captions container resize functionality\n  useEffect(() => {\n    if (!captionsResizeHandleRef.current) return;\n    const resizeHandle = captionsResizeHandleRef.current;\n    const handleMouseDown = e => {\n      e.preventDefault();\n\n      // Find the active captions section\n      const captionsSection = document.querySelector('.active-captions-section');\n      if (!captionsSection) return;\n\n      // Save initial position and dimensions\n      const startY = e.clientY;\n      const startHeight = captionsSection.offsetHeight;\n      activeResizeRef.current = 'captions';\n      const handleMouseMove = moveEvent => {\n        if (activeResizeRef.current !== 'captions') return;\n\n        // Calculate new height\n        const height = startHeight + (moveEvent.clientY - startY);\n\n        // Apply new height with min constraint\n        if (height > 100) {\n          captionsSection.style.height = `${height}px`;\n          captionsSection.style.maxHeight = `${height}px`;\n        }\n        moveEvent.preventDefault();\n      };\n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    return () => {\n      resizeHandle.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [availableLanguages.length]);\n\n  // Handle YouTube link input\n  const handleLinkChange = e => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async videoId => {\n    try {\n      var _data$transcripts$fin, _data$transcripts$;\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Received data:', data);\n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n\n      // Store the full transcript information\n      setAvailableTranscripts(data.transcripts);\n\n      // Also keep the language codes for backward compatibility\n      const languageCodes = data.transcripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n\n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = ((_data$transcripts$fin = data.transcripts.find(t => t.language_code === 'en')) === null || _data$transcripts$fin === void 0 ? void 0 : _data$transcripts$fin.language_code) || ((_data$transcripts$ = data.transcripts[0]) === null || _data$transcripts$ === void 0 ? void 0 : _data$transcripts$.language_code) || '';\n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: ''\n      });\n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n\n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n\n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          const data = await response.json();\n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n\n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = text => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n\n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = {\n      ...selectedLanguages\n    };\n\n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Get color based on settings\n  const getColor = type => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    switch (type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return darkMode ? '#FFFFFF' : '#000000';\n    }\n  };\n\n  // Format caption text using new StyledCaptionText component\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    const customization = languageCustomizations[lang] || {\n      fontFamily: getFontFamily('Arial / Helvetica'),\n      fontSize: getFontSize('Large'),\n      fontWeight: getFontWeight('bold'),\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 'normal'\n    };\n    return /*#__PURE__*/_jsxDEV(StyledCaptionText, {\n      text: text,\n      customization: customization,\n      darkMode: darkMode,\n      getColor: getColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = lang => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    return {\n      fontFamily: getFontFamily(customization.fontFamily),\n      fontSize: typeof customization.fontSize === 'number' ? `${customization.fontSize}px` : getFontSize(customization.fontSize),\n      fontWeight: getFontWeight(customization.fontWeight),\n      color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: typeof customization.letterSpacing === 'number' ? `${customization.letterSpacing}px` : getLetterSpacing(customization.letterSpacing),\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(caption => currentTime >= caption.start && currentTime <= caption.end);\n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n\n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n\n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = code => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = langCode => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return (transcript === null || transcript === void 0 ? void 0 : transcript.language) || langCode;\n  };\n\n  // Start dragging the caption overlay\n  const handleMouseDown = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n\n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n\n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n\n  // Handle mouse move during dragging - Completely redesigned for immediate, direct movement\n  const handleMouseMove = e => {\n    if (!overlayPosition.isDragging) return;\n\n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate direct position as percentage of container\n    // This immediately places the overlay where the mouse is instead of incremental movement\n    const newX = Math.max(0, Math.min(100, (e.clientX - rect.left) / rect.width * 100));\n    const newY = Math.max(0, Math.min(100, (e.clientY - rect.top) / rect.height * 100));\n\n    // Update position with direct placement for more intuitive movement\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n\n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n\n  // Stop dragging\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle touch start for mobile devices\n  const handleTouchStart = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n\n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', handleTouchEnd);\n\n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n\n  // Handle touch move for mobile devices\n  const handleTouchMove = e => {\n    if (!overlayPosition.isDragging) return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate touch movement delta\n    const deltaX = touch.clientX - overlayPosition.startX;\n    const deltaY = touch.clientY - overlayPosition.startY;\n\n    // Calculate new position in percentage\n    const newX = Math.max(0, Math.min(100, overlayPosition.x + deltaX / rect.width * 100));\n    const newY = Math.max(0, Math.min(100, overlayPosition.y + deltaY / rect.height * 100));\n\n    // Update position and starting points for next movement calculation\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n\n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n\n  // Handle touch end for mobile devices\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n\n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n\n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = time => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"YouTube Multilingual Captions Extractor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 975,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dark-mode-toggle\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"toggle-checkbox\",\n          type: \"checkbox\",\n          checked: darkMode,\n          onChange: toggleDarkMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 980,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-slot\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sun-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify sun-icon\",\n              \"data-icon\": \"feather-sun\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 988,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 987,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"toggle-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 990,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"moon-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify moon-icon\",\n              \"data-icon\": \"feather-moon\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 992,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 991,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 986,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 979,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 978,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: youtubeLink,\n          onChange: handleLinkChange,\n          placeholder: \"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\",\n          className: \"input-field\",\n          \"aria-label\": \"YouTube video URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1001,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'Load Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1009,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1000,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 999,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-message\",\n      role: \"status\",\n      \"aria-live\": \"polite\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1021,\n      columnNumber: 9\n    }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          ref: videoContainerRef,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"section-title\",\n              children: \"Video\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1033,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"placement-toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"placement-label\",\n                children: \"Captions:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1035,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`,\n                onClick: () => setCaptionPlacement('Below Video'),\n                children: \"Below\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1036,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`,\n                onClick: () => setCaptionPlacement('Overlay'),\n                children: \"Overlay\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1042,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1034,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1032,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-wrapper\",\n            style: {\n              paddingTop: '56.25%'\n            },\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"youtube-player\",\n              className: \"video-frame\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1052,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1050,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: videoResizeHandleRef,\n            className: \"video-resize-handle\",\n            title: \"Drag to resize video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1056,\n            columnNumber: 15\n          }, this), captionPlacement === 'Overlay' && /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: overlayRef,\n            className: `captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''}`,\n            style: {\n              position: 'absolute',\n              left: `${overlayPosition.x}%`,\n              top: `${overlayPosition.y}%`,\n              transform: 'translate(-50%, -50%)',\n              cursor: overlayPosition.isDragging ? 'grabbing' : 'grab'\n            },\n            onMouseDown: handleMouseDown,\n            onTouchStart: handleTouchStart,\n            tabIndex: \"0\",\n            role: \"region\",\n            \"aria-label\": \"Movable captions overlay\",\n            onKeyDown: e => {\n              // Arrow key navigation for accessibility\n              const step = 5; // 5% movement steps\n              if (e.key === 'ArrowLeft') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  x: Math.max(0, prev.x - step)\n                }));\n                e.preventDefault();\n              } else if (e.key === 'ArrowRight') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  x: Math.min(100, prev.x + step)\n                }));\n                e.preventDefault();\n              } else if (e.key === 'ArrowUp') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  y: Math.max(0, prev.y - step)\n                }));\n                e.preventDefault();\n              } else if (e.key === 'ArrowDown') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  y: Math.min(100, prev.y + step)\n                }));\n                e.preventDefault();\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-drag-instructions\",\n              children: \"Hold and drag to reposition\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1109,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => activeCaptions[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-caption\",\n              style: getCaptionStyle(lang),\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-language\",\n                children: [getLanguageName(lang), \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1116,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-text\",\n                children: formatCaptionText(activeCaptions[lang].text, lang)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1119,\n                columnNumber: 25\n              }, this)]\n            }, lang, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1115,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1064,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1031,\n          columnNumber: 13\n        }, this), captionPlacement === 'Below Video' && availableLanguages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"captions-container closer-to-video\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"toggle-caption-height\",\n              onClick: toggleCaptionsHeight,\n              title: captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions',\n              children: captionsHeight === 'normal' ? '↓' : '↑'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1136,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              // Skip hidden languages\n              if (hiddenLanguages[lang]) return null;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"caption-text-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `language-tag ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`,\n                  children: getLanguageName(lang)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1153,\n                  columnNumber: 23\n                }, this), activeCaptions[lang] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"caption-text\",\n                  children: formatCaptionText(activeCaptions[lang].text, lang)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1158,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"no-caption\",\n                  children: \"   ...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1162,\n                  columnNumber: 25\n                }, this)]\n              }, `active-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1149,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1135,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: captionsResizeHandleRef,\n            className: \"resize-handle resize-handle-vertical\",\n            title: \"Drag to resize captions height\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1170,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transcripts-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"section-subtitle\",\n              children: \"Full Transcripts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1178,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _captions$lang;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"language-title\",\n                  children: [getLanguageName(lang), lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1182,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"captions-content\",\n                  children: (_captions$lang = captions[lang]) === null || _captions$lang === void 0 ? void 0 : _captions$lang.map((caption, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`,\n                    onClick: () => jumpToTime(caption.start),\n                    tabIndex: \"0\",\n                    role: \"button\",\n                    \"aria-label\": `Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`,\n                    onKeyDown: e => {\n                      if (e.key === 'Enter' || e.key === ' ') {\n                        jumpToTime(caption.start);\n                      }\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"timestamp\",\n                      children: [Math.floor(caption.start / 60), \":\", (caption.start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(caption.end / 60), \":\", (caption.end % 60).toFixed(1).padStart(4, '0')]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1203,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"caption-text\",\n                      children: formatCaptionText(caption.text, lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1207,\n                      columnNumber: 29\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1191,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1189,\n                  columnNumber: 23\n                }, this)]\n              }, `transcript-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1181,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1177,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1132,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"settings-toggle\",\n          onClick: toggleSettingsPanel,\n          title: settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\",\n          \"aria-expanded\": !settingsPanelCollapsed,\n          \"aria-controls\": \"settings-content\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"settings-toggle-icon\",\n            children: settingsPanelCollapsed ? '»' : '«'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1229,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1222,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"settings-content\",\n          style: {\n            display: settingsPanelCollapsed ? 'none' : 'block',\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Customize Display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1235,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Select Languages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1239,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"primary-language\",\n                children: \"Primary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1243,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"primary-language\",\n                  value: selectedLanguages.primary,\n                  onChange: e => setLanguageRank(e.target.value, 'primary'),\n                  className: \"settings-select language-dropdown\",\n                  children: availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, transcript.language_code, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1252,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1245,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1244,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1242,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"secondary-language\",\n                children: \"Secondary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1262,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"secondary-language\",\n                  value: selectedLanguages.secondary,\n                  onChange: e => setLanguageRank(e.target.value, 'secondary'),\n                  className: \"settings-select language-dropdown\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1270,\n                    columnNumber: 23\n                  }, this), availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, transcript.language_code, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1272,\n                    columnNumber: 25\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1264,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1263,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1261,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1238,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Language Customizations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1283,\n              columnNumber: 17\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _languageCustomizatio, _languageCustomizatio2;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `language-customization-card ${collapsedLanguages[lang] ? 'collapsed' : ''}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-header\",\n                  onClick: () => toggleLanguageCollapse(lang),\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"language-header-content\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-name\",\n                      children: getLanguageName(lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1292,\n                      columnNumber: 25\n                    }, this), lang === selectedLanguages.primary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag primary\",\n                      children: \"Primary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1293,\n                      columnNumber: 64\n                    }, this), lang === selectedLanguages.secondary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag secondary\",\n                      children: \"Secondary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1294,\n                      columnNumber: 66\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1291,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"collapse-toggle\",\n                    onClick: e => {\n                      e.stopPropagation();\n                      toggleLanguageCollapse(lang);\n                    },\n                    \"aria-label\": collapsedLanguages[lang] ? \"Expand language settings\" : \"Collapse language settings\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1296,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1287,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-content\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: `visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`,\n                    onClick: () => toggleLanguageVisibility(lang),\n                    title: hiddenLanguages[lang] ? 'Show Language' : 'Hide Language',\n                    \"aria-label\": hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1308,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Font\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1317,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      className: \"font-select\",\n                      value: ((_languageCustomizatio = languageCustomizations[lang]) === null || _languageCustomizatio === void 0 ? void 0 : _languageCustomizatio.fontFamily) || 'Arial / Helvetica',\n                      onChange: e => updateLanguageCustomization(lang, 'fontFamily', e.target.value),\n                      style: {\n                        fontFamily: getFontFamily(((_languageCustomizatio2 = languageCustomizations[lang]) === null || _languageCustomizatio2 === void 0 ? void 0 : _languageCustomizatio2.fontFamily) || 'Arial / Helvetica')\n                      },\n                      children: ['Arial / Helvetica', 'Roboto', 'Open Sans', 'Verdana'].map(font => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: font,\n                        style: {\n                          fontFamily: getFontFamily(font)\n                        },\n                        children: font\n                      }, font, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1325,\n                        columnNumber: 29\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1318,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1316,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Size\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1338,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"button-group\",\n                      children: [{\n                        value: 14,\n                        label: 'Small'\n                      }, {\n                        value: 18,\n                        label: 'Medium'\n                      }, {\n                        value: 24,\n                        label: 'Large'\n                      }].map(size => {\n                        var _languageCustomizatio3;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: `option-button ${((_languageCustomizatio3 = languageCustomizations[lang]) === null || _languageCustomizatio3 === void 0 ? void 0 : _languageCustomizatio3.fontSize) === size.value ? 'active' : ''}`,\n                          onClick: () => updateLanguageCustomization(lang, 'fontSize', size.value),\n                          children: size.label\n                        }, size.value, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1345,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1339,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1337,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Font Weight\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1358,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"button-group\",\n                      children: [{\n                        value: 300,\n                        label: 'Light'\n                      }, {\n                        value: 400,\n                        label: 'Regular'\n                      }, {\n                        value: 700,\n                        label: 'Bold'\n                      }].map(weight => {\n                        var _languageCustomizatio4;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: `option-button ${((_languageCustomizatio4 = languageCustomizations[lang]) === null || _languageCustomizatio4 === void 0 ? void 0 : _languageCustomizatio4.fontWeight) === weight.value ? 'active' : ''}`,\n                          onClick: () => updateLanguageCustomization(lang, 'fontWeight', weight.value),\n                          children: weight.label\n                        }, weight.value, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1365,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1359,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1357,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Color\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1378,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"color-options\",\n                      children: ['#000000',\n                      // Black - for light mode\n                      '#FFFFFF',\n                      // White - for dark mode\n                      '#0052CC',\n                      // Accessible blue\n                      '#2E7D32' // Accessible green\n                      ].map(color => {\n                        var _languageCustomizatio5;\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: `color-option ${((_languageCustomizatio5 = languageCustomizations[lang]) === null || _languageCustomizatio5 === void 0 ? void 0 : _languageCustomizatio5.textColor) === color ? 'active' : ''}`,\n                          style: {\n                            backgroundColor: color\n                          },\n                          onClick: () => updateLanguageCustomization(lang, 'textColor', color)\n                        }, color, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1386,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1379,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1377,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Character Spacing\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1398,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"button-group\",\n                      children: [{\n                        value: -1,\n                        label: 'Tight'\n                      }, {\n                        value: 0,\n                        label: 'Normal'\n                      }, {\n                        value: 2,\n                        label: 'Wide'\n                      }].map(spacing => {\n                        var _languageCustomizatio6;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: `option-button ${((_languageCustomizatio6 = languageCustomizations[lang]) === null || _languageCustomizatio6 === void 0 ? void 0 : _languageCustomizatio6.letterSpacing) === spacing.value ? 'active' : ''}`,\n                          onClick: () => updateLanguageCustomization(lang, 'letterSpacing', spacing.value),\n                          children: spacing.label\n                        }, spacing.value, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1405,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1399,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1397,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"preview-text\",\n                    style: getCaptionStyle(lang),\n                    children: \"The quick brown fox jumps over the lazy dog.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1417,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"button-row\",\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"action-button primary\",\n                      disabled: !tempCustomizations[lang],\n                      onClick: () => applyCustomizations(lang),\n                      children: \"Apply Changes\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1426,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"action-button secondary\",\n                      onClick: () => {\n                        setLanguageCustomizations(prev => ({\n                          ...prev,\n                          [lang]: {\n                            fontFamily: 'Arial / Helvetica',\n                            fontSize: 16,\n                            fontWeight: 400,\n                            textColor: darkMode ? '#FFFFFF' : '#000000',\n                            letterSpacing: 0\n                          }\n                        }));\n                        // Clear any temporary customizations\n                        setTempCustomizations(prev => {\n                          const newTemp = {\n                            ...prev\n                          };\n                          delete newTemp[lang];\n                          return newTemp;\n                        });\n                      },\n                      children: \"Reset\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1433,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1425,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1306,\n                  columnNumber: 21\n                }, this)]\n              }, `customize-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1286,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1282,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Part of Speech Highlighting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1464,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pos-color-controls\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"pos-label\",\n                  htmlFor: \"noun-color\",\n                  children: \"Nouns\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1467,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"noun-color\",\n                  value: nounColor,\n                  onChange: e => setNounColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1474,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1475,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1476,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1477,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1478,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1468,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1466,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"pos-label\",\n                  htmlFor: \"verb-color\",\n                  children: \"Verbs\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1483,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"verb-color\",\n                  value: verbColor,\n                  onChange: e => setVerbColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1490,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1491,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1492,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1493,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1494,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1484,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1482,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"pos-label\",\n                  htmlFor: \"adjective-color\",\n                  children: \"Adjectives\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1499,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"adjective-color\",\n                  value: adjectiveColor,\n                  onChange: e => setAdjectiveColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1506,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1507,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1508,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1509,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1510,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1500,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1498,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1465,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1463,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1234,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1221,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1027,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 974,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"c8ix5z5zmgg8tZUjT5MI/AJp+mc=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledCaptionText\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","StyledCaptionText","text","customization","darkMode","getColor","fontStyles","fontFamily","getFontFamily","fontSize","getFontSize","fontWeight","getFontWeight","color","textColor","letterSpacing","processText","input","segments","currentIndex","tagRegex","match","exec","index","push","type","content","substring","length","style","children","map","segment","fileName","_jsxFileName","lineNumber","columnNumber","textDecoration","_c","API_BASE_URL","sizeValue","sizeMap","weightValue","getLetterSpacing","spacingValue","fontOption","fontMap","App","_s","youtubeLink","setYoutubeLink","videoId","setVideoId","captions","setCaptions","selectedLanguages","setSelectedLanguages","primary","secondary","availableLanguages","setAvailableLanguages","availableTranscripts","setAvailableTranscripts","status","setStatus","isLoading","setIsLoading","currentTime","setCurrentTime","activeCaptions","setActiveCaptions","collapsedLanguages","setCollapsedLanguages","hiddenLanguages","setHiddenLanguages","captionPlacement","setCaptionPlacement","overlayPosition","setOverlayPosition","x","y","isDragging","startX","startY","nounColor","setNounColor","verbColor","setVerbColor","adjectiveColor","setAdjectiveColor","languageCustomizations","setLanguageCustomizations","setDarkMode","settingsPanelCollapsed","setSettingsPanelCollapsed","captionsHeight","setCaptionsHeight","overlayRef","videoContainerRef","videoResizeHandleRef","captionsResizeHandleRef","activeResizeRef","tempCustomizations","setTempCustomizations","updateLanguageCustomization","lang","property","value","prev","applyCustomizations","newTemp","extractVideoId","url","regExp","toggleSettingsPanel","toggleCaptionsHeight","getSelectedLanguagesArray","Object","values","filter","initialCollapsedState","forEach","toggleLanguageCollapse","id","window","matchMedia","matches","document","body","classList","add","mediaQuery","handleChange","e","remove","Iconify","script","createElement","src","async","appendChild","addEventListener","removeEventListener","iconifyScript","querySelector","head","contains","removeChild","addListener","removeListener","newLanguageCustomizations","toggleLanguageVisibility","updatedCustomizations","keys","_updatedCustomization","_updatedCustomization2","videoContainer","current","resizeHandle","handleMouseDown","preventDefault","clientX","startWidth","offsetWidth","handleMouseMove","moveEvent","deltaX","newWidth","Math","max","width","videoWrapper","paddingTop","handleMouseUp","captionsSection","clientY","startHeight","offsetHeight","height","maxHeight","handleLinkChange","target","handleSubmit","fetchAvailableLanguages","_data$transcripts$fin","_data$transcripts$","console","log","response","fetch","ok","errorText","error","Error","data","json","transcripts","languageCodes","t","language_code","defaultPrimary","find","fetchCaptions","message","languages","captionsData","warn","processedTranscript","transcript","caption","applyPOSTagging","end","start","duration","commonNouns","commonVerbs","commonAdjectives","words","split","taggedText","i","originalWord","word","toLowerCase","replace","includes","setLanguageRank","rank","updatedLanguages","key","colorMap","formatCaptionText","getCaptionStyle","isRTL","backgroundColor","direction","newActiveCaptions","activeCaption","interval","setInterval","YT","Player","player","getCurrentTime","clearInterval","tag","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","createYouTubePlayer","destroy","events","onPlayerReady","onPlayerStateChange","event","PlayerState","PLAYING","updateTime","getPlayerState","requestAnimationFrame","findTranscriptByLanguageCode","code","getLanguageName","langCode","language","rect","getBoundingClientRect","newX","min","left","newY","top","getSelection","removeAllRanges","handleTouchStart","touch","touches","handleTouchMove","passive","handleTouchEnd","deltaY","toggleDarkMode","jumpToTime","time","seekTo","playVideo","className","checked","onChange","onSubmit","placeholder","disabled","role","ref","onClick","title","position","transform","cursor","onMouseDown","onTouchStart","tabIndex","onKeyDown","step","_captions$lang","floor","toFixed","padStart","display","htmlFor","_languageCustomizatio","_languageCustomizatio2","stopPropagation","font","label","size","_languageCustomizatio3","weight","_languageCustomizatio4","_languageCustomizatio5","spacing","_languageCustomizatio6","_c2","$RefreshReg$"],"sources":["/Users/arunasrivastava/random/cse482/Multilingual/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// Update this component (around line 5-89 in your code)\n// Fixed StyledCaptionText component\nconst StyledCaptionText = ({ text, customization, darkMode, getColor }) => {\n  // Font styles from customization\n  const fontStyles = {\n    fontFamily: getFontFamily(customization.fontFamily),\n    fontSize: getFontSize(customization.fontSize),\n    fontWeight: getFontWeight(customization.fontWeight),\n    // FIX: Always use custom textColor (don't override in dark mode)\n    color: customization.textColor,\n    letterSpacing: customization.letterSpacing || 'normal',\n  };\n\n  // Process the text to identify tagged parts\n  const processText = (input) => {\n    if (!input) return [];\n    \n    const segments = [];\n    let currentIndex = 0;\n    \n    // Regular expression to find tags\n    const tagRegex = /<(noun|verb|adjective)>(.*?)<\\/\\1>/g;\n    let match;\n    \n    // Find all tag matches\n    while ((match = tagRegex.exec(input)) !== null) {\n      // If there's text before the match, add it as plain text\n      if (match.index > currentIndex) {\n        segments.push({\n          type: 'text',\n          content: input.substring(currentIndex, match.index)\n        });\n      }\n      \n      // Add the tagged content\n      segments.push({\n        type: match[1], // noun, verb, or adjective\n        content: match[2] // the content inside the tags\n      });\n      \n      // Update the current index\n      currentIndex = match.index + match[0].length;\n    }\n    \n    // Add any remaining text after the last match\n    if (currentIndex < input.length) {\n      segments.push({\n        type: 'text',\n        content: input.substring(currentIndex)\n      });\n    }\n    \n    return segments;\n  };\n  \n  // Parse text into segments\n  const segments = processText(text);\n  \n  // Main render function - completely pure React approach\n  return (\n    <span style={fontStyles}>\n      {segments.map((segment, index) => {\n        if (segment.type === 'text') {\n          return <span key={index}>{segment.content}</span>;\n        } else if (segment.type === 'noun') {\n          return (\n            <span \n              key={index}\n              style={{\n                color: getColor('noun'),\n                textDecoration: 'underline'\n              }}\n            >\n              {segment.content}\n            </span>\n          );\n        } else if (segment.type === 'verb') {\n          return (\n            <span \n              key={index}\n              style={{\n                color: getColor('verb'),\n                textDecoration: 'underline'\n              }}\n            >\n              {segment.content}\n            </span>\n          );\n        } else if (segment.type === 'adjective') {\n          return (\n            <span \n              key={index}\n              style={{\n                color: getColor('adjective'),\n                textDecoration: 'underline'\n              }}\n            >\n              {segment.content}\n            </span>\n          );\n        }\n        return null;\n      })}\n    </span>\n  );\n};\n// API base URL - change this if your backend is running on a different port/host\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n // Get font size based on settings - now supports numeric values\nconst getFontSize = (sizeValue) => {\n  if (typeof sizeValue === 'number') {\n    return `${sizeValue}px`;\n  }\n  const sizeMap = {\n    'Small': '14px',\n    'Medium': '16px',\n    'Large': '20px',\n    'X-Large': '24px'\n  };\n  return sizeMap[sizeValue] || '16px';\n};\n\n// Get font weight based on settings - now supports numeric values\nconst getFontWeight = (weightValue) => {\n  if (typeof weightValue === 'number') {\n    return weightValue;\n  }\n  return weightValue || 400;\n};\n\n// Get letter spacing based on settings - now supports numeric values\nconst getLetterSpacing = (spacingValue) => {\n  if (typeof spacingValue === 'number') {\n    return `${spacingValue}px`;\n  }\n  return spacingValue || 'normal';\n};\n\n// Get font family based on settings\nconst getFontFamily = (fontOption) => {\n  const fontMap = {\n    'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n    'Roboto': 'Roboto, Arial, sans-serif',\n    'Open Sans': 'Open Sans, Arial, sans-serif',\n    'Verdana': 'Verdana, Geneva, sans-serif'\n  };\n  \n  return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n};\n\nfunction App() {\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=zy2Zj8yIe6c');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n    // tertiary language removed\n  }); \n  \n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n  \n  // Add missing hiddenLanguages state\n  const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  \n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50, // percentage\n    y: 80, // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0\n  });\n  \n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  \n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n  \n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n  \n  // New state for UI enhancements\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n  const [captionsHeight, setCaptionsHeight] = useState('normal');\n  \n  // Refs\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const videoResizeHandleRef = useRef(null);\n  const captionsResizeHandleRef = useRef(null);\n  const activeResizeRef = useRef(null);\n\n  // Add temporary customization state\n  const [tempCustomizations, setTempCustomizations] = useState({});\n  \n  // Update the updateLanguageCustomization function\n  const updateLanguageCustomization = (lang, property, value) => {\n    setTempCustomizations(prev => ({\n      ...prev,\n      [lang]: {\n        ...(prev[lang] || languageCustomizations[lang] || {}),\n        [property]: value\n      }\n    }));\n  };\n  \n  // Add function to apply customizations\n  const applyCustomizations = (lang) => {\n    if (tempCustomizations[lang]) {\n      setLanguageCustomizations(prev => ({\n        ...prev,\n        [lang]: {\n          ...prev[lang],\n          ...tempCustomizations[lang]\n        }\n      }));\n      // Clear temporary customizations for this language\n      setTempCustomizations(prev => {\n        const newTemp = { ...prev };\n        delete newTemp[lang];\n        return newTemp;\n      });\n    }\n  };\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = (url) => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[7].length === 11) ? match[7] : null;\n  };\n\n  // Toggle settings panel collapse\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]); \n  \n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = (lang) => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n    \n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n    \n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e) => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n    \n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    \n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = { ...languageCustomizations };\n    \n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 'Large', \n          fontWeight: 'bold', \n          // FIX: Set color based on dark mode but preserve it in language customization\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 'normal'\n        };\n      }\n    });\n    \n    setLanguageCustomizations(newLanguageCustomizations);\n  }, [selectedLanguages, darkMode, languageCustomizations]);\n\n  // Add this function to toggle language visibility\n  const toggleLanguageVisibility = (lang) => {\n    setHiddenLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = { ...languageCustomizations };\n    \n    Object.keys(updatedCustomizations).forEach(lang => {\n      if (updatedCustomizations[lang]?.textColor === '#000000' || updatedCustomizations[lang]?.textColor === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n      }\n    });\n    \n    setLanguageCustomizations(updatedCustomizations);\n  }, [darkMode, languageCustomizations]);\n\n  // Set up video container resize functionality\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const videoContainer = videoContainerRef.current;\n    const resizeHandle = videoResizeHandleRef.current;\n    \n    if (!videoContainer || !resizeHandle) return;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Save initial position and dimensions\n      const startX = e.clientX;\n      const startWidth = videoContainer.offsetWidth;\n      \n      activeResizeRef.current = 'video';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'video') return;\n        \n        // Calculate new width based on mouse movement\n        const deltaX = moveEvent.clientX - startX;\n        const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n        \n        // Set width\n        videoContainer.style.width = `${newWidth}px`;\n        \n        // Update the video wrapper's padding-top to maintain aspect ratio\n        const videoWrapper = videoContainer.querySelector('.video-wrapper');\n        if (videoWrapper) {\n          // No need to explicitly set height - padding-top maintains ratio\n          videoWrapper.style.paddingTop = `${(9/16) * 100}%`; // Keep 16:9 ratio\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      if (resizeHandle) {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      }\n    };\n  }, [videoId]);\n\n  // Set up captions container resize functionality\n  useEffect(() => {\n    if (!captionsResizeHandleRef.current) return;\n    \n    const resizeHandle = captionsResizeHandleRef.current;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Find the active captions section\n      const captionsSection = document.querySelector('.active-captions-section');\n      if (!captionsSection) return;\n      \n      // Save initial position and dimensions\n      const startY = e.clientY;\n      const startHeight = captionsSection.offsetHeight;\n      \n      activeResizeRef.current = 'captions';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'captions') return;\n        \n        // Calculate new height\n        const height = startHeight + (moveEvent.clientY - startY);\n        \n        // Apply new height with min constraint\n        if (height > 100) {\n          captionsSection.style.height = `${height}px`;\n          captionsSection.style.maxHeight = `${height}px`;\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      resizeHandle.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [availableLanguages.length]);\n\n  // Handle YouTube link input\n  const handleLinkChange = (e) => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async (videoId) => {\n    try {\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Received data:', data);\n      \n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Store the full transcript information\n      setAvailableTranscripts(data.transcripts);\n      \n      // Also keep the language codes for backward compatibility\n      const languageCodes = data.transcripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n      \n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = data.transcripts.find(t => t.language_code === 'en')?.language_code \n        || (data.transcripts[0]?.language_code || '');\n        \n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: ''\n      });\n      \n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n      \n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n      \n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n      \n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          \n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          \n          const data = await response.json();\n          \n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n          \n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          \n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      \n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = (text) => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n    \n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      \n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      \n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = { ...selectedLanguages };\n    \n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Get color based on settings\n  const getColor = (type) => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    \n    switch(type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return darkMode ? '#FFFFFF' : '#000000';\n    }\n  };\n\n\n\n  // Format caption text using new StyledCaptionText component\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    \n    const customization = languageCustomizations[lang] || {\n      fontFamily: getFontFamily('Arial / Helvetica'),\n      fontSize: getFontSize('Large'),\n      fontWeight: getFontWeight('bold'),\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 'normal'\n    };\n    \n    return (\n      <StyledCaptionText \n        text={text} \n        customization={customization} \n        darkMode={darkMode} \n        getColor={getColor} \n      />\n    );\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = (lang) => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    \n    return {\n      fontFamily: getFontFamily(customization.fontFamily),\n      fontSize: typeof customization.fontSize === 'number' ? `${customization.fontSize}px` : getFontSize(customization.fontSize),\n      fontWeight: getFontWeight(customization.fontWeight),\n      color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: typeof customization.letterSpacing === 'number' ? `${customization.letterSpacing}px` : getLetterSpacing(customization.letterSpacing),\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    \n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(\n          caption => currentTime >= caption.start && currentTime <= caption.end\n        );\n        \n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    \n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n    \n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    \n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      \n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    \n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      \n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    \n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    \n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    \n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = (code) => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = (langCode) => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return transcript?.language || langCode;\n  };\n  \n  // Start dragging the caption overlay\n  const handleMouseDown = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n    \n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    \n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n  \n  // Handle mouse move during dragging - Completely redesigned for immediate, direct movement\n  const handleMouseMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate direct position as percentage of container\n    // This immediately places the overlay where the mouse is instead of incremental movement\n    const newX = Math.max(0, Math.min(100, ((e.clientX - rect.left) / rect.width) * 100));\n    const newY = Math.max(0, Math.min(100, ((e.clientY - rect.top) / rect.height) * 100));\n    \n    // Update position with direct placement for more intuitive movement\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX, \n      y: newY,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n    \n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n  \n  // Stop dragging\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({ ...prev, isDragging: false }));\n    \n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n  \n  // Handle touch start for mobile devices\n  const handleTouchStart = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n    \n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, { passive: false });\n    document.addEventListener('touchend', handleTouchEnd);\n    \n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n  \n  // Handle touch move for mobile devices\n  const handleTouchMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate touch movement delta\n    const deltaX = touch.clientX - overlayPosition.startX;\n    const deltaY = touch.clientY - overlayPosition.startY;\n    \n    // Calculate new position in percentage\n    const newX = Math.max(0, Math.min(100, overlayPosition.x + (deltaX / rect.width) * 100));\n    const newY = Math.max(0, Math.min(100, overlayPosition.y + (deltaY / rect.height) * 100));\n    \n    // Update position and starting points for next movement calculation\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX, \n      y: newY,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n    \n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n  \n  // Handle touch end for mobile devices\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({ ...prev, isDragging: false }));\n    \n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n  \n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    \n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = (time) => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n\n  return (\n    <div className={`app-container ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <h1 className=\"app-title\">YouTube Multilingual Captions Extractor</h1>\n      \n      {/* Fancy Dark Mode Toggle */}\n      <div className=\"dark-mode-toggle\">\n        <label>\n          <input \n            className=\"toggle-checkbox\" \n            type=\"checkbox\" \n            checked={darkMode}\n            onChange={toggleDarkMode}\n          />\n          <div className=\"toggle-slot\">\n            <div className=\"sun-icon-wrapper\">\n              <div className=\"iconify sun-icon\" data-icon=\"feather-sun\" data-inline=\"false\"></div>\n            </div>\n            <div className=\"toggle-button\"></div>\n            <div className=\"moon-icon-wrapper\">\n              <div className=\"iconify moon-icon\" data-icon=\"feather-moon\" data-inline=\"false\"></div>\n            </div>\n          </div>\n        </label>\n      </div>\n      \n      {/* Input Box */}\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={youtubeLink}\n            onChange={handleLinkChange}\n            placeholder=\"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\"\n            className=\"input-field\"\n            aria-label=\"YouTube video URL\"\n          />\n          <button \n            type=\"submit\"\n            className=\"submit-button\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load Video'}\n          </button>\n        </div>\n      </form>\n      \n      {/* Status message */}\n      {status && (\n        <div className=\"status-message\" role=\"status\" aria-live=\"polite\">\n          {status}\n        </div>\n      )}\n      \n      {videoId && (\n        <div className=\"main-content\">\n          {/* Main Content Area (Video + Captions) */}\n          <div className=\"content-area\">\n            {/* Video Embed Box */}\n            <div className=\"video-container\" ref={videoContainerRef}>\n              <div className=\"video-header\">\n                <h2 className=\"section-title\">Video</h2>\n                <div className=\"placement-toggle\">\n                  <label className=\"placement-label\">Captions:</label>\n                  <button \n                    className={`placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`}\n                    onClick={() => setCaptionPlacement('Below Video')}\n                  >\n                    Below\n                  </button>\n                  <button \n                    className={`placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`}\n                    onClick={() => setCaptionPlacement('Overlay')}\n                  >\n                    Overlay\n                  </button>\n                </div>\n              </div>\n              <div className=\"video-wrapper\" style={{ paddingTop: '56.25%' }}> {/* 16:9 Aspect Ratio */}\n                {/* YouTube player */}\n                <div id=\"youtube-player\" className=\"video-frame\"></div>\n              </div>\n              \n              {/* Video resize handle */}\n              <div \n                ref={videoResizeHandleRef}\n                className=\"video-resize-handle\" \n                title=\"Drag to resize video\"\n              ></div>\n              \n              {/* Real-time captions overlay - with improved draggable functionality */}\n              {captionPlacement === 'Overlay' && (\n                <div \n                  ref={overlayRef}\n                  className={`captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''}`}\n                  style={{\n                    position: 'absolute',\n                    left: `${overlayPosition.x}%`,\n                    top: `${overlayPosition.y}%`,\n                    transform: 'translate(-50%, -50%)',\n                    cursor: overlayPosition.isDragging ? 'grabbing' : 'grab'\n                  }}\n                  onMouseDown={handleMouseDown}\n                  onTouchStart={handleTouchStart}\n                  tabIndex=\"0\"\n                  role=\"region\"\n                  aria-label=\"Movable captions overlay\"\n                  onKeyDown={(e) => {\n                    // Arrow key navigation for accessibility\n                    const step = 5; // 5% movement steps\n                    if (e.key === 'ArrowLeft') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        x: Math.max(0, prev.x - step)\n                      }));\n                      e.preventDefault();\n                    } else if (e.key === 'ArrowRight') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        x: Math.min(100, prev.x + step)\n                      }));\n                      e.preventDefault();\n                    } else if (e.key === 'ArrowUp') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        y: Math.max(0, prev.y - step)\n                      }));\n                      e.preventDefault();\n                    } else if (e.key === 'ArrowDown') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        y: Math.min(100, prev.y + step)\n                      }));\n                      e.preventDefault();\n                    }\n                  }}\n                >\n                  <div className=\"overlay-drag-instructions\">\n                    Hold and drag to reposition\n                  </div>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    activeCaptions[lang] && (\n                      <div key={lang} className=\"overlay-caption\" style={getCaptionStyle(lang)}>\n                        <span className=\"overlay-language\">\n                          {getLanguageName(lang)}:\n                        </span>\n                        <span className=\"overlay-text\">\n                          {formatCaptionText(activeCaptions[lang].text, lang)}\n                        </span>\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Captions Display - for Below Video mode only - with reduced spacing */}\n            {captionPlacement === 'Below Video' && \n             availableLanguages.length > 0 && (\n              <div className=\"captions-container closer-to-video\">\n                \n                {/* Current active captions section - all languages together */}\n                <div className={`active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`}>\n                  <button\n                    className=\"toggle-caption-height\"\n                    onClick={toggleCaptionsHeight}\n                    title={captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions'}\n                  >\n                    {captionsHeight === 'normal' ? '↓' : '↑'}\n                  </button>\n                  \n                  {getSelectedLanguagesArray().map(lang => {\n                  // Skip hidden languages\n                  if (hiddenLanguages[lang]) return null;\n                  \n                  return (\n                    <div \n                      key={`active-${lang}`} \n                      className=\"caption-text-container\"\n                    >\n                      <span className={`language-tag ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`}>\n                        {getLanguageName(lang)}\n                      </span>\n                      \n                      {activeCaptions[lang] ? (\n                        <div className=\"caption-text\">\n                          {formatCaptionText(activeCaptions[lang].text, lang)}\n                        </div>\n                      ) : (\n                        <span className=\"no-caption\">   ...</span>\n                      )}\n                    </div>\n                  );\n                })}\n                </div>\n                \n                {/* Caption resize handle */}\n                <div \n                  ref={captionsResizeHandleRef}\n                  className=\"resize-handle resize-handle-vertical\" \n                  title=\"Drag to resize captions height\"\n                ></div>\n                \n                {/* Transcripts section - all languages */}\n                <div className=\"transcripts-section\">\n                  <h3 className=\"section-subtitle\">Full Transcripts</h3>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    <div key={`transcript-${lang}`} className=\"language-section\">\n                      <h4 className=\"language-title\">\n                        {getLanguageName(lang)} \n                        {lang === selectedLanguages.primary ? ' (Primary)' : \n                         lang === selectedLanguages.secondary ? ' (Secondary)' : ''}\n                      </h4>\n                      \n                      {/* Full transcript with timestamps */}\n                      <div className=\"captions-content\">\n                        {captions[lang]?.map((caption, index) => (\n                          <div key={index} \n                            className={`caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`}\n                            onClick={() => jumpToTime(caption.start)}\n                            tabIndex=\"0\"\n                            role=\"button\"\n                            aria-label={`Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`}\n                            onKeyDown={(e) => {\n                              if (e.key === 'Enter' || e.key === ' ') {\n                                jumpToTime(caption.start);\n                              }\n                            }}\n                          >\n                            <div className=\"timestamp\">\n                              {Math.floor(caption.start / 60)}:{(caption.start % 60).toFixed(1).padStart(4, '0')} - \n                              {Math.floor(caption.end / 60)}:{(caption.end % 60).toFixed(1).padStart(4, '0')}\n                            </div>\n                            <div className=\"caption-text\">\n                              {formatCaptionText(caption.text, lang)}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Settings Panel - Now with improved toggle */}\n          <div className={`settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`}>\n            <button \n              className=\"settings-toggle\" \n              onClick={toggleSettingsPanel}\n              title={settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\"}\n              aria-expanded={!settingsPanelCollapsed}\n              aria-controls=\"settings-content\"\n            >\n              <span className=\"settings-toggle-icon\">\n                {settingsPanelCollapsed ? '»' : '«'}\n              </span>\n            </button>\n            \n            <div id=\"settings-content\" style={{ display: settingsPanelCollapsed ? 'none' : 'block', width: '100%' }}>\n              <h2 className=\"section-title\">Customize Display</h2>\n              \n              {/* Language Selection */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Select Languages</h3>\n                \n                {/* Primary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"primary-language\">Primary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"primary-language\"\n                      value={selectedLanguages.primary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'primary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      {availableTranscripts.map(transcript => (\n                        <option key={transcript.language_code} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n                \n                {/* Secondary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"secondary-language\">Secondary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"secondary-language\"\n                      value={selectedLanguages.secondary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'secondary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      <option value=\"\">None</option>\n                      {availableTranscripts.map(transcript => (\n                        <option key={transcript.language_code} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Language-specific customization */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Language Customizations</h3>\n                \n                {getSelectedLanguagesArray().map(lang => (\n                  <div key={`customize-${lang}`} className={`language-customization-card ${collapsedLanguages[lang] ? 'collapsed' : ''}`}>\n                    <div \n                      className=\"language-card-header\"\n                      onClick={() => toggleLanguageCollapse(lang)}\n                    >\n                      <div className=\"language-header-content\">\n                        <span className=\"language-name\">{getLanguageName(lang)}</span>\n                        {lang === selectedLanguages.primary && <span className=\"language-tag primary\">Primary</span>}\n                        {lang === selectedLanguages.secondary && <span className=\"language-tag secondary\">Secondary</span>}\n                      </div>\n                      <button \n                        className=\"collapse-toggle\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          toggleLanguageCollapse(lang);\n                        }}\n                        aria-label={collapsedLanguages[lang] ? \"Expand language settings\" : \"Collapse language settings\"}\n                      />\n                    </div>\n                    \n                    <div className=\"language-card-content\">\n                      {/* Visibility Toggle */}\n                      <button\n                        className={`visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`}\n                        onClick={() => toggleLanguageVisibility(lang)}\n                        title={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                        aria-label={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                      />\n\n                      {/* Font Selection */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Font</div>\n                        <select \n                          className=\"font-select\"\n                          value={languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica'}\n                          onChange={(e) => updateLanguageCustomization(lang, 'fontFamily', e.target.value)}\n                          style={{ fontFamily: getFontFamily(languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica') }}\n                        >\n                          {['Arial / Helvetica', 'Roboto', 'Open Sans', 'Verdana'].map(font => (\n                            <option \n                              key={font} \n                              value={font}\n                              style={{ fontFamily: getFontFamily(font) }}\n                            >\n                              {font}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n\n                      {/* Font Size */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Size</div>\n                        <div className=\"button-group\">\n                          {[\n                            { value: 14, label: 'Small' },\n                            { value: 18, label: 'Medium' },\n                            { value: 24, label: 'Large' }\n                          ].map(size => (\n                            <button\n                              key={size.value}\n                              className={`option-button ${languageCustomizations[lang]?.fontSize === size.value ? 'active' : ''}`}\n                              onClick={() => updateLanguageCustomization(lang, 'fontSize', size.value)}\n                            >\n                              {size.label}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Font Weight */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Font Weight</div>\n                        <div className=\"button-group\">\n                          {[\n                            { value: 300, label: 'Light' },\n                            { value: 400, label: 'Regular' },\n                            { value: 700, label: 'Bold' }\n                          ].map(weight => (\n                            <button\n                              key={weight.value}\n                              className={`option-button ${languageCustomizations[lang]?.fontWeight === weight.value ? 'active' : ''}`}\n                              onClick={() => updateLanguageCustomization(lang, 'fontWeight', weight.value)}\n                            >\n                              {weight.label}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Text Color */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Color</div>\n                        <div className=\"color-options\">\n                          {[\n                            '#000000', // Black - for light mode\n                            '#FFFFFF', // White - for dark mode\n                            '#0052CC', // Accessible blue\n                            '#2E7D32'  // Accessible green\n                          ].map(color => (\n                            <div\n                              key={color}\n                              className={`color-option ${languageCustomizations[lang]?.textColor === color ? 'active' : ''}`}\n                              style={{ backgroundColor: color }}\n                              onClick={() => updateLanguageCustomization(lang, 'textColor', color)}\n                            />\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Character Spacing */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Character Spacing</div>\n                        <div className=\"button-group\">\n                          {[\n                            { value: -1, label: 'Tight' },\n                            { value: 0, label: 'Normal' },\n                            { value: 2, label: 'Wide' }\n                          ].map(spacing => (\n                            <button\n                              key={spacing.value}\n                              className={`option-button ${languageCustomizations[lang]?.letterSpacing === spacing.value ? 'active' : ''}`}\n                              onClick={() => updateLanguageCustomization(lang, 'letterSpacing', spacing.value)}\n                            >\n                              {spacing.label}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Preview Text */}\n                      <div \n                        className=\"preview-text\"\n                        style={getCaptionStyle(lang)}\n                      >\n                        The quick brown fox jumps over the lazy dog.\n                      </div>\n\n                      {/* Action Buttons */}\n                      <div className=\"button-row\">\n                        <button \n                          className=\"action-button primary\"\n                          disabled={!tempCustomizations[lang]}\n                          onClick={() => applyCustomizations(lang)}\n                        >\n                          Apply Changes\n                        </button>\n                        <button \n                          className=\"action-button secondary\"\n                          onClick={() => {\n                            setLanguageCustomizations(prev => ({\n                              ...prev,\n                              [lang]: {\n                                fontFamily: 'Arial / Helvetica',\n                                fontSize: 16,\n                                fontWeight: 400,\n                                textColor: darkMode ? '#FFFFFF' : '#000000',\n                                letterSpacing: 0\n                              }\n                            }));\n                            // Clear any temporary customizations\n                            setTempCustomizations(prev => {\n                              const newTemp = { ...prev };\n                              delete newTemp[lang];\n                              return newTemp;\n                            });\n                          }}\n                        >\n                          Reset\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              {/* Part of speech color customization */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Part of Speech Highlighting</h3>\n                <div className=\"pos-color-controls\">\n                  <div className=\"pos-color-item\">\n                    <label className=\"pos-label\" htmlFor=\"noun-color\">Nouns</label>\n                    <select \n                      id=\"noun-color\" \n                      value={nounColor} \n                      onChange={(e) => setNounColor(e.target.value)} \n                      className=\"settings-select pos-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"pos-color-item\">\n                    <label className=\"pos-label\" htmlFor=\"verb-color\">Verbs</label>\n                    <select \n                      id=\"verb-color\" \n                      value={verbColor} \n                      onChange={(e) => setVerbColor(e.target.value)} \n                      className=\"settings-select pos-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"pos-color-item\">\n                    <label className=\"pos-label\" htmlFor=\"adjective-color\">Adjectives</label>\n                    <select \n                      id=\"adjective-color\" \n                      value={adjectiveColor} \n                      onChange={(e) => setAdjectiveColor(e.target.value)} \n                      className=\"settings-select pos-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,WAAW;;AAElB;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,IAAI;EAAEC,aAAa;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EACzE;EACA,MAAMC,UAAU,GAAG;IACjBC,UAAU,EAAEC,aAAa,CAACL,aAAa,CAACI,UAAU,CAAC;IACnDE,QAAQ,EAAEC,WAAW,CAACP,aAAa,CAACM,QAAQ,CAAC;IAC7CE,UAAU,EAAEC,aAAa,CAACT,aAAa,CAACQ,UAAU,CAAC;IACnD;IACAE,KAAK,EAAEV,aAAa,CAACW,SAAS;IAC9BC,aAAa,EAAEZ,aAAa,CAACY,aAAa,IAAI;EAChD,CAAC;;EAED;EACA,MAAMC,WAAW,GAAIC,KAAK,IAAK;IAC7B,IAAI,CAACA,KAAK,EAAE,OAAO,EAAE;IAErB,MAAMC,QAAQ,GAAG,EAAE;IACnB,IAAIC,YAAY,GAAG,CAAC;;IAEpB;IACA,MAAMC,QAAQ,GAAG,qCAAqC;IACtD,IAAIC,KAAK;;IAET;IACA,OAAO,CAACA,KAAK,GAAGD,QAAQ,CAACE,IAAI,CAACL,KAAK,CAAC,MAAM,IAAI,EAAE;MAC9C;MACA,IAAII,KAAK,CAACE,KAAK,GAAGJ,YAAY,EAAE;QAC9BD,QAAQ,CAACM,IAAI,CAAC;UACZC,IAAI,EAAE,MAAM;UACZC,OAAO,EAAET,KAAK,CAACU,SAAS,CAACR,YAAY,EAAEE,KAAK,CAACE,KAAK;QACpD,CAAC,CAAC;MACJ;;MAEA;MACAL,QAAQ,CAACM,IAAI,CAAC;QACZC,IAAI,EAAEJ,KAAK,CAAC,CAAC,CAAC;QAAE;QAChBK,OAAO,EAAEL,KAAK,CAAC,CAAC,CAAC,CAAC;MACpB,CAAC,CAAC;;MAEF;MACAF,YAAY,GAAGE,KAAK,CAACE,KAAK,GAAGF,KAAK,CAAC,CAAC,CAAC,CAACO,MAAM;IAC9C;;IAEA;IACA,IAAIT,YAAY,GAAGF,KAAK,CAACW,MAAM,EAAE;MAC/BV,QAAQ,CAACM,IAAI,CAAC;QACZC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAET,KAAK,CAACU,SAAS,CAACR,YAAY;MACvC,CAAC,CAAC;IACJ;IAEA,OAAOD,QAAQ;EACjB,CAAC;;EAED;EACA,MAAMA,QAAQ,GAAGF,WAAW,CAACd,IAAI,CAAC;;EAElC;EACA,oBACEF,OAAA;IAAM6B,KAAK,EAAEvB,UAAW;IAAAwB,QAAA,EACrBZ,QAAQ,CAACa,GAAG,CAAC,CAACC,OAAO,EAAET,KAAK,KAAK;MAChC,IAAIS,OAAO,CAACP,IAAI,KAAK,MAAM,EAAE;QAC3B,oBAAOzB,OAAA;UAAA8B,QAAA,EAAmBE,OAAO,CAACN;QAAO,GAAvBH,KAAK;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAyB,CAAC;MACnD,CAAC,MAAM,IAAIJ,OAAO,CAACP,IAAI,KAAK,MAAM,EAAE;QAClC,oBACEzB,OAAA;UAEE6B,KAAK,EAAE;YACLhB,KAAK,EAAER,QAAQ,CAAC,MAAM,CAAC;YACvBgC,cAAc,EAAE;UAClB,CAAE;UAAAP,QAAA,EAEDE,OAAO,CAACN;QAAO,GANXH,KAAK;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAON,CAAC;MAEX,CAAC,MAAM,IAAIJ,OAAO,CAACP,IAAI,KAAK,MAAM,EAAE;QAClC,oBACEzB,OAAA;UAEE6B,KAAK,EAAE;YACLhB,KAAK,EAAER,QAAQ,CAAC,MAAM,CAAC;YACvBgC,cAAc,EAAE;UAClB,CAAE;UAAAP,QAAA,EAEDE,OAAO,CAACN;QAAO,GANXH,KAAK;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAON,CAAC;MAEX,CAAC,MAAM,IAAIJ,OAAO,CAACP,IAAI,KAAK,WAAW,EAAE;QACvC,oBACEzB,OAAA;UAEE6B,KAAK,EAAE;YACLhB,KAAK,EAAER,QAAQ,CAAC,WAAW,CAAC;YAC5BgC,cAAc,EAAE;UAClB,CAAE;UAAAP,QAAA,EAEDE,OAAO,CAACN;QAAO,GANXH,KAAK;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAON,CAAC;MAEX;MACA,OAAO,IAAI;IACb,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX,CAAC;AACD;AAAAE,EAAA,GAxGMrC,iBAAiB;AAyGvB,MAAMsC,YAAY,GAAG,uBAAuB;AAC3C;AACD,MAAM7B,WAAW,GAAI8B,SAAS,IAAK;EACjC,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;IACjC,OAAO,GAAGA,SAAS,IAAI;EACzB;EACA,MAAMC,OAAO,GAAG;IACd,OAAO,EAAE,MAAM;IACf,QAAQ,EAAE,MAAM;IAChB,OAAO,EAAE,MAAM;IACf,SAAS,EAAE;EACb,CAAC;EACD,OAAOA,OAAO,CAACD,SAAS,CAAC,IAAI,MAAM;AACrC,CAAC;;AAED;AACA,MAAM5B,aAAa,GAAI8B,WAAW,IAAK;EACrC,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;IACnC,OAAOA,WAAW;EACpB;EACA,OAAOA,WAAW,IAAI,GAAG;AAC3B,CAAC;;AAED;AACA,MAAMC,gBAAgB,GAAIC,YAAY,IAAK;EACzC,IAAI,OAAOA,YAAY,KAAK,QAAQ,EAAE;IACpC,OAAO,GAAGA,YAAY,IAAI;EAC5B;EACA,OAAOA,YAAY,IAAI,QAAQ;AACjC,CAAC;;AAED;AACA,MAAMpC,aAAa,GAAIqC,UAAU,IAAK;EACpC,MAAMC,OAAO,GAAG;IACd,mBAAmB,EAAE,8BAA8B;IACnD,QAAQ,EAAE,2BAA2B;IACrC,WAAW,EAAE,8BAA8B;IAC3C,SAAS,EAAE;EACb,CAAC;EAED,OAAOA,OAAO,CAACD,UAAU,CAAC,IAAI,8BAA8B;AAC9D,CAAC;AAED,SAASE,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGtD,QAAQ,CAAC,6CAA6C,CAAC;EAC7F,MAAM,CAACuD,OAAO,EAAEC,UAAU,CAAC,GAAGxD,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACyD,QAAQ,EAAEC,WAAW,CAAC,GAAG1D,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAAC2D,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG5D,QAAQ,CAAC;IACzD6D,OAAO,EAAE,IAAI;IACbC,SAAS,EAAE;IACX;EACF,CAAC,CAAC;EAEF,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGhE,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACiE,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGlE,QAAQ,CAAC,EAAE,CAAC;EACpE,MAAM,CAACmE,MAAM,EAAEC,SAAS,CAAC,GAAGpE,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACqE,SAAS,EAAEC,YAAY,CAAC,GAAGtE,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACuE,WAAW,EAAEC,cAAc,CAAC,GAAGxE,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACyE,cAAc,EAAEC,iBAAiB,CAAC,GAAG1E,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAExD;EACA,MAAM,CAAC2E,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG5E,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhE;EACA,MAAM,CAAC6E,eAAe,EAAEC,kBAAkB,CAAC,GAAG9E,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE1D;EACA,MAAM,CAAC+E,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGhF,QAAQ,CAAC,aAAa,CAAC;;EAEvE;EACA,MAAM,CAACiF,eAAe,EAAEC,kBAAkB,CAAC,GAAGlF,QAAQ,CAAC;IACrDmF,CAAC,EAAE,EAAE;IAAE;IACPC,CAAC,EAAE,EAAE;IAAE;IACPC,UAAU,EAAE,KAAK;IACjBC,MAAM,EAAE,CAAC;IACTC,MAAM,EAAE;EACV,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGzF,QAAQ,CAAC,eAAe,CAAC;EAC3D,MAAM,CAAC0F,SAAS,EAAEC,YAAY,CAAC,GAAG3F,QAAQ,CAAC,YAAY,CAAC;EACxD,MAAM,CAAC4F,cAAc,EAAEC,iBAAiB,CAAC,GAAG7F,QAAQ,CAAC,cAAc,CAAC;;EAEpE;EACA,MAAM,CAAC8F,sBAAsB,EAAEC,yBAAyB,CAAC,GAAG/F,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAExE;EACA,MAAM,CAACQ,QAAQ,EAAEwF,WAAW,CAAC,GAAGhG,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACA,MAAM,CAACiG,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGlG,QAAQ,CAAC,KAAK,CAAC;EAC3E,MAAM,CAACmG,cAAc,EAAEC,iBAAiB,CAAC,GAAGpG,QAAQ,CAAC,QAAQ,CAAC;;EAE9D;EACA,MAAMqG,UAAU,GAAGnG,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAMoG,iBAAiB,GAAGpG,MAAM,CAAC,IAAI,CAAC;EACtC,MAAMqG,oBAAoB,GAAGrG,MAAM,CAAC,IAAI,CAAC;EACzC,MAAMsG,uBAAuB,GAAGtG,MAAM,CAAC,IAAI,CAAC;EAC5C,MAAMuG,eAAe,GAAGvG,MAAM,CAAC,IAAI,CAAC;;EAEpC;EACA,MAAM,CAACwG,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG3G,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhE;EACA,MAAM4G,2BAA2B,GAAGA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,KAAK,KAAK;IAC7DJ,qBAAqB,CAACK,IAAI,KAAK;MAC7B,GAAGA,IAAI;MACP,CAACH,IAAI,GAAG;QACN,IAAIG,IAAI,CAACH,IAAI,CAAC,IAAIf,sBAAsB,CAACe,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACrD,CAACC,QAAQ,GAAGC;MACd;IACF,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAME,mBAAmB,GAAIJ,IAAI,IAAK;IACpC,IAAIH,kBAAkB,CAACG,IAAI,CAAC,EAAE;MAC5Bd,yBAAyB,CAACiB,IAAI,KAAK;QACjC,GAAGA,IAAI;QACP,CAACH,IAAI,GAAG;UACN,GAAGG,IAAI,CAACH,IAAI,CAAC;UACb,GAAGH,kBAAkB,CAACG,IAAI;QAC5B;MACF,CAAC,CAAC,CAAC;MACH;MACAF,qBAAqB,CAACK,IAAI,IAAI;QAC5B,MAAME,OAAO,GAAG;UAAE,GAAGF;QAAK,CAAC;QAC3B,OAAOE,OAAO,CAACL,IAAI,CAAC;QACpB,OAAOK,OAAO;MAChB,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAMC,cAAc,GAAIC,GAAG,IAAK;IAC9B,MAAMC,MAAM,GAAG,2EAA2E;IAC1F,MAAM5F,KAAK,GAAG2F,GAAG,CAAC3F,KAAK,CAAC4F,MAAM,CAAC;IAC/B,OAAQ5F,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACO,MAAM,KAAK,EAAE,GAAIP,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;EAC5D,CAAC;;EAED;EACA,MAAM6F,mBAAmB,GAAGA,CAAA,KAAM;IAChCpB,yBAAyB,CAAC,CAACD,sBAAsB,CAAC;EACpD,CAAC;;EAED;EACA,MAAMsB,oBAAoB,GAAGA,CAAA,KAAM;IACjCnB,iBAAiB,CAACD,cAAc,KAAK,QAAQ,GAAG,UAAU,GAAG,QAAQ,CAAC;EACxE,CAAC;;EAED;EACA,MAAMqB,yBAAyB,GAAGA,CAAA,KAAM;IACtC,OAAOC,MAAM,CAACC,MAAM,CAAC/D,iBAAiB,CAAC,CAACgE,MAAM,CAACd,IAAI,IAAIA,IAAI,KAAK,EAAE,CAAC;EACrE,CAAC;EAED5G,SAAS,CAAC,MAAM;IACd,MAAM2H,qBAAqB,GAAG,CAAC,CAAC;IAChCJ,yBAAyB,CAAC,CAAC,CAACK,OAAO,CAAChB,IAAI,IAAI;MAC1Ce,qBAAqB,CAACf,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC;IACFjC,qBAAqB,CAACgD,qBAAqB,CAAC;EAC9C,CAAC,EAAE,CAACjE,iBAAiB,CAAC,CAAC;;EAEvB;EACA,MAAMmE,sBAAsB,GAAIjB,IAAI,IAAK;IACvCjC,qBAAqB,CAACoC,IAAI,KAAK;MAC7B,GAAGA,IAAI;MACP,CAACH,IAAI,GAAG,CAACG,IAAI,CAACH,IAAI;IACpB,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA5G,SAAS,CAAC,MAAM;IACd,MAAM8H,EAAE,GAAGZ,cAAc,CAAC9D,WAAW,CAAC;IACtC,IAAI0E,EAAE,EAAE;MACNvE,UAAU,CAACuE,EAAE,CAAC;IAChB;;IAEA;IACA,IAAIC,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,EAAE;MAClFlC,WAAW,CAAC,IAAI,CAAC;MACjBmC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;IAC1C;;IAEA;IACA,MAAMC,UAAU,GAAGP,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC;IACpE,MAAMO,YAAY,GAAIC,CAAC,IAAK;MAC1BzC,WAAW,CAACyC,CAAC,CAACP,OAAO,CAAC;MACtB,IAAIO,CAAC,CAACP,OAAO,EAAE;QACbC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;MAC1C,CAAC,MAAM;QACLH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACK,MAAM,CAAC,WAAW,CAAC;MAC7C;IACF,CAAC;;IAED;IACA,IAAI,CAACV,MAAM,CAACW,OAAO,EAAE;MACnB,MAAMC,MAAM,GAAGT,QAAQ,CAACU,aAAa,CAAC,QAAQ,CAAC;MAC/CD,MAAM,CAACE,GAAG,GAAG,oDAAoD;MACjEF,MAAM,CAACG,KAAK,GAAG,IAAI;MACnBZ,QAAQ,CAACC,IAAI,CAACY,WAAW,CAACJ,MAAM,CAAC;IACnC;IAEA,IAAIL,UAAU,CAACU,gBAAgB,EAAE;MAC/BV,UAAU,CAACU,gBAAgB,CAAC,QAAQ,EAAET,YAAY,CAAC;MACnD,OAAO,MAAM;QACXD,UAAU,CAACW,mBAAmB,CAAC,QAAQ,EAAEV,YAAY,CAAC;QACtD;QACA,MAAMW,aAAa,GAAGhB,QAAQ,CAACiB,aAAa,CAAC,kEAAkE,CAAC;QAChH,IAAID,aAAa,IAAI,CAAChB,QAAQ,CAACkB,IAAI,CAACC,QAAQ,CAACH,aAAa,CAAC,EAAE;UAC3DhB,QAAQ,CAACC,IAAI,CAACmB,WAAW,CAACJ,aAAa,CAAC;QAC1C;MACF,CAAC;IACH,CAAC,MAAM;MACL;MACAZ,UAAU,CAACiB,WAAW,CAAChB,YAAY,CAAC;MACpC,OAAO,MAAM;QACXD,UAAU,CAACkB,cAAc,CAACjB,YAAY,CAAC;QACvC;QACA,MAAMW,aAAa,GAAGhB,QAAQ,CAACiB,aAAa,CAAC,kEAAkE,CAAC;QAChH,IAAID,aAAa,IAAI,CAAChB,QAAQ,CAACkB,IAAI,CAACC,QAAQ,CAACH,aAAa,CAAC,EAAE;UAC3DhB,QAAQ,CAACC,IAAI,CAACmB,WAAW,CAACJ,aAAa,CAAC;QAC1C;MACF,CAAC;IACH;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAlJ,SAAS,CAAC,MAAM;IACd,MAAMyJ,yBAAyB,GAAG;MAAE,GAAG5D;IAAuB,CAAC;;IAE/D;IACA2B,MAAM,CAACC,MAAM,CAAC/D,iBAAiB,CAAC,CAACkE,OAAO,CAAChB,IAAI,IAAI;MAC/C,IAAIA,IAAI,IAAI,CAAC6C,yBAAyB,CAAC7C,IAAI,CAAC,EAAE;QAC5C6C,yBAAyB,CAAC7C,IAAI,CAAC,GAAG;UAChClG,UAAU,EAAE,mBAAmB;UAC/BE,QAAQ,EAAE,OAAO;UACjBE,UAAU,EAAE,MAAM;UAClB;UACAG,SAAS,EAAEV,QAAQ,GAAG,SAAS,GAAG,SAAS;UAC3CW,aAAa,EAAE;QACjB,CAAC;MACH;IACF,CAAC,CAAC;IAEF4E,yBAAyB,CAAC2D,yBAAyB,CAAC;EACtD,CAAC,EAAE,CAAC/F,iBAAiB,EAAEnD,QAAQ,EAAEsF,sBAAsB,CAAC,CAAC;;EAEzD;EACA,MAAM6D,wBAAwB,GAAI9C,IAAI,IAAK;IACzC/B,kBAAkB,CAACkC,IAAI,KAAK;MAC1B,GAAGA,IAAI;MACP,CAACH,IAAI,GAAG,CAACG,IAAI,CAACH,IAAI;IACpB,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA5G,SAAS,CAAC,MAAM;IACd;IACA,MAAM2J,qBAAqB,GAAG;MAAE,GAAG9D;IAAuB,CAAC;IAE3D2B,MAAM,CAACoC,IAAI,CAACD,qBAAqB,CAAC,CAAC/B,OAAO,CAAChB,IAAI,IAAI;MAAA,IAAAiD,qBAAA,EAAAC,sBAAA;MACjD,IAAI,EAAAD,qBAAA,GAAAF,qBAAqB,CAAC/C,IAAI,CAAC,cAAAiD,qBAAA,uBAA3BA,qBAAA,CAA6B5I,SAAS,MAAK,SAAS,IAAI,EAAA6I,sBAAA,GAAAH,qBAAqB,CAAC/C,IAAI,CAAC,cAAAkD,sBAAA,uBAA3BA,sBAAA,CAA6B7I,SAAS,MAAK,SAAS,EAAE;QAChH0I,qBAAqB,CAAC/C,IAAI,CAAC,CAAC3F,SAAS,GAAGV,QAAQ,GAAG,SAAS,GAAG,SAAS;MAC1E;IACF,CAAC,CAAC;IAEFuF,yBAAyB,CAAC6D,qBAAqB,CAAC;EAClD,CAAC,EAAE,CAACpJ,QAAQ,EAAEsF,sBAAsB,CAAC,CAAC;;EAEtC;EACA7F,SAAS,CAAC,MAAM;IACd,IAAI,CAACsD,OAAO,EAAE;IAEd,MAAMyG,cAAc,GAAG1D,iBAAiB,CAAC2D,OAAO;IAChD,MAAMC,YAAY,GAAG3D,oBAAoB,CAAC0D,OAAO;IAEjD,IAAI,CAACD,cAAc,IAAI,CAACE,YAAY,EAAE;IAEtC,MAAMC,eAAe,GAAI1B,CAAC,IAAK;MAC7BA,CAAC,CAAC2B,cAAc,CAAC,CAAC;;MAElB;MACA,MAAM9E,MAAM,GAAGmD,CAAC,CAAC4B,OAAO;MACxB,MAAMC,UAAU,GAAGN,cAAc,CAACO,WAAW;MAE7C9D,eAAe,CAACwD,OAAO,GAAG,OAAO;MAEjC,MAAMO,eAAe,GAAIC,SAAS,IAAK;QACrC,IAAIhE,eAAe,CAACwD,OAAO,KAAK,OAAO,EAAE;;QAEzC;QACA,MAAMS,MAAM,GAAGD,SAAS,CAACJ,OAAO,GAAG/E,MAAM;QACzC,MAAMqF,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEP,UAAU,GAAGI,MAAM,CAAC,CAAC,CAAC;;QAErD;QACAV,cAAc,CAAC/H,KAAK,CAAC6I,KAAK,GAAG,GAAGH,QAAQ,IAAI;;QAE5C;QACA,MAAMI,YAAY,GAAGf,cAAc,CAACZ,aAAa,CAAC,gBAAgB,CAAC;QACnE,IAAI2B,YAAY,EAAE;UAChB;UACAA,YAAY,CAAC9I,KAAK,CAAC+I,UAAU,GAAG,GAAI,CAAC,GAAC,EAAE,GAAI,GAAG,GAAG,CAAC,CAAC;QACtD;QAEAP,SAAS,CAACL,cAAc,CAAC,CAAC;MAC5B,CAAC;MAED,MAAMa,aAAa,GAAGA,CAAA,KAAM;QAC1BxE,eAAe,CAACwD,OAAO,GAAG,IAAI;QAC9B9B,QAAQ,CAACe,mBAAmB,CAAC,WAAW,EAAEsB,eAAe,CAAC;QAC1DrC,QAAQ,CAACe,mBAAmB,CAAC,SAAS,EAAE+B,aAAa,CAAC;MACxD,CAAC;MAED9C,QAAQ,CAACc,gBAAgB,CAAC,WAAW,EAAEuB,eAAe,CAAC;MACvDrC,QAAQ,CAACc,gBAAgB,CAAC,SAAS,EAAEgC,aAAa,CAAC;IACrD,CAAC;IAEDf,YAAY,CAACjB,gBAAgB,CAAC,WAAW,EAAEkB,eAAe,CAAC;IAE3D,OAAO,MAAM;MACX,IAAID,YAAY,EAAE;QAChBA,YAAY,CAAChB,mBAAmB,CAAC,WAAW,EAAEiB,eAAe,CAAC;MAChE;IACF,CAAC;EACH,CAAC,EAAE,CAAC5G,OAAO,CAAC,CAAC;;EAEb;EACAtD,SAAS,CAAC,MAAM;IACd,IAAI,CAACuG,uBAAuB,CAACyD,OAAO,EAAE;IAEtC,MAAMC,YAAY,GAAG1D,uBAAuB,CAACyD,OAAO;IAEpD,MAAME,eAAe,GAAI1B,CAAC,IAAK;MAC7BA,CAAC,CAAC2B,cAAc,CAAC,CAAC;;MAElB;MACA,MAAMc,eAAe,GAAG/C,QAAQ,CAACiB,aAAa,CAAC,0BAA0B,CAAC;MAC1E,IAAI,CAAC8B,eAAe,EAAE;;MAEtB;MACA,MAAM3F,MAAM,GAAGkD,CAAC,CAAC0C,OAAO;MACxB,MAAMC,WAAW,GAAGF,eAAe,CAACG,YAAY;MAEhD5E,eAAe,CAACwD,OAAO,GAAG,UAAU;MAEpC,MAAMO,eAAe,GAAIC,SAAS,IAAK;QACrC,IAAIhE,eAAe,CAACwD,OAAO,KAAK,UAAU,EAAE;;QAE5C;QACA,MAAMqB,MAAM,GAAGF,WAAW,IAAIX,SAAS,CAACU,OAAO,GAAG5F,MAAM,CAAC;;QAEzD;QACA,IAAI+F,MAAM,GAAG,GAAG,EAAE;UAChBJ,eAAe,CAACjJ,KAAK,CAACqJ,MAAM,GAAG,GAAGA,MAAM,IAAI;UAC5CJ,eAAe,CAACjJ,KAAK,CAACsJ,SAAS,GAAG,GAAGD,MAAM,IAAI;QACjD;QAEAb,SAAS,CAACL,cAAc,CAAC,CAAC;MAC5B,CAAC;MAED,MAAMa,aAAa,GAAGA,CAAA,KAAM;QAC1BxE,eAAe,CAACwD,OAAO,GAAG,IAAI;QAC9B9B,QAAQ,CAACe,mBAAmB,CAAC,WAAW,EAAEsB,eAAe,CAAC;QAC1DrC,QAAQ,CAACe,mBAAmB,CAAC,SAAS,EAAE+B,aAAa,CAAC;MACxD,CAAC;MAED9C,QAAQ,CAACc,gBAAgB,CAAC,WAAW,EAAEuB,eAAe,CAAC;MACvDrC,QAAQ,CAACc,gBAAgB,CAAC,SAAS,EAAEgC,aAAa,CAAC;IACrD,CAAC;IAEDf,YAAY,CAACjB,gBAAgB,CAAC,WAAW,EAAEkB,eAAe,CAAC;IAE3D,OAAO,MAAM;MACXD,YAAY,CAAChB,mBAAmB,CAAC,WAAW,EAAEiB,eAAe,CAAC;IAChE,CAAC;EACH,CAAC,EAAE,CAACpG,kBAAkB,CAAC/B,MAAM,CAAC,CAAC;;EAE/B;EACA,MAAMwJ,gBAAgB,GAAI/C,CAAC,IAAK;IAC9BnF,cAAc,CAACmF,CAAC,CAACgD,MAAM,CAAC1E,KAAK,CAAC;EAChC,CAAC;;EAED;EACA,MAAM2E,YAAY,GAAIjD,CAAC,IAAK;IAC1BA,CAAC,CAAC2B,cAAc,CAAC,CAAC;IAClB,MAAMrC,EAAE,GAAGZ,cAAc,CAAC9D,WAAW,CAAC;IACtC,IAAI0E,EAAE,EAAE;MACNvE,UAAU,CAACuE,EAAE,CAAC;MACd3D,SAAS,CAAC,iCAAiC,CAAC;MAC5CE,YAAY,CAAC,IAAI,CAAC;MAClBqH,uBAAuB,CAAC5D,EAAE,CAAC;IAC7B,CAAC,MAAM;MACL3D,SAAS,CAAC,qBAAqB,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMuH,uBAAuB,GAAG,MAAOpI,OAAO,IAAK;IACjD,IAAI;MAAA,IAAAqI,qBAAA,EAAAC,kBAAA;MACFC,OAAO,CAACC,GAAG,CAAC,oCAAoCxI,OAAO,EAAE,CAAC;MAC1D,MAAMyI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGtJ,YAAY,iCAAiCY,OAAO,EAAE,CAAC;MAEvF,IAAI,CAACyI,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAAC1L,IAAI,CAAC,CAAC;QACvCwL,OAAO,CAACM,KAAK,CAAC,cAAcJ,QAAQ,CAAC7H,MAAM,IAAI,EAAEgI,SAAS,CAAC;QAC3D,MAAM,IAAIE,KAAK,CAAC,oCAAoCL,QAAQ,CAAC7H,MAAM,EAAE,CAAC;MACxE;MAEA,MAAMmI,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCT,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEO,IAAI,CAAC;MAEnC,IAAIA,IAAI,CAACF,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,qBAAqB,EAAEE,IAAI,CAACF,KAAK,CAAC;QAChD,MAAM,IAAIC,KAAK,CAACC,IAAI,CAACF,KAAK,CAAC;MAC7B;;MAEA;MACAlI,uBAAuB,CAACoI,IAAI,CAACE,WAAW,CAAC;;MAEzC;MACA,MAAMC,aAAa,GAAGH,IAAI,CAACE,WAAW,CAACrK,GAAG,CAACuK,CAAC,IAAIA,CAAC,CAACC,aAAa,CAAC;MAChE3I,qBAAqB,CAACyI,aAAa,CAAC;MACpCX,OAAO,CAACC,GAAG,CAAC,SAASU,aAAa,CAACzK,MAAM,aAAa,EAAEyK,aAAa,CAAC;;MAEtE;MACA,MAAMG,cAAc,GAAG,EAAAhB,qBAAA,GAAAU,IAAI,CAACE,WAAW,CAACK,IAAI,CAACH,CAAC,IAAIA,CAAC,CAACC,aAAa,KAAK,IAAI,CAAC,cAAAf,qBAAA,uBAApDA,qBAAA,CAAsDe,aAAa,KACpF,EAAAd,kBAAA,GAAAS,IAAI,CAACE,WAAW,CAAC,CAAC,CAAC,cAAAX,kBAAA,uBAAnBA,kBAAA,CAAqBc,aAAa,KAAI,EAAG;MAE/C/I,oBAAoB,CAAC;QACnBC,OAAO,EAAE+I,cAAc;QACvB9I,SAAS,EAAE;MACb,CAAC,CAAC;MAEFM,SAAS,CAAC,qBAAqBqI,aAAa,CAACzK,MAAM,qCAAqC,CAAC;;MAEzF;MACA,MAAM8K,aAAa,CAACvJ,OAAO,EAAEkJ,aAAa,CAAC;IAE7C,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5DhI,SAAS,CAAC,UAAUgI,KAAK,CAACW,OAAO,EAAE,CAAC;MACpCzI,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMwI,aAAa,GAAG,MAAAA,CAAOvJ,OAAO,EAAEyJ,SAAS,KAAK;IAClD,IAAI;MACF,MAAMC,YAAY,GAAG,CAAC,CAAC;;MAEvB;MACA,KAAK,MAAMpG,IAAI,IAAImG,SAAS,EAAE;QAC5B,IAAI;UACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGtJ,YAAY,+BAA+BY,OAAO,SAASsD,IAAI,EAAE,CAAC;UAElG,IAAI,CAACmF,QAAQ,CAACE,EAAE,EAAE;YAChBJ,OAAO,CAACoB,IAAI,CAAC,kCAAkCrG,IAAI,KAAKmF,QAAQ,CAAC7H,MAAM,EAAE,CAAC;YAC1E;UACF;UAEA,MAAMmI,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;UAElC,IAAID,IAAI,CAACF,KAAK,EAAE;YACdN,OAAO,CAACoB,IAAI,CAAC,iCAAiCrG,IAAI,KAAKyF,IAAI,CAACF,KAAK,EAAE,CAAC;YACpE;UACF;;UAEA;UACA,MAAMe,mBAAmB,GAAGb,IAAI,CAACc,UAAU,CAACjL,GAAG,CAACkL,OAAO,KAAK;YAC1D,GAAGA,OAAO;YACV/M,IAAI,EAAEgN,eAAe,CAACD,OAAO,CAAC/M,IAAI,CAAC;YACnCiN,GAAG,EAAEF,OAAO,CAACG,KAAK,GAAGH,OAAO,CAACI,QAAQ,CAAC;UACxC,CAAC,CAAC,CAAC;UAEHR,YAAY,CAACpG,IAAI,CAAC,GAAGsG,mBAAmB;QAC1C,CAAC,CAAC,OAAOf,KAAK,EAAE;UACdN,OAAO,CAACoB,IAAI,CAAC,mCAAmCrG,IAAI,GAAG,EAAEuF,KAAK,CAAC;QACjE;MACF;MAEA1I,WAAW,CAACuJ,YAAY,CAAC;MACzB7I,SAAS,CAAC,mCAAmCqD,MAAM,CAACoC,IAAI,CAACoD,YAAY,CAAC,CAACjL,MAAM,YAAY,CAAC;IAC5F,CAAC,CAAC,OAAOoK,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDhI,SAAS,CAAC,4BAA4BgI,KAAK,CAACW,OAAO,EAAE,CAAC;IACxD,CAAC,SAAS;MACRzI,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMgJ,eAAe,GAAIhN,IAAI,IAAK;IAChC;IACA;;IAEA;IACA,MAAMoN,WAAW,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC;IAC/O,MAAMC,WAAW,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC;IAChe,MAAMC,gBAAgB,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;;IAEzP;IACA,MAAMC,KAAK,GAAGvN,IAAI,CAACwN,KAAK,CAAC,KAAK,CAAC;IAC/B,IAAIC,UAAU,GAAG,EAAE;IAEnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAAC7L,MAAM,EAAEgM,CAAC,EAAE,EAAE;MACrC,MAAMC,YAAY,GAAGJ,KAAK,CAACG,CAAC,CAAC;MAC7B,MAAME,IAAI,GAAGD,YAAY,CAACE,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;MAE/D,IAAIV,WAAW,CAACW,QAAQ,CAACH,IAAI,CAAC,EAAE;QAC9BH,UAAU,IAAIE,YAAY,CAACG,OAAO,CAACF,IAAI,EAAE,SAASA,IAAI,SAAS,CAAC;MAClE,CAAC,MAAM,IAAIP,WAAW,CAACU,QAAQ,CAACH,IAAI,CAAC,EAAE;QACrCH,UAAU,IAAIE,YAAY,CAACG,OAAO,CAACF,IAAI,EAAE,SAASA,IAAI,SAAS,CAAC;MAClE,CAAC,MAAM,IAAIN,gBAAgB,CAACS,QAAQ,CAACH,IAAI,CAAC,EAAE;QAC1CH,UAAU,IAAIE,YAAY,CAACG,OAAO,CAACF,IAAI,EAAE,cAAcA,IAAI,cAAc,CAAC;MAC5E,CAAC,MAAM;QACLH,UAAU,IAAIE,YAAY;MAC5B;MAEA,IAAID,CAAC,GAAGH,KAAK,CAAC7L,MAAM,GAAG,CAAC,EAAE;QACxB+L,UAAU,IAAI,GAAG;MACnB;IACF;IAEA,OAAOA,UAAU;EACnB,CAAC;;EAED;EACA,MAAMO,eAAe,GAAGA,CAACzH,IAAI,EAAE0H,IAAI,KAAK;IACtC;IACA,MAAMC,gBAAgB,GAAG;MAAE,GAAG7K;IAAkB,CAAC;;IAEjD;IACA8D,MAAM,CAACoC,IAAI,CAAC2E,gBAAgB,CAAC,CAAC3G,OAAO,CAAC4G,GAAG,IAAI;MAC3C,IAAID,gBAAgB,CAACC,GAAG,CAAC,KAAK5H,IAAI,IAAI4H,GAAG,KAAKF,IAAI,EAAE;QAClDC,gBAAgB,CAACC,GAAG,CAAC,GAAG,EAAE;MAC5B;IACF,CAAC,CAAC;;IAEF;IACAD,gBAAgB,CAACD,IAAI,CAAC,GAAG1H,IAAI;IAC7BjD,oBAAoB,CAAC4K,gBAAgB,CAAC;EACxC,CAAC;;EAED;EACA,MAAM/N,QAAQ,GAAIoB,IAAI,IAAK;IACzB,MAAM6M,QAAQ,GAAG;MACf,eAAe,EAAE,SAAS;MAC1B,YAAY,EAAE,SAAS;MACvB,cAAc,EAAE,SAAS;MACzB,cAAc,EAAE,SAAS;MACzB,cAAc,EAAE;IAClB,CAAC;IAED,QAAO7M,IAAI;MACT,KAAK,MAAM;QACT,OAAO6M,QAAQ,CAAClJ,SAAS,CAAC,IAAIkJ,QAAQ,CAAC,eAAe,CAAC;MACzD,KAAK,MAAM;QACT,OAAOA,QAAQ,CAAChJ,SAAS,CAAC,IAAIgJ,QAAQ,CAAC,YAAY,CAAC;MACtD,KAAK,WAAW;QACd,OAAOA,QAAQ,CAAC9I,cAAc,CAAC,IAAI8I,QAAQ,CAAC,cAAc,CAAC;MAC7D;QACE,OAAOlO,QAAQ,GAAG,SAAS,GAAG,SAAS;IAC3C;EACF,CAAC;;EAID;EACA,MAAMmO,iBAAiB,GAAGA,CAACrO,IAAI,EAAEuG,IAAI,KAAK;IACxC,IAAI,CAACvG,IAAI,EAAE,OAAO,EAAE;IAEpB,MAAMC,aAAa,GAAGuF,sBAAsB,CAACe,IAAI,CAAC,IAAI;MACpDlG,UAAU,EAAEC,aAAa,CAAC,mBAAmB,CAAC;MAC9CC,QAAQ,EAAEC,WAAW,CAAC,OAAO,CAAC;MAC9BC,UAAU,EAAEC,aAAa,CAAC,MAAM,CAAC;MACjCE,SAAS,EAAEV,QAAQ,GAAG,SAAS,GAAG,SAAS;MAC3CW,aAAa,EAAE;IACjB,CAAC;IAED,oBACEf,OAAA,CAACC,iBAAiB;MAChBC,IAAI,EAAEA,IAAK;MACXC,aAAa,EAAEA,aAAc;MAC7BC,QAAQ,EAAEA,QAAS;MACnBC,QAAQ,EAAEA;IAAS;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC;EAEN,CAAC;;EAED;EACA,MAAMoM,eAAe,GAAI/H,IAAI,IAAK;IAChC,MAAMtG,aAAa,GAAGuF,sBAAsB,CAACe,IAAI,CAAC,IAAI,CAAC,CAAC;IACxD,MAAMgI,KAAK,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAACR,QAAQ,CAACxH,IAAI,CAAC;IAErD,OAAO;MACLlG,UAAU,EAAEC,aAAa,CAACL,aAAa,CAACI,UAAU,CAAC;MACnDE,QAAQ,EAAE,OAAON,aAAa,CAACM,QAAQ,KAAK,QAAQ,GAAG,GAAGN,aAAa,CAACM,QAAQ,IAAI,GAAGC,WAAW,CAACP,aAAa,CAACM,QAAQ,CAAC;MAC1HE,UAAU,EAAEC,aAAa,CAACT,aAAa,CAACQ,UAAU,CAAC;MACnDE,KAAK,EAAEV,aAAa,CAACW,SAAS,KAAKV,QAAQ,GAAG,SAAS,GAAG,SAAS,CAAC;MACpEW,aAAa,EAAE,OAAOZ,aAAa,CAACY,aAAa,KAAK,QAAQ,GAAG,GAAGZ,aAAa,CAACY,aAAa,IAAI,GAAG4B,gBAAgB,CAACxC,aAAa,CAACY,aAAa,CAAC;MACnJ2N,eAAe,EAAE,aAAa;MAC9BC,SAAS,EAAEF,KAAK,GAAG,KAAK,GAAG;IAC7B,CAAC;EACH,CAAC;;EAED;EACA5O,SAAS,CAAC,MAAM;IACd,MAAM+O,iBAAiB,GAAG,CAAC,CAAC;IAE5BxH,yBAAyB,CAAC,CAAC,CAACK,OAAO,CAAChB,IAAI,IAAI;MAC1C,IAAIpD,QAAQ,CAACoD,IAAI,CAAC,EAAE;QAClB,MAAMoI,aAAa,GAAGxL,QAAQ,CAACoD,IAAI,CAAC,CAACgG,IAAI,CACvCQ,OAAO,IAAI9I,WAAW,IAAI8I,OAAO,CAACG,KAAK,IAAIjJ,WAAW,IAAI8I,OAAO,CAACE,GACpE,CAAC;QAED,IAAI0B,aAAa,EAAE;UACjBD,iBAAiB,CAACnI,IAAI,CAAC,GAAGoI,aAAa;QACzC;MACF;IACF,CAAC,CAAC;IAEFvK,iBAAiB,CAACsK,iBAAiB,CAAC;EACtC,CAAC,EAAE,CAACzK,WAAW,EAAEd,QAAQ,EAAEE,iBAAiB,CAAC,CAAC;;EAE9C;EACA1D,SAAS,CAAC,MAAM;IACd,IAAI,CAACsD,OAAO,EAAE;IAEd,MAAM2L,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjC;MACA,IAAInH,MAAM,CAACoH,EAAE,IAAIpH,MAAM,CAACoH,EAAE,CAACC,MAAM,IAAIrH,MAAM,CAACsH,MAAM,EAAE;QAClD,IAAI;UACF,MAAM/K,WAAW,GAAGyD,MAAM,CAACsH,MAAM,CAACC,cAAc,CAAC,CAAC;UAClD,IAAIhL,WAAW,EAAE;YACfC,cAAc,CAACD,WAAW,CAAC;UAC7B;QACF,CAAC,CAAC,OAAO6H,KAAK,EAAE;UACdN,OAAO,CAACM,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACnD;MACF;IACF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;IAET,OAAO,MAAMoD,aAAa,CAACN,QAAQ,CAAC;EACtC,CAAC,EAAE,CAAC3L,OAAO,CAAC,CAAC;;EAEb;EACAtD,SAAS,CAAC,MAAM;IACd,IAAI,CAACsD,OAAO,EAAE;;IAEd;IACA,IAAI,CAACyE,MAAM,CAACoH,EAAE,EAAE;MACd,MAAMK,GAAG,GAAGtH,QAAQ,CAACU,aAAa,CAAC,QAAQ,CAAC;MAC5C4G,GAAG,CAAC3G,GAAG,GAAG,oCAAoC;MAC9C,MAAM4G,cAAc,GAAGvH,QAAQ,CAACwH,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;MACjED,cAAc,CAACE,UAAU,CAACC,YAAY,CAACJ,GAAG,EAAEC,cAAc,CAAC;MAE3D1H,MAAM,CAAC8H,uBAAuB,GAAG,MAAM;QACrCC,mBAAmB,CAAC,CAAC;MACvB,CAAC;IACH,CAAC,MAAM;MACLA,mBAAmB,CAAC,CAAC;IACvB;IAEA,SAASA,mBAAmBA,CAAA,EAAG;MAC7B,IAAI/H,MAAM,CAACsH,MAAM,EAAE;QACjBtH,MAAM,CAACsH,MAAM,CAACU,OAAO,CAAC,CAAC;MACzB;MAEAhI,MAAM,CAACsH,MAAM,GAAG,IAAItH,MAAM,CAACoH,EAAE,CAACC,MAAM,CAAC,gBAAgB,EAAE;QACrD9L,OAAO,EAAEA,OAAO;QAChB0M,MAAM,EAAE;UACN,SAAS,EAAEC,aAAa;UACxB,eAAe,EAAEC;QACnB;MACF,CAAC,CAAC;IACJ;IAEA,SAASD,aAAaA,CAACE,KAAK,EAAE;MAC5BtE,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACrC;IAEA,SAASoE,mBAAmBA,CAACC,KAAK,EAAE;MAClC;MACA,IAAIA,KAAK,CAAC9D,IAAI,KAAKtE,MAAM,CAACoH,EAAE,CAACiB,WAAW,CAACC,OAAO,EAAE;QAChD,MAAMC,UAAU,GAAGA,CAAA,KAAM;UACvB,IAAIvI,MAAM,CAACsH,MAAM,IAAItH,MAAM,CAACsH,MAAM,CAACC,cAAc,EAAE;YACjD/K,cAAc,CAACwD,MAAM,CAACsH,MAAM,CAACC,cAAc,CAAC,CAAC,CAAC;UAChD;UACA,IAAIvH,MAAM,CAACsH,MAAM,IAAItH,MAAM,CAACsH,MAAM,CAACkB,cAAc,CAAC,CAAC,KAAKxI,MAAM,CAACoH,EAAE,CAACiB,WAAW,CAACC,OAAO,EAAE;YACrFG,qBAAqB,CAACF,UAAU,CAAC;UACnC;QACF,CAAC;QACDA,UAAU,CAAC,CAAC;MACd;IACF;IAEA,OAAO,MAAM;MACX,IAAIvI,MAAM,CAACsH,MAAM,EAAE;QACjBtH,MAAM,CAACsH,MAAM,CAACU,OAAO,CAAC,CAAC;QACvBhI,MAAM,CAACsH,MAAM,GAAG,IAAI;MACtB;IACF,CAAC;EACH,CAAC,EAAE,CAAC/L,OAAO,CAAC,CAAC;;EAEb;EACA,MAAMmN,4BAA4B,GAAIC,IAAI,IAAK;IAC7C,OAAO1M,oBAAoB,CAAC4I,IAAI,CAACH,CAAC,IAAIA,CAAC,CAACC,aAAa,KAAKgE,IAAI,CAAC;EACjE,CAAC;;EAED;EACA,MAAMC,eAAe,GAAIC,QAAQ,IAAK;IACpC,MAAMzD,UAAU,GAAGsD,4BAA4B,CAACG,QAAQ,CAAC;IACzD,OAAO,CAAAzD,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE0D,QAAQ,KAAID,QAAQ;EACzC,CAAC;;EAED;EACA,MAAM1G,eAAe,GAAI1B,CAAC,IAAK;IAC7B,IAAI1D,gBAAgB,KAAK,SAAS,EAAE;IAEpC,MAAMiF,cAAc,GAAG1D,iBAAiB,CAAC2D,OAAO;IAChD,IAAI,CAACD,cAAc,EAAE;;IAErB;IACA9E,kBAAkB,CAAC8B,IAAI,KAAK;MAC1B,GAAGA,IAAI;MACP3B,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAEmD,CAAC,CAAC4B,OAAO;MACjB9E,MAAM,EAAEkD,CAAC,CAAC0C;IACZ,CAAC,CAAC,CAAC;;IAEH;IACAhD,QAAQ,CAACc,gBAAgB,CAAC,WAAW,EAAEuB,eAAe,CAAC;IACvDrC,QAAQ,CAACc,gBAAgB,CAAC,SAAS,EAAEgC,aAAa,CAAC;;IAEnD;IACAxC,CAAC,CAAC2B,cAAc,CAAC,CAAC;EACpB,CAAC;;EAED;EACA,MAAMI,eAAe,GAAI/B,CAAC,IAAK;IAC7B,IAAI,CAACxD,eAAe,CAACI,UAAU,EAAE;;IAEjC;IACA,MAAM2E,cAAc,GAAG1D,iBAAiB,CAAC2D,OAAO;IAChD,IAAI,CAACD,cAAc,EAAE;IAErB,MAAM+G,IAAI,GAAG/G,cAAc,CAACgH,qBAAqB,CAAC,CAAC;;IAEnD;IACA;IACA,MAAMC,IAAI,GAAGrG,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACsG,GAAG,CAAC,GAAG,EAAG,CAACzI,CAAC,CAAC4B,OAAO,GAAG0G,IAAI,CAACI,IAAI,IAAIJ,IAAI,CAACjG,KAAK,GAAI,GAAG,CAAC,CAAC;IACrF,MAAMsG,IAAI,GAAGxG,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACsG,GAAG,CAAC,GAAG,EAAG,CAACzI,CAAC,CAAC0C,OAAO,GAAG4F,IAAI,CAACM,GAAG,IAAIN,IAAI,CAACzF,MAAM,GAAI,GAAG,CAAC,CAAC;;IAErF;IACApG,kBAAkB,CAAC8B,IAAI,KAAK;MAC1B,GAAGA,IAAI;MACP7B,CAAC,EAAE8L,IAAI;MACP7L,CAAC,EAAEgM,IAAI;MACP9L,MAAM,EAAEmD,CAAC,CAAC4B,OAAO;MACjB9E,MAAM,EAAEkD,CAAC,CAAC0C;IACZ,CAAC,CAAC,CAAC;;IAEH;IACAnD,MAAM,CAACsJ,YAAY,CAAC,CAAC,CAACC,eAAe,CAAC,CAAC;EACzC,CAAC;;EAED;EACA,MAAMtG,aAAa,GAAGA,CAAA,KAAM;IAC1B/F,kBAAkB,CAAC8B,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE3B,UAAU,EAAE;IAAM,CAAC,CAAC,CAAC;;IAE5D;IACA8C,QAAQ,CAACe,mBAAmB,CAAC,WAAW,EAAEsB,eAAe,CAAC;IAC1DrC,QAAQ,CAACe,mBAAmB,CAAC,SAAS,EAAE+B,aAAa,CAAC;EACxD,CAAC;;EAED;EACA,MAAMuG,gBAAgB,GAAI/I,CAAC,IAAK;IAC9B,IAAI1D,gBAAgB,KAAK,SAAS,EAAE;IAEpC,MAAM0M,KAAK,GAAGhJ,CAAC,CAACiJ,OAAO,CAAC,CAAC,CAAC;IAC1B,MAAM1H,cAAc,GAAG1D,iBAAiB,CAAC2D,OAAO;IAChD,IAAI,CAACD,cAAc,EAAE;;IAErB;IACA9E,kBAAkB,CAAC8B,IAAI,KAAK;MAC1B,GAAGA,IAAI;MACP3B,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAEmM,KAAK,CAACpH,OAAO;MACrB9E,MAAM,EAAEkM,KAAK,CAACtG;IAChB,CAAC,CAAC,CAAC;;IAEH;IACAhD,QAAQ,CAACc,gBAAgB,CAAC,WAAW,EAAE0I,eAAe,EAAE;MAAEC,OAAO,EAAE;IAAM,CAAC,CAAC;IAC3EzJ,QAAQ,CAACc,gBAAgB,CAAC,UAAU,EAAE4I,cAAc,CAAC;;IAErD;IACApJ,CAAC,CAAC2B,cAAc,CAAC,CAAC;EACpB,CAAC;;EAED;EACA,MAAMuH,eAAe,GAAIlJ,CAAC,IAAK;IAC7B,IAAI,CAACxD,eAAe,CAACI,UAAU,EAAE;IAEjC,MAAMoM,KAAK,GAAGhJ,CAAC,CAACiJ,OAAO,CAAC,CAAC,CAAC;IAC1B,MAAM1H,cAAc,GAAG1D,iBAAiB,CAAC2D,OAAO;IAChD,IAAI,CAACD,cAAc,EAAE;IAErB,MAAM+G,IAAI,GAAG/G,cAAc,CAACgH,qBAAqB,CAAC,CAAC;;IAEnD;IACA,MAAMtG,MAAM,GAAG+G,KAAK,CAACpH,OAAO,GAAGpF,eAAe,CAACK,MAAM;IACrD,MAAMwM,MAAM,GAAGL,KAAK,CAACtG,OAAO,GAAGlG,eAAe,CAACM,MAAM;;IAErD;IACA,MAAM0L,IAAI,GAAGrG,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACsG,GAAG,CAAC,GAAG,EAAEjM,eAAe,CAACE,CAAC,GAAIuF,MAAM,GAAGqG,IAAI,CAACjG,KAAK,GAAI,GAAG,CAAC,CAAC;IACxF,MAAMsG,IAAI,GAAGxG,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACsG,GAAG,CAAC,GAAG,EAAEjM,eAAe,CAACG,CAAC,GAAI0M,MAAM,GAAGf,IAAI,CAACzF,MAAM,GAAI,GAAG,CAAC,CAAC;;IAEzF;IACApG,kBAAkB,CAAC8B,IAAI,KAAK;MAC1B,GAAGA,IAAI;MACP7B,CAAC,EAAE8L,IAAI;MACP7L,CAAC,EAAEgM,IAAI;MACP9L,MAAM,EAAEmM,KAAK,CAACpH,OAAO;MACrB9E,MAAM,EAAEkM,KAAK,CAACtG;IAChB,CAAC,CAAC,CAAC;;IAEH;IACA1C,CAAC,CAAC2B,cAAc,CAAC,CAAC;EACpB,CAAC;;EAED;EACA,MAAMyH,cAAc,GAAGA,CAAA,KAAM;IAC3B3M,kBAAkB,CAAC8B,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE3B,UAAU,EAAE;IAAM,CAAC,CAAC,CAAC;;IAE5D;IACA8C,QAAQ,CAACe,mBAAmB,CAAC,WAAW,EAAEyI,eAAe,CAAC;IAC1DxJ,QAAQ,CAACe,mBAAmB,CAAC,UAAU,EAAE2I,cAAc,CAAC;EAC1D,CAAC;;EAED;EACA,MAAME,cAAc,GAAGA,CAAA,KAAM;IAC3B/L,WAAW,CAAC,CAACxF,QAAQ,CAAC;;IAEtB;IACA,IAAI,CAACA,QAAQ,EAAE;MACb2H,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;MACxCH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACK,MAAM,CAAC,YAAY,CAAC;IAC9C,CAAC,MAAM;MACLP,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACK,MAAM,CAAC,WAAW,CAAC;MAC3CP,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,YAAY,CAAC;IAC3C;EACF,CAAC;;EAED;EACA,MAAM0J,UAAU,GAAIC,IAAI,IAAK;IAC3B,IAAIjK,MAAM,CAACsH,MAAM,IAAItH,MAAM,CAACsH,MAAM,CAAC4C,MAAM,EAAE;MACzClK,MAAM,CAACsH,MAAM,CAAC4C,MAAM,CAACD,IAAI,CAAC;MAC1BjK,MAAM,CAACsH,MAAM,CAAC6C,SAAS,CAAC,CAAC;IAC3B;EACF,CAAC;EAED,oBACE/R,OAAA;IAAKgS,SAAS,EAAE,iBAAiB5R,QAAQ,GAAG,WAAW,GAAG,YAAY,EAAG;IAAA0B,QAAA,gBACvE9B,OAAA;MAAIgS,SAAS,EAAC,WAAW;MAAAlQ,QAAA,EAAC;IAAuC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGtEpC,OAAA;MAAKgS,SAAS,EAAC,kBAAkB;MAAAlQ,QAAA,eAC/B9B,OAAA;QAAA8B,QAAA,gBACE9B,OAAA;UACEgS,SAAS,EAAC,iBAAiB;UAC3BvQ,IAAI,EAAC,UAAU;UACfwQ,OAAO,EAAE7R,QAAS;UAClB8R,QAAQ,EAAEP;QAAe;UAAA1P,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC,eACFpC,OAAA;UAAKgS,SAAS,EAAC,aAAa;UAAAlQ,QAAA,gBAC1B9B,OAAA;YAAKgS,SAAS,EAAC,kBAAkB;YAAAlQ,QAAA,eAC/B9B,OAAA;cAAKgS,SAAS,EAAC,kBAAkB;cAAC,aAAU,aAAa;cAAC,eAAY;YAAO;cAAA/P,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjF,CAAC,eACNpC,OAAA;YAAKgS,SAAS,EAAC;UAAe;YAAA/P,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACrCpC,OAAA;YAAKgS,SAAS,EAAC,mBAAmB;YAAAlQ,QAAA,eAChC9B,OAAA;cAAKgS,SAAS,EAAC,mBAAmB;cAAC,aAAU,cAAc;cAAC,eAAY;YAAO;cAAA/P,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAGNpC,OAAA;MAAMmS,QAAQ,EAAE7G,YAAa;MAAC0G,SAAS,EAAC,gBAAgB;MAAAlQ,QAAA,eACtD9B,OAAA;QAAKgS,SAAS,EAAC,aAAa;QAAAlQ,QAAA,gBAC1B9B,OAAA;UACEyB,IAAI,EAAC,MAAM;UACXkF,KAAK,EAAE1D,WAAY;UACnBiP,QAAQ,EAAE9G,gBAAiB;UAC3BgH,WAAW,EAAC,4EAA4E;UACxFJ,SAAS,EAAC,aAAa;UACvB,cAAW;QAAmB;UAAA/P,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B,CAAC,eACFpC,OAAA;UACEyB,IAAI,EAAC,QAAQ;UACbuQ,SAAS,EAAC,eAAe;UACzBK,QAAQ,EAAEpO,SAAU;UAAAnC,QAAA,EAEnBmC,SAAS,GAAG,YAAY,GAAG;QAAY;UAAAhC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,EAGN2B,MAAM,iBACL/D,OAAA;MAAKgS,SAAS,EAAC,gBAAgB;MAACM,IAAI,EAAC,QAAQ;MAAC,aAAU,QAAQ;MAAAxQ,QAAA,EAC7DiC;IAAM;MAAA9B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CACN,EAEAe,OAAO,iBACNnD,OAAA;MAAKgS,SAAS,EAAC,cAAc;MAAAlQ,QAAA,gBAE3B9B,OAAA;QAAKgS,SAAS,EAAC,cAAc;QAAAlQ,QAAA,gBAE3B9B,OAAA;UAAKgS,SAAS,EAAC,iBAAiB;UAACO,GAAG,EAAErM,iBAAkB;UAAApE,QAAA,gBACtD9B,OAAA;YAAKgS,SAAS,EAAC,cAAc;YAAAlQ,QAAA,gBAC3B9B,OAAA;cAAIgS,SAAS,EAAC,eAAe;cAAAlQ,QAAA,EAAC;YAAK;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACxCpC,OAAA;cAAKgS,SAAS,EAAC,kBAAkB;cAAAlQ,QAAA,gBAC/B9B,OAAA;gBAAOgS,SAAS,EAAC,iBAAiB;gBAAAlQ,QAAA,EAAC;cAAS;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACpDpC,OAAA;gBACEgS,SAAS,EAAE,oBAAoBrN,gBAAgB,KAAK,aAAa,GAAG,QAAQ,GAAG,EAAE,EAAG;gBACpF6N,OAAO,EAAEA,CAAA,KAAM5N,mBAAmB,CAAC,aAAa,CAAE;gBAAA9C,QAAA,EACnD;cAED;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACTpC,OAAA;gBACEgS,SAAS,EAAE,oBAAoBrN,gBAAgB,KAAK,SAAS,GAAG,QAAQ,GAAG,EAAE,EAAG;gBAChF6N,OAAO,EAAEA,CAAA,KAAM5N,mBAAmB,CAAC,SAAS,CAAE;gBAAA9C,QAAA,EAC/C;cAED;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACNpC,OAAA;YAAKgS,SAAS,EAAC,eAAe;YAACnQ,KAAK,EAAE;cAAE+I,UAAU,EAAE;YAAS,CAAE;YAAA9I,QAAA,GAAC,GAAC,eAE/D9B,OAAA;cAAK2H,EAAE,EAAC,gBAAgB;cAACqK,SAAS,EAAC;YAAa;cAAA/P,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpD,CAAC,eAGNpC,OAAA;YACEuS,GAAG,EAAEpM,oBAAqB;YAC1B6L,SAAS,EAAC,qBAAqB;YAC/BS,KAAK,EAAC;UAAsB;YAAAxQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxB,CAAC,EAGNuC,gBAAgB,KAAK,SAAS,iBAC7B3E,OAAA;YACEuS,GAAG,EAAEtM,UAAW;YAChB+L,SAAS,EAAE,oBAAoBnN,eAAe,CAACI,UAAU,GAAG,UAAU,GAAG,EAAE,EAAG;YAC9EpD,KAAK,EAAE;cACL6Q,QAAQ,EAAE,UAAU;cACpB3B,IAAI,EAAE,GAAGlM,eAAe,CAACE,CAAC,GAAG;cAC7BkM,GAAG,EAAE,GAAGpM,eAAe,CAACG,CAAC,GAAG;cAC5B2N,SAAS,EAAE,uBAAuB;cAClCC,MAAM,EAAE/N,eAAe,CAACI,UAAU,GAAG,UAAU,GAAG;YACpD,CAAE;YACF4N,WAAW,EAAE9I,eAAgB;YAC7B+I,YAAY,EAAE1B,gBAAiB;YAC/B2B,QAAQ,EAAC,GAAG;YACZT,IAAI,EAAC,QAAQ;YACb,cAAW,0BAA0B;YACrCU,SAAS,EAAG3K,CAAC,IAAK;cAChB;cACA,MAAM4K,IAAI,GAAG,CAAC,CAAC,CAAC;cAChB,IAAI5K,CAAC,CAACgG,GAAG,KAAK,WAAW,EAAE;gBACzBvJ,kBAAkB,CAAC8B,IAAI,KAAK;kBAC1B,GAAGA,IAAI;kBACP7B,CAAC,EAAEyF,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE7D,IAAI,CAAC7B,CAAC,GAAGkO,IAAI;gBAC9B,CAAC,CAAC,CAAC;gBACH5K,CAAC,CAAC2B,cAAc,CAAC,CAAC;cACpB,CAAC,MAAM,IAAI3B,CAAC,CAACgG,GAAG,KAAK,YAAY,EAAE;gBACjCvJ,kBAAkB,CAAC8B,IAAI,KAAK;kBAC1B,GAAGA,IAAI;kBACP7B,CAAC,EAAEyF,IAAI,CAACsG,GAAG,CAAC,GAAG,EAAElK,IAAI,CAAC7B,CAAC,GAAGkO,IAAI;gBAChC,CAAC,CAAC,CAAC;gBACH5K,CAAC,CAAC2B,cAAc,CAAC,CAAC;cACpB,CAAC,MAAM,IAAI3B,CAAC,CAACgG,GAAG,KAAK,SAAS,EAAE;gBAC9BvJ,kBAAkB,CAAC8B,IAAI,KAAK;kBAC1B,GAAGA,IAAI;kBACP5B,CAAC,EAAEwF,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE7D,IAAI,CAAC5B,CAAC,GAAGiO,IAAI;gBAC9B,CAAC,CAAC,CAAC;gBACH5K,CAAC,CAAC2B,cAAc,CAAC,CAAC;cACpB,CAAC,MAAM,IAAI3B,CAAC,CAACgG,GAAG,KAAK,WAAW,EAAE;gBAChCvJ,kBAAkB,CAAC8B,IAAI,KAAK;kBAC1B,GAAGA,IAAI;kBACP5B,CAAC,EAAEwF,IAAI,CAACsG,GAAG,CAAC,GAAG,EAAElK,IAAI,CAAC5B,CAAC,GAAGiO,IAAI;gBAChC,CAAC,CAAC,CAAC;gBACH5K,CAAC,CAAC2B,cAAc,CAAC,CAAC;cACpB;YACF,CAAE;YAAAlI,QAAA,gBAEF9B,OAAA;cAAKgS,SAAS,EAAC,2BAA2B;cAAAlQ,QAAA,EAAC;YAE3C;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,EAELgF,yBAAyB,CAAC,CAAC,CAACrF,GAAG,CAAC0E,IAAI,IACnCpC,cAAc,CAACoC,IAAI,CAAC,iBAClBzG,OAAA;cAAgBgS,SAAS,EAAC,iBAAiB;cAACnQ,KAAK,EAAE2M,eAAe,CAAC/H,IAAI,CAAE;cAAA3E,QAAA,gBACvE9B,OAAA;gBAAMgS,SAAS,EAAC,kBAAkB;gBAAAlQ,QAAA,GAC/B0O,eAAe,CAAC/J,IAAI,CAAC,EAAC,GACzB;cAAA;gBAAAxE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACPpC,OAAA;gBAAMgS,SAAS,EAAC,cAAc;gBAAAlQ,QAAA,EAC3ByM,iBAAiB,CAAClK,cAAc,CAACoC,IAAI,CAAC,CAACvG,IAAI,EAAEuG,IAAI;cAAC;gBAAAxE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC/C,CAAC;YAAA,GANCqE,IAAI;cAAAxE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAOT,CAER,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CACN;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,EAGLuC,gBAAgB,KAAK,aAAa,IAClChB,kBAAkB,CAAC/B,MAAM,GAAG,CAAC,iBAC5B5B,OAAA;UAAKgS,SAAS,EAAC,oCAAoC;UAAAlQ,QAAA,gBAGjD9B,OAAA;YAAKgS,SAAS,EAAE,2BAA2BjM,cAAc,KAAK,UAAU,GAAG,UAAU,GAAG,EAAE,EAAG;YAAAjE,QAAA,gBAC3F9B,OAAA;cACEgS,SAAS,EAAC,uBAAuB;cACjCQ,OAAO,EAAErL,oBAAqB;cAC9BsL,KAAK,EAAE1M,cAAc,KAAK,QAAQ,GAAG,iBAAiB,GAAG,mBAAoB;cAAAjE,QAAA,EAE5EiE,cAAc,KAAK,QAAQ,GAAG,GAAG,GAAG;YAAG;cAAA9D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClC,CAAC,EAERgF,yBAAyB,CAAC,CAAC,CAACrF,GAAG,CAAC0E,IAAI,IAAI;cACzC;cACA,IAAIhC,eAAe,CAACgC,IAAI,CAAC,EAAE,OAAO,IAAI;cAEtC,oBACEzG,OAAA;gBAEEgS,SAAS,EAAC,wBAAwB;gBAAAlQ,QAAA,gBAElC9B,OAAA;kBAAMgS,SAAS,EAAE,gBAAgBvL,IAAI,KAAKlD,iBAAiB,CAACE,OAAO,GAAG,SAAS,GAAG,WAAW,EAAG;kBAAA3B,QAAA,EAC7F0O,eAAe,CAAC/J,IAAI;gBAAC;kBAAAxE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAClB,CAAC,EAENiC,cAAc,CAACoC,IAAI,CAAC,gBACnBzG,OAAA;kBAAKgS,SAAS,EAAC,cAAc;kBAAAlQ,QAAA,EAC1ByM,iBAAiB,CAAClK,cAAc,CAACoC,IAAI,CAAC,CAACvG,IAAI,EAAEuG,IAAI;gBAAC;kBAAAxE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAChD,CAAC,gBAENpC,OAAA;kBAAMgS,SAAS,EAAC,YAAY;kBAAAlQ,QAAA,EAAC;gBAAM;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAC1C;cAAA,GAbI,UAAUqE,IAAI,EAAE;gBAAAxE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAclB,CAAC;YAEV,CAAC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG,CAAC,eAGNpC,OAAA;YACEuS,GAAG,EAAEnM,uBAAwB;YAC7B4L,SAAS,EAAC,sCAAsC;YAChDS,KAAK,EAAC;UAAgC;YAAAxQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClC,CAAC,eAGPpC,OAAA;YAAKgS,SAAS,EAAC,qBAAqB;YAAAlQ,QAAA,gBAClC9B,OAAA;cAAIgS,SAAS,EAAC,kBAAkB;cAAAlQ,QAAA,EAAC;YAAgB;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EAErDgF,yBAAyB,CAAC,CAAC,CAACrF,GAAG,CAAC0E,IAAI;cAAA,IAAAyM,cAAA;cAAA,oBACnClT,OAAA;gBAAgCgS,SAAS,EAAC,kBAAkB;gBAAAlQ,QAAA,gBAC1D9B,OAAA;kBAAIgS,SAAS,EAAC,gBAAgB;kBAAAlQ,QAAA,GAC3B0O,eAAe,CAAC/J,IAAI,CAAC,EACrBA,IAAI,KAAKlD,iBAAiB,CAACE,OAAO,GAAG,YAAY,GACjDgD,IAAI,KAAKlD,iBAAiB,CAACG,SAAS,GAAG,cAAc,GAAG,EAAE;gBAAA;kBAAAzB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACzD,CAAC,eAGLpC,OAAA;kBAAKgS,SAAS,EAAC,kBAAkB;kBAAAlQ,QAAA,GAAAoR,cAAA,GAC9B7P,QAAQ,CAACoD,IAAI,CAAC,cAAAyM,cAAA,uBAAdA,cAAA,CAAgBnR,GAAG,CAAC,CAACkL,OAAO,EAAE1L,KAAK,kBAClCvB,OAAA;oBACEgS,SAAS,EAAE,gBAAgB7N,WAAW,IAAI8I,OAAO,CAACG,KAAK,IAAIjJ,WAAW,IAAI8I,OAAO,CAACE,GAAG,GAAG,gBAAgB,GAAG,EAAE,EAAG;oBAChHqF,OAAO,EAAEA,CAAA,KAAMZ,UAAU,CAAC3E,OAAO,CAACG,KAAK,CAAE;oBACzC2F,QAAQ,EAAC,GAAG;oBACZT,IAAI,EAAC,QAAQ;oBACb,cAAY,WAAW9H,IAAI,CAAC2I,KAAK,CAAClG,OAAO,CAACG,KAAK,GAAG,EAAE,CAAC,IAAI,CAACH,OAAO,CAACG,KAAK,GAAG,EAAE,EAAEgG,OAAO,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAG;oBAC5GL,SAAS,EAAG3K,CAAC,IAAK;sBAChB,IAAIA,CAAC,CAACgG,GAAG,KAAK,OAAO,IAAIhG,CAAC,CAACgG,GAAG,KAAK,GAAG,EAAE;wBACtCuD,UAAU,CAAC3E,OAAO,CAACG,KAAK,CAAC;sBAC3B;oBACF,CAAE;oBAAAtL,QAAA,gBAEF9B,OAAA;sBAAKgS,SAAS,EAAC,WAAW;sBAAAlQ,QAAA,GACvB0I,IAAI,CAAC2I,KAAK,CAAClG,OAAO,CAACG,KAAK,GAAG,EAAE,CAAC,EAAC,GAAC,EAAC,CAACH,OAAO,CAACG,KAAK,GAAG,EAAE,EAAEgG,OAAO,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAC,IACnF,EAAC7I,IAAI,CAAC2I,KAAK,CAAClG,OAAO,CAACE,GAAG,GAAG,EAAE,CAAC,EAAC,GAAC,EAAC,CAACF,OAAO,CAACE,GAAG,GAAG,EAAE,EAAEiG,OAAO,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;oBAAA;sBAAApR,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAC3E,CAAC,eACNpC,OAAA;sBAAKgS,SAAS,EAAC,cAAc;sBAAAlQ,QAAA,EAC1ByM,iBAAiB,CAACtB,OAAO,CAAC/M,IAAI,EAAEuG,IAAI;oBAAC;sBAAAxE,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACnC,CAAC;kBAAA,GAlBEb,KAAK;oBAAAU,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAmBV,CACN;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACC,CAAC;cAAA,GA/BE,cAAcqE,IAAI,EAAE;gBAAAxE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAgCzB,CAAC;YAAA,CACP,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAGNpC,OAAA;QAAKgS,SAAS,EAAE,kBAAkBnM,sBAAsB,GAAG,WAAW,GAAG,EAAE,EAAG;QAAA/D,QAAA,gBAC5E9B,OAAA;UACEgS,SAAS,EAAC,iBAAiB;UAC3BQ,OAAO,EAAEtL,mBAAoB;UAC7BuL,KAAK,EAAE5M,sBAAsB,GAAG,uBAAuB,GAAG,yBAA0B;UACpF,iBAAe,CAACA,sBAAuB;UACvC,iBAAc,kBAAkB;UAAA/D,QAAA,eAEhC9B,OAAA;YAAMgS,SAAS,EAAC,sBAAsB;YAAAlQ,QAAA,EACnC+D,sBAAsB,GAAG,GAAG,GAAG;UAAG;YAAA5D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eAETpC,OAAA;UAAK2H,EAAE,EAAC,kBAAkB;UAAC9F,KAAK,EAAE;YAAEyR,OAAO,EAAEzN,sBAAsB,GAAG,MAAM,GAAG,OAAO;YAAE6E,KAAK,EAAE;UAAO,CAAE;UAAA5I,QAAA,gBACtG9B,OAAA;YAAIgS,SAAS,EAAC,eAAe;YAAAlQ,QAAA,EAAC;UAAiB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAGpDpC,OAAA;YAAKgS,SAAS,EAAC,kBAAkB;YAAAlQ,QAAA,gBAC/B9B,OAAA;cAAIgS,SAAS,EAAC,gBAAgB;cAAAlQ,QAAA,EAAC;YAAgB;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAGpDpC,OAAA;cAAKgS,SAAS,EAAC,yBAAyB;cAAAlQ,QAAA,gBACtC9B,OAAA;gBAAOgS,SAAS,EAAC,gBAAgB;gBAACuB,OAAO,EAAC,kBAAkB;gBAAAzR,QAAA,EAAC;cAAgB;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACrFpC,OAAA;gBAAKgS,SAAS,EAAC,6BAA6B;gBAAAlQ,QAAA,eAC1C9B,OAAA;kBACE2H,EAAE,EAAC,kBAAkB;kBACrBhB,KAAK,EAAEpD,iBAAiB,CAACE,OAAQ;kBACjCyO,QAAQ,EAAG7J,CAAC,IAAK6F,eAAe,CAAC7F,CAAC,CAACgD,MAAM,CAAC1E,KAAK,EAAE,SAAS,CAAE;kBAC5DqL,SAAS,EAAC,mCAAmC;kBAAAlQ,QAAA,EAE5C+B,oBAAoB,CAAC9B,GAAG,CAACiL,UAAU,iBAClChN,OAAA;oBAAuC2G,KAAK,EAAEqG,UAAU,CAACT,aAAc;oBAAAzK,QAAA,EACpEkL,UAAU,CAAC0D;kBAAQ,GADT1D,UAAU,CAACT,aAAa;oBAAAtK,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAE7B,CACT;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eAGNpC,OAAA;cAAKgS,SAAS,EAAC,yBAAyB;cAAAlQ,QAAA,gBACtC9B,OAAA;gBAAOgS,SAAS,EAAC,gBAAgB;gBAACuB,OAAO,EAAC,oBAAoB;gBAAAzR,QAAA,EAAC;cAAkB;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACzFpC,OAAA;gBAAKgS,SAAS,EAAC,6BAA6B;gBAAAlQ,QAAA,eAC1C9B,OAAA;kBACE2H,EAAE,EAAC,oBAAoB;kBACvBhB,KAAK,EAAEpD,iBAAiB,CAACG,SAAU;kBACnCwO,QAAQ,EAAG7J,CAAC,IAAK6F,eAAe,CAAC7F,CAAC,CAACgD,MAAM,CAAC1E,KAAK,EAAE,WAAW,CAAE;kBAC9DqL,SAAS,EAAC,mCAAmC;kBAAAlQ,QAAA,gBAE7C9B,OAAA;oBAAQ2G,KAAK,EAAC,EAAE;oBAAA7E,QAAA,EAAC;kBAAI;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,EAC7ByB,oBAAoB,CAAC9B,GAAG,CAACiL,UAAU,iBAClChN,OAAA;oBAAuC2G,KAAK,EAAEqG,UAAU,CAACT,aAAc;oBAAAzK,QAAA,EACpEkL,UAAU,CAAC0D;kBAAQ,GADT1D,UAAU,CAACT,aAAa;oBAAAtK,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAE7B,CACT,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAGNpC,OAAA;YAAKgS,SAAS,EAAC,kBAAkB;YAAAlQ,QAAA,gBAC/B9B,OAAA;cAAIgS,SAAS,EAAC,gBAAgB;cAAAlQ,QAAA,EAAC;YAAuB;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EAE1DgF,yBAAyB,CAAC,CAAC,CAACrF,GAAG,CAAC0E,IAAI;cAAA,IAAA+M,qBAAA,EAAAC,sBAAA;cAAA,oBACnCzT,OAAA;gBAA+BgS,SAAS,EAAE,+BAA+BzN,kBAAkB,CAACkC,IAAI,CAAC,GAAG,WAAW,GAAG,EAAE,EAAG;gBAAA3E,QAAA,gBACrH9B,OAAA;kBACEgS,SAAS,EAAC,sBAAsB;kBAChCQ,OAAO,EAAEA,CAAA,KAAM9K,sBAAsB,CAACjB,IAAI,CAAE;kBAAA3E,QAAA,gBAE5C9B,OAAA;oBAAKgS,SAAS,EAAC,yBAAyB;oBAAAlQ,QAAA,gBACtC9B,OAAA;sBAAMgS,SAAS,EAAC,eAAe;sBAAAlQ,QAAA,EAAE0O,eAAe,CAAC/J,IAAI;oBAAC;sBAAAxE,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAO,CAAC,EAC7DqE,IAAI,KAAKlD,iBAAiB,CAACE,OAAO,iBAAIzD,OAAA;sBAAMgS,SAAS,EAAC,sBAAsB;sBAAAlQ,QAAA,EAAC;oBAAO;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM,CAAC,EAC3FqE,IAAI,KAAKlD,iBAAiB,CAACG,SAAS,iBAAI1D,OAAA;sBAAMgS,SAAS,EAAC,wBAAwB;sBAAAlQ,QAAA,EAAC;oBAAS;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC/F,CAAC,eACNpC,OAAA;oBACEgS,SAAS,EAAC,iBAAiB;oBAC3BQ,OAAO,EAAGnK,CAAC,IAAK;sBACdA,CAAC,CAACqL,eAAe,CAAC,CAAC;sBACnBhM,sBAAsB,CAACjB,IAAI,CAAC;oBAC9B,CAAE;oBACF,cAAYlC,kBAAkB,CAACkC,IAAI,CAAC,GAAG,0BAA0B,GAAG;kBAA6B;oBAAAxE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAClG,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACC,CAAC,eAENpC,OAAA;kBAAKgS,SAAS,EAAC,uBAAuB;kBAAAlQ,QAAA,gBAEpC9B,OAAA;oBACEgS,SAAS,EAAE,0BAA0BvN,eAAe,CAACgC,IAAI,CAAC,GAAG,QAAQ,GAAG,EAAE,EAAG;oBAC7E+L,OAAO,EAAEA,CAAA,KAAMjJ,wBAAwB,CAAC9C,IAAI,CAAE;oBAC9CgM,KAAK,EAAEhO,eAAe,CAACgC,IAAI,CAAC,GAAG,eAAe,GAAG,eAAgB;oBACjE,cAAYhC,eAAe,CAACgC,IAAI,CAAC,GAAG,eAAe,GAAG;kBAAgB;oBAAAxE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACvE,CAAC,eAGFpC,OAAA;oBAAKgS,SAAS,EAAC,cAAc;oBAAAlQ,QAAA,gBAC3B9B,OAAA;sBAAKgS,SAAS,EAAC,cAAc;sBAAAlQ,QAAA,EAAC;oBAAI;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAK,CAAC,eACxCpC,OAAA;sBACEgS,SAAS,EAAC,aAAa;sBACvBrL,KAAK,EAAE,EAAA6M,qBAAA,GAAA9N,sBAAsB,CAACe,IAAI,CAAC,cAAA+M,qBAAA,uBAA5BA,qBAAA,CAA8BjT,UAAU,KAAI,mBAAoB;sBACvE2R,QAAQ,EAAG7J,CAAC,IAAK7B,2BAA2B,CAACC,IAAI,EAAE,YAAY,EAAE4B,CAAC,CAACgD,MAAM,CAAC1E,KAAK,CAAE;sBACjF9E,KAAK,EAAE;wBAAEtB,UAAU,EAAEC,aAAa,CAAC,EAAAiT,sBAAA,GAAA/N,sBAAsB,CAACe,IAAI,CAAC,cAAAgN,sBAAA,uBAA5BA,sBAAA,CAA8BlT,UAAU,KAAI,mBAAmB;sBAAE,CAAE;sBAAAuB,QAAA,EAErG,CAAC,mBAAmB,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,CAAC,CAACC,GAAG,CAAC4R,IAAI,iBAC/D3T,OAAA;wBAEE2G,KAAK,EAAEgN,IAAK;wBACZ9R,KAAK,EAAE;0BAAEtB,UAAU,EAAEC,aAAa,CAACmT,IAAI;wBAAE,CAAE;wBAAA7R,QAAA,EAE1C6R;sBAAI,GAJAA,IAAI;wBAAA1R,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAKH,CACT;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACI,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACN,CAAC,eAGNpC,OAAA;oBAAKgS,SAAS,EAAC,cAAc;oBAAAlQ,QAAA,gBAC3B9B,OAAA;sBAAKgS,SAAS,EAAC,cAAc;sBAAAlQ,QAAA,EAAC;oBAAI;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAK,CAAC,eACxCpC,OAAA;sBAAKgS,SAAS,EAAC,cAAc;sBAAAlQ,QAAA,EAC1B,CACC;wBAAE6E,KAAK,EAAE,EAAE;wBAAEiN,KAAK,EAAE;sBAAQ,CAAC,EAC7B;wBAAEjN,KAAK,EAAE,EAAE;wBAAEiN,KAAK,EAAE;sBAAS,CAAC,EAC9B;wBAAEjN,KAAK,EAAE,EAAE;wBAAEiN,KAAK,EAAE;sBAAQ,CAAC,CAC9B,CAAC7R,GAAG,CAAC8R,IAAI;wBAAA,IAAAC,sBAAA;wBAAA,oBACR9T,OAAA;0BAEEgS,SAAS,EAAE,iBAAiB,EAAA8B,sBAAA,GAAApO,sBAAsB,CAACe,IAAI,CAAC,cAAAqN,sBAAA,uBAA5BA,sBAAA,CAA8BrT,QAAQ,MAAKoT,IAAI,CAAClN,KAAK,GAAG,QAAQ,GAAG,EAAE,EAAG;0BACpG6L,OAAO,EAAEA,CAAA,KAAMhM,2BAA2B,CAACC,IAAI,EAAE,UAAU,EAAEoN,IAAI,CAAClN,KAAK,CAAE;0BAAA7E,QAAA,EAExE+R,IAAI,CAACD;wBAAK,GAJNC,IAAI,CAAClN,KAAK;0BAAA1E,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAKT,CAAC;sBAAA,CACV;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACC,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACH,CAAC,eAGNpC,OAAA;oBAAKgS,SAAS,EAAC,cAAc;oBAAAlQ,QAAA,gBAC3B9B,OAAA;sBAAKgS,SAAS,EAAC,cAAc;sBAAAlQ,QAAA,EAAC;oBAAW;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAK,CAAC,eAC/CpC,OAAA;sBAAKgS,SAAS,EAAC,cAAc;sBAAAlQ,QAAA,EAC1B,CACC;wBAAE6E,KAAK,EAAE,GAAG;wBAAEiN,KAAK,EAAE;sBAAQ,CAAC,EAC9B;wBAAEjN,KAAK,EAAE,GAAG;wBAAEiN,KAAK,EAAE;sBAAU,CAAC,EAChC;wBAAEjN,KAAK,EAAE,GAAG;wBAAEiN,KAAK,EAAE;sBAAO,CAAC,CAC9B,CAAC7R,GAAG,CAACgS,MAAM;wBAAA,IAAAC,sBAAA;wBAAA,oBACVhU,OAAA;0BAEEgS,SAAS,EAAE,iBAAiB,EAAAgC,sBAAA,GAAAtO,sBAAsB,CAACe,IAAI,CAAC,cAAAuN,sBAAA,uBAA5BA,sBAAA,CAA8BrT,UAAU,MAAKoT,MAAM,CAACpN,KAAK,GAAG,QAAQ,GAAG,EAAE,EAAG;0BACxG6L,OAAO,EAAEA,CAAA,KAAMhM,2BAA2B,CAACC,IAAI,EAAE,YAAY,EAAEsN,MAAM,CAACpN,KAAK,CAAE;0BAAA7E,QAAA,EAE5EiS,MAAM,CAACH;wBAAK,GAJRG,MAAM,CAACpN,KAAK;0BAAA1E,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAKX,CAAC;sBAAA,CACV;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACC,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACH,CAAC,eAGNpC,OAAA;oBAAKgS,SAAS,EAAC,cAAc;oBAAAlQ,QAAA,gBAC3B9B,OAAA;sBAAKgS,SAAS,EAAC,cAAc;sBAAAlQ,QAAA,EAAC;oBAAK;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAK,CAAC,eACzCpC,OAAA;sBAAKgS,SAAS,EAAC,eAAe;sBAAAlQ,QAAA,EAC3B,CACC,SAAS;sBAAE;sBACX,SAAS;sBAAE;sBACX,SAAS;sBAAE;sBACX,SAAS,CAAE;sBAAA,CACZ,CAACC,GAAG,CAAClB,KAAK;wBAAA,IAAAoT,sBAAA;wBAAA,oBACTjU,OAAA;0BAEEgS,SAAS,EAAE,gBAAgB,EAAAiC,sBAAA,GAAAvO,sBAAsB,CAACe,IAAI,CAAC,cAAAwN,sBAAA,uBAA5BA,sBAAA,CAA8BnT,SAAS,MAAKD,KAAK,GAAG,QAAQ,GAAG,EAAE,EAAG;0BAC/FgB,KAAK,EAAE;4BAAE6M,eAAe,EAAE7N;0BAAM,CAAE;0BAClC2R,OAAO,EAAEA,CAAA,KAAMhM,2BAA2B,CAACC,IAAI,EAAE,WAAW,EAAE5F,KAAK;wBAAE,GAHhEA,KAAK;0BAAAoB,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAIX,CAAC;sBAAA,CACH;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACC,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACH,CAAC,eAGNpC,OAAA;oBAAKgS,SAAS,EAAC,cAAc;oBAAAlQ,QAAA,gBAC3B9B,OAAA;sBAAKgS,SAAS,EAAC,cAAc;sBAAAlQ,QAAA,EAAC;oBAAiB;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAK,CAAC,eACrDpC,OAAA;sBAAKgS,SAAS,EAAC,cAAc;sBAAAlQ,QAAA,EAC1B,CACC;wBAAE6E,KAAK,EAAE,CAAC,CAAC;wBAAEiN,KAAK,EAAE;sBAAQ,CAAC,EAC7B;wBAAEjN,KAAK,EAAE,CAAC;wBAAEiN,KAAK,EAAE;sBAAS,CAAC,EAC7B;wBAAEjN,KAAK,EAAE,CAAC;wBAAEiN,KAAK,EAAE;sBAAO,CAAC,CAC5B,CAAC7R,GAAG,CAACmS,OAAO;wBAAA,IAAAC,sBAAA;wBAAA,oBACXnU,OAAA;0BAEEgS,SAAS,EAAE,iBAAiB,EAAAmC,sBAAA,GAAAzO,sBAAsB,CAACe,IAAI,CAAC,cAAA0N,sBAAA,uBAA5BA,sBAAA,CAA8BpT,aAAa,MAAKmT,OAAO,CAACvN,KAAK,GAAG,QAAQ,GAAG,EAAE,EAAG;0BAC5G6L,OAAO,EAAEA,CAAA,KAAMhM,2BAA2B,CAACC,IAAI,EAAE,eAAe,EAAEyN,OAAO,CAACvN,KAAK,CAAE;0BAAA7E,QAAA,EAEhFoS,OAAO,CAACN;wBAAK,GAJTM,OAAO,CAACvN,KAAK;0BAAA1E,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAKZ,CAAC;sBAAA,CACV;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACC,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACH,CAAC,eAGNpC,OAAA;oBACEgS,SAAS,EAAC,cAAc;oBACxBnQ,KAAK,EAAE2M,eAAe,CAAC/H,IAAI,CAAE;oBAAA3E,QAAA,EAC9B;kBAED;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,eAGNpC,OAAA;oBAAKgS,SAAS,EAAC,YAAY;oBAAAlQ,QAAA,gBACzB9B,OAAA;sBACEgS,SAAS,EAAC,uBAAuB;sBACjCK,QAAQ,EAAE,CAAC/L,kBAAkB,CAACG,IAAI,CAAE;sBACpC+L,OAAO,EAAEA,CAAA,KAAM3L,mBAAmB,CAACJ,IAAI,CAAE;sBAAA3E,QAAA,EAC1C;oBAED;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC,eACTpC,OAAA;sBACEgS,SAAS,EAAC,yBAAyB;sBACnCQ,OAAO,EAAEA,CAAA,KAAM;wBACb7M,yBAAyB,CAACiB,IAAI,KAAK;0BACjC,GAAGA,IAAI;0BACP,CAACH,IAAI,GAAG;4BACNlG,UAAU,EAAE,mBAAmB;4BAC/BE,QAAQ,EAAE,EAAE;4BACZE,UAAU,EAAE,GAAG;4BACfG,SAAS,EAAEV,QAAQ,GAAG,SAAS,GAAG,SAAS;4BAC3CW,aAAa,EAAE;0BACjB;wBACF,CAAC,CAAC,CAAC;wBACH;wBACAwF,qBAAqB,CAACK,IAAI,IAAI;0BAC5B,MAAME,OAAO,GAAG;4BAAE,GAAGF;0BAAK,CAAC;0BAC3B,OAAOE,OAAO,CAACL,IAAI,CAAC;0BACpB,OAAOK,OAAO;wBAChB,CAAC,CAAC;sBACJ,CAAE;sBAAAhF,QAAA,EACH;oBAED;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACN,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACH,CAAC;cAAA,GA3KE,aAAaqE,IAAI,EAAE;gBAAAxE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OA4KxB,CAAC;YAAA,CACP,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eAGNpC,OAAA;YAAKgS,SAAS,EAAC,kBAAkB;YAAAlQ,QAAA,gBAC/B9B,OAAA;cAAIgS,SAAS,EAAC,gBAAgB;cAAAlQ,QAAA,EAAC;YAA2B;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC/DpC,OAAA;cAAKgS,SAAS,EAAC,oBAAoB;cAAAlQ,QAAA,gBACjC9B,OAAA;gBAAKgS,SAAS,EAAC,gBAAgB;gBAAAlQ,QAAA,gBAC7B9B,OAAA;kBAAOgS,SAAS,EAAC,WAAW;kBAACuB,OAAO,EAAC,YAAY;kBAAAzR,QAAA,EAAC;gBAAK;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC,eAC/DpC,OAAA;kBACE2H,EAAE,EAAC,YAAY;kBACfhB,KAAK,EAAEvB,SAAU;kBACjB8M,QAAQ,EAAG7J,CAAC,IAAKhD,YAAY,CAACgD,CAAC,CAACgD,MAAM,CAAC1E,KAAK,CAAE;kBAC9CqL,SAAS,EAAC,4BAA4B;kBAAAlQ,QAAA,gBAEtC9B,OAAA;oBAAA8B,QAAA,EAAQ;kBAAa;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eAC9BpC,OAAA;oBAAA8B,QAAA,EAAQ;kBAAU;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eAC3BpC,OAAA;oBAAA8B,QAAA,EAAQ;kBAAY;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eAC7BpC,OAAA;oBAAA8B,QAAA,EAAQ;kBAAY;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eAC7BpC,OAAA;oBAAA8B,QAAA,EAAQ;kBAAY;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACvB,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC,eAENpC,OAAA;gBAAKgS,SAAS,EAAC,gBAAgB;gBAAAlQ,QAAA,gBAC7B9B,OAAA;kBAAOgS,SAAS,EAAC,WAAW;kBAACuB,OAAO,EAAC,YAAY;kBAAAzR,QAAA,EAAC;gBAAK;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC,eAC/DpC,OAAA;kBACE2H,EAAE,EAAC,YAAY;kBACfhB,KAAK,EAAErB,SAAU;kBACjB4M,QAAQ,EAAG7J,CAAC,IAAK9C,YAAY,CAAC8C,CAAC,CAACgD,MAAM,CAAC1E,KAAK,CAAE;kBAC9CqL,SAAS,EAAC,4BAA4B;kBAAAlQ,QAAA,gBAEtC9B,OAAA;oBAAA8B,QAAA,EAAQ;kBAAa;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eAC9BpC,OAAA;oBAAA8B,QAAA,EAAQ;kBAAU;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eAC3BpC,OAAA;oBAAA8B,QAAA,EAAQ;kBAAY;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eAC7BpC,OAAA;oBAAA8B,QAAA,EAAQ;kBAAY;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eAC7BpC,OAAA;oBAAA8B,QAAA,EAAQ;kBAAY;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACvB,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC,eAENpC,OAAA;gBAAKgS,SAAS,EAAC,gBAAgB;gBAAAlQ,QAAA,gBAC7B9B,OAAA;kBAAOgS,SAAS,EAAC,WAAW;kBAACuB,OAAO,EAAC,iBAAiB;kBAAAzR,QAAA,EAAC;gBAAU;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC,eACzEpC,OAAA;kBACE2H,EAAE,EAAC,iBAAiB;kBACpBhB,KAAK,EAAEnB,cAAe;kBACtB0M,QAAQ,EAAG7J,CAAC,IAAK5C,iBAAiB,CAAC4C,CAAC,CAACgD,MAAM,CAAC1E,KAAK,CAAE;kBACnDqL,SAAS,EAAC,4BAA4B;kBAAAlQ,QAAA,gBAEtC9B,OAAA;oBAAA8B,QAAA,EAAQ;kBAAa;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eAC9BpC,OAAA;oBAAA8B,QAAA,EAAQ;kBAAU;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eAC3BpC,OAAA;oBAAA8B,QAAA,EAAQ;kBAAY;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eAC7BpC,OAAA;oBAAA8B,QAAA,EAAQ;kBAAY;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eAC7BpC,OAAA;oBAAA8B,QAAA,EAAQ;kBAAY;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACvB,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACY,EAAA,CAv1CQD,GAAG;AAAAqR,GAAA,GAAHrR,GAAG;AAy1CZ,eAAeA,GAAG;AAAC,IAAAT,EAAA,EAAA8R,GAAA;AAAAC,YAAA,CAAA/R,EAAA;AAAA+R,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}