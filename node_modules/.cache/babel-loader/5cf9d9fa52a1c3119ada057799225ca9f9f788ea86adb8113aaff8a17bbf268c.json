{"ast":null,"code":"var _jsxFileName = \"/Users/arunasrivastava/random/cse482/Multilingual/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: '',\n    tertiary: ''\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Customization options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  const [fontSize, setFontSize] = useState('Medium');\n  const [fontFamily, setFontFamily] = useState('Sans Serif');\n\n  // API Key for YouTube Data API v3\n  // You should store this in an environment variable in a real application\n  const API_KEY = 'YOUR_YOUTUBE_API_KEY';\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = url => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[7].length === 11 ? match[7] : null;\n  };\n\n  // Initialize with the default URL\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n  }, []);\n\n  // Handle YouTube link input\n  const handleLinkChange = e => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Loading captions...');\n      setIsLoading(true);\n      fetchCaptions(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available caption tracks\n  const fetchCaptions = async videoId => {\n    try {\n      // First, fetch the available caption tracks\n      const captionListResponse = await fetch(`https://www.googleapis.com/youtube/v3/captions?part=snippet&videoId=${videoId}&key=${API_KEY}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n          // Include authorization if accessing private captions\n          // 'Authorization': 'Bearer YOUR_ACCESS_TOKEN'\n        }\n      });\n      if (!captionListResponse.ok) {\n        throw new Error(`Failed to fetch caption list: ${captionListResponse.status}`);\n      }\n      const captionListData = await captionListResponse.json();\n      if (!captionListData.items || captionListData.items.length === 0) {\n        setStatus('No captions found for this video');\n        setIsLoading(false);\n        return;\n      }\n\n      // Process available captions\n      const availableCaptionLanguages = [];\n      const captionPromises = [];\n      const captionsData = {};\n\n      // For each caption track, fetch the actual caption data\n      for (const captionTrack of captionListData.items) {\n        const language = captionTrack.snippet.language;\n        availableCaptionLanguages.push(language);\n\n        // Only fetch if it's a human-created caption (not ASR)\n        if (captionTrack.snippet.trackKind === 'standard') {\n          captionPromises.push(fetchCaptionTrack(captionTrack.id, language).then(data => {\n            captionsData[language] = data;\n          }));\n        }\n      }\n\n      // Wait for all caption tracks to be fetched\n      await Promise.all(captionPromises);\n      setAvailableLanguages(availableCaptionLanguages);\n      setCaptions(captionsData);\n\n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = availableCaptionLanguages.includes('en') ? 'en' : availableCaptionLanguages[0];\n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: '',\n        tertiary: ''\n      });\n      setStatus(`Found human-created captions in ${availableCaptionLanguages.length} languages!`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch a specific caption track\n  const fetchCaptionTrack = async (captionId, language) => {\n    try {\n      // Fetch the caption track in SRT or TTML format\n      const captionResponse = await fetch(`https://www.googleapis.com/youtube/v3/captions/${captionId}?tfmt=srt&key=${API_KEY}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n          // Include authorization if accessing private captions\n          // 'Authorization': 'Bearer YOUR_ACCESS_TOKEN'\n        }\n      });\n      if (!captionResponse.ok) {\n        throw new Error(`Failed to fetch caption: ${captionResponse.status}`);\n      }\n      const captionText = await captionResponse.text();\n\n      // Parse the SRT format\n      return parseSRT(captionText);\n    } catch (error) {\n      console.error(`Error fetching caption track for ${language}:`, error);\n      return [];\n    }\n  };\n\n  // Function to parse SRT format\n  const parseSRT = srtText => {\n    const captions = [];\n    const entries = srtText.trim().split('\\n\\n');\n    for (const entry of entries) {\n      const lines = entry.split('\\n');\n      if (lines.length >= 3) {\n        // Parse the timestamp line (format: 00:00:00,000 --> 00:00:00,000)\n        const timestamps = lines[1].split(' --> ');\n        const start = parseTimestamp(timestamps[0]);\n        const end = parseTimestamp(timestamps[1]);\n\n        // Join the remaining lines as the caption text\n        const text = lines.slice(2).join(' ');\n\n        // Add POS tagging placeholders - in real implementation you'd process this\n        // with NLP to identify parts of speech\n        const processedText = applyPOSTagging(text);\n        captions.push({\n          start,\n          end,\n          text: processedText\n        });\n      }\n    }\n    return captions;\n  };\n\n  // Function to parse SRT timestamp to seconds\n  const parseTimestamp = timestamp => {\n    // Format: 00:00:00,000\n    const parts = timestamp.replace(',', '.').split(':');\n    return parseFloat(parts[0]) * 3600 + parseFloat(parts[1]) * 60 + parseFloat(parts[2]);\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  // In a real implementation, you would use a proper NLP library\n  const applyPOSTagging = text => {\n    // This is a placeholder. In real-world usage, you would use a natural language\n    // processing library to identify nouns, verbs, adjectives, etc.\n\n    // For demo purposes, we'll use some common words\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n    for (let i = 0; i < words.length; i++) {\n      const word = words[i].toLowerCase().replace(/[^\\w\\s]/g, '');\n      if (commonNouns.includes(word)) {\n        taggedText += words[i].replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += words[i].replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += words[i].replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += words[i];\n      }\n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary, tertiary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = {\n      ...selectedLanguages\n    };\n\n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Language names for display\n  const languageNames = {\n    en: 'English',\n    de: 'German',\n    fr: 'French',\n    es: 'Spanish',\n    ru: 'Russian',\n    ar: 'Arabic',\n    ko: 'Korean',\n    fa: 'Persian',\n    zh: 'Chinese',\n    hi: 'Hindi',\n    pt: 'Portuguese',\n    ja: 'Japanese',\n    it: 'Italian',\n    nl: 'Dutch',\n    pl: 'Polish',\n    sv: 'Swedish',\n    tr: 'Turkish',\n    vi: 'Vietnamese',\n    id: 'Indonesian',\n    th: 'Thai'\n    // Add more languages as needed\n  };\n\n  // Get color based on settings\n  const getColor = type => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    switch (type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return '#000000';\n    }\n  };\n\n  // Get font size based on settings\n  const getFontSize = () => {\n    const sizeMap = {\n      'Small': '0.875rem',\n      'Medium': '1rem',\n      'Large': '1.25rem',\n      'X-Large': '1.5rem'\n    };\n    return sizeMap[fontSize] || '1rem';\n  };\n\n  // Get font family based on settings\n  const getFontFamily = () => {\n    const fontMap = {\n      'Sans Serif': 'Arial, Helvetica, sans-serif',\n      'Serif': 'Georgia, Times, serif',\n      'Monospace': 'Courier New, monospace',\n      'Handwriting': 'Comic Sans MS, cursive'\n    };\n    return fontMap[fontFamily] || 'Arial, Helvetica, sans-serif';\n  };\n\n  // Format caption text with styling for parts of speech\n  const formatCaptionText = text => {\n    // Replace tagged parts of speech with styled spans\n    const formattedText = text.replace(/<noun>(.*?)<\\/noun>/g, (match, content) => `<span style=\"color:${getColor('noun')}; text-decoration:underline;\">${content}</span>`).replace(/<verb>(.*?)<\\/verb>/g, (match, content) => `<span style=\"color:${getColor('verb')}; text-decoration:underline;\">${content}</span>`).replace(/<adjective>(.*?)<\\/adjective>/g, (match, content) => `<span style=\"color:${getColor('adjective')}; text-decoration:underline;\">${content}</span>`);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      dangerouslySetInnerHTML: {\n        __html: formattedText\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 12\n    }, this);\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  // Sync captions with video playback\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(caption => currentTime >= caption.start && currentTime <= caption.end);\n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Handle video time update\n  const handleTimeUpdate = event => {\n    setCurrentTime(event.target.currentTime);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"YouTube Multilingual Captions Extractor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: youtubeLink,\n          onChange: handleLinkChange,\n          placeholder: \"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\",\n          className: \"input-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'Load Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-message\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 9\n    }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n              className: \"video-frame\",\n              src: `https://www.youtube.com/embed/${videoId}?enablejsapi=1`,\n              title: \"YouTube video player\",\n              frameBorder: \"0\",\n              allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n              allowFullScreen: true,\n              onTimeUpdate: handleTimeUpdate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 15\n          }, this), captionPlacement === 'Overlay Bottom' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"captions-overlay\",\n            children: getSelectedLanguagesArray().map(lang => activeCaptions[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-caption\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-language\",\n                children: [languageNames[lang], \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 429,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-text\",\n                style: {\n                  fontFamily: getFontFamily(),\n                  fontSize: getFontSize(),\n                  direction: ['ar', 'fa'].includes(lang) ? 'rtl' : 'ltr'\n                },\n                children: formatCaptionText(activeCaptions[lang].text)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 25\n              }, this)]\n            }, lang, true, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this), (captionPlacement === 'Below Video' || captionPlacement === 'Side Panel') && availableLanguages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `captions-container ${captionPlacement === 'Side Panel' ? 'side-panel' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Captions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 17\n          }, this), getSelectedLanguagesArray().map(lang => {\n            var _captions$lang;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"language-title\",\n                children: [languageNames[lang] || lang, lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : lang === selectedLanguages.tertiary ? ' (Tertiary)' : '']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"captions-content\",\n                style: {\n                  fontFamily: getFontFamily(),\n                  fontSize: getFontSize(),\n                  direction: ['ar', 'fa'].includes(lang) ? 'rtl' : 'ltr'\n                },\n                children: (_captions$lang = captions[lang]) === null || _captions$lang === void 0 ? void 0 : _captions$lang.map((caption, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"timestamp\",\n                    style: {\n                      direction: 'ltr'\n                    },\n                    children: [Math.floor(caption.start / 60), \":\", (caption.start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(caption.end / 60), \":\", (caption.end % 60).toFixed(1).padStart(4, '0')]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 476,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"caption-text\",\n                    children: formatCaptionText(caption.text)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 480,\n                    columnNumber: 27\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 472,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 21\n              }, this)]\n            }, lang, true, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: \"Customize Display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"settings-title\",\n            children: \"Select Languages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Primary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedLanguages.primary,\n                onChange: e => setLanguageRank(e.target.value, 'primary'),\n                className: \"settings-select language-dropdown\",\n                children: availableLanguages.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: lang,\n                  children: languageNames[lang] || lang\n                }, lang, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 510,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Secondary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 520,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedLanguages.secondary,\n                onChange: e => setLanguageRank(e.target.value, 'secondary'),\n                className: \"settings-select language-dropdown\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 527,\n                  columnNumber: 21\n                }, this), availableLanguages.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: lang,\n                  children: languageNames[lang] || lang\n                }, lang, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 529,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Tertiary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedLanguages.tertiary,\n                onChange: e => setLanguageRank(e.target.value, 'tertiary'),\n                className: \"settings-select language-dropdown\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 546,\n                  columnNumber: 21\n                }, this), availableLanguages.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: lang,\n                  children: languageNames[lang] || lang\n                }, lang, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 548,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 541,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Caption Placement\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: captionPlacement,\n            onChange: e => setCaptionPlacement(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Below Video\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Overlay Bottom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Side Panel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Noun Underline Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: nounColor,\n            onChange: e => setNounColor(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Electric Blue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 579,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Cherry Red\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Forest Green\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Sunny Yellow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Royal Purple\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 583,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Verb Underline Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: verbColor,\n            onChange: e => setVerbColor(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Electric Blue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Cherry Red\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Forest Green\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Sunny Yellow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Royal Purple\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 599,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Adjective Underline Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: adjectiveColor,\n            onChange: e => setAdjectiveColor(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Electric Blue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 611,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Cherry Red\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 612,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Forest Green\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 613,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Sunny Yellow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 614,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Royal Purple\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 615,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Font Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: fontSize,\n            onChange: e => setFontSize(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Medium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 628,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"X-Large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 630,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Font Family\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: fontFamily,\n            onChange: e => setFontFamily(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Sans Serif\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 642,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Serif\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 643,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Monospace\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 644,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Handwriting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 645,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"export-section\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"export-button\",\n            onClick: () => {\n              const captionsData = JSON.stringify(captions, null, 2);\n              const blob = new Blob([captionsData], {\n                type: 'application/json'\n              });\n              const url = URL.createObjectURL(blob);\n              const a = document.createElement('a');\n              a.href = url;\n              a.download = `captions-${videoId}.json`;\n              a.click();\n            },\n            children: \"Export Captions as JSON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .captions-overlay {\n          position: absolute;\n          bottom: 10px;\n          left: 10px;\n          right: 10px;\n          background-color: rgba(0, 0, 0, 0.7);\n          color: white;\n          padding: 10px;\n          border-radius: 5px;\n          z-index: 10;\n        }\n        \n        .overlay-caption {\n          margin-bottom: 5px;\n        }\n        \n        .overlay-language {\n          font-weight: bold;\n          margin-right: 5px;\n        }\n        \n        .side-panel {\n          position: absolute;\n          top: 0;\n          right: 0;\n          width: 300px;\n          height: 100%;\n          overflow-y: auto;\n          background-color: #f8f9fa;\n          padding: 10px;\n          border-left: 1px solid #ddd;\n        }\n        \n        .active-caption {\n          background-color: #f0f8ff;\n          border-left: 3px solid #007bff;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 374,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"766mNX8SVd+AWYIQuVRdywMzjrU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","youtubeLink","setYoutubeLink","videoId","setVideoId","captions","setCaptions","selectedLanguages","setSelectedLanguages","primary","secondary","tertiary","availableLanguages","setAvailableLanguages","status","setStatus","isLoading","setIsLoading","captionPlacement","setCaptionPlacement","nounColor","setNounColor","verbColor","setVerbColor","adjectiveColor","setAdjectiveColor","fontSize","setFontSize","fontFamily","setFontFamily","API_KEY","extractVideoId","url","regExp","match","length","id","handleLinkChange","e","target","value","handleSubmit","preventDefault","fetchCaptions","captionListResponse","fetch","method","headers","ok","Error","captionListData","json","items","availableCaptionLanguages","captionPromises","captionsData","captionTrack","language","snippet","push","trackKind","fetchCaptionTrack","then","data","Promise","all","defaultPrimary","includes","error","console","message","captionId","captionResponse","captionText","text","parseSRT","srtText","entries","trim","split","entry","lines","timestamps","start","parseTimestamp","end","slice","join","processedText","applyPOSTagging","timestamp","parts","replace","parseFloat","commonNouns","commonVerbs","commonAdjectives","words","taggedText","i","word","toLowerCase","setLanguageRank","lang","rank","updatedLanguages","Object","keys","forEach","key","languageNames","en","de","fr","es","ru","ar","ko","fa","zh","hi","pt","ja","it","nl","pl","sv","tr","vi","th","getColor","type","colorMap","getFontSize","sizeMap","getFontFamily","fontMap","formatCaptionText","formattedText","content","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","getSelectedLanguagesArray","values","filter","currentTime","setCurrentTime","activeCaptions","setActiveCaptions","newActiveCaptions","activeCaption","find","caption","handleTimeUpdate","event","className","children","onSubmit","onChange","placeholder","disabled","src","title","frameBorder","allow","allowFullScreen","onTimeUpdate","map","style","direction","_captions$lang","index","Math","floor","toFixed","padStart","onClick","JSON","stringify","blob","Blob","URL","createObjectURL","a","document","createElement","href","download","click","jsx","_c","$RefreshReg$"],"sources":["/Users/arunasrivastava/random/cse482/Multilingual/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: '',\n    tertiary: ''\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Customization options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  const [fontSize, setFontSize] = useState('Medium');\n  const [fontFamily, setFontFamily] = useState('Sans Serif');\n\n  // API Key for YouTube Data API v3\n  // You should store this in an environment variable in a real application\n  const API_KEY = 'YOUR_YOUTUBE_API_KEY';\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = (url) => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[7].length === 11) ? match[7] : null;\n  };\n\n  // Initialize with the default URL\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n  }, []);\n\n  // Handle YouTube link input\n  const handleLinkChange = (e) => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Loading captions...');\n      setIsLoading(true);\n      fetchCaptions(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available caption tracks\n  const fetchCaptions = async (videoId) => {\n    try {\n      // First, fetch the available caption tracks\n      const captionListResponse = await fetch(\n        `https://www.googleapis.com/youtube/v3/captions?part=snippet&videoId=${videoId}&key=${API_KEY}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            // Include authorization if accessing private captions\n            // 'Authorization': 'Bearer YOUR_ACCESS_TOKEN'\n          }\n        }\n      );\n\n      if (!captionListResponse.ok) {\n        throw new Error(`Failed to fetch caption list: ${captionListResponse.status}`);\n      }\n\n      const captionListData = await captionListResponse.json();\n      \n      if (!captionListData.items || captionListData.items.length === 0) {\n        setStatus('No captions found for this video');\n        setIsLoading(false);\n        return;\n      }\n\n      // Process available captions\n      const availableCaptionLanguages = [];\n      const captionPromises = [];\n      const captionsData = {};\n\n      // For each caption track, fetch the actual caption data\n      for (const captionTrack of captionListData.items) {\n        const language = captionTrack.snippet.language;\n        availableCaptionLanguages.push(language);\n\n        // Only fetch if it's a human-created caption (not ASR)\n        if (captionTrack.snippet.trackKind === 'standard') {\n          captionPromises.push(\n            fetchCaptionTrack(captionTrack.id, language).then(data => {\n              captionsData[language] = data;\n            })\n          );\n        }\n      }\n\n      // Wait for all caption tracks to be fetched\n      await Promise.all(captionPromises);\n\n      setAvailableLanguages(availableCaptionLanguages);\n      setCaptions(captionsData);\n      \n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = availableCaptionLanguages.includes('en') ? 'en' : availableCaptionLanguages[0];\n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: '',\n        tertiary: ''\n      });\n\n      setStatus(`Found human-created captions in ${availableCaptionLanguages.length} languages!`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch a specific caption track\n  const fetchCaptionTrack = async (captionId, language) => {\n    try {\n      // Fetch the caption track in SRT or TTML format\n      const captionResponse = await fetch(\n        `https://www.googleapis.com/youtube/v3/captions/${captionId}?tfmt=srt&key=${API_KEY}`,\n        {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            // Include authorization if accessing private captions\n            // 'Authorization': 'Bearer YOUR_ACCESS_TOKEN'\n          }\n        }\n      );\n\n      if (!captionResponse.ok) {\n        throw new Error(`Failed to fetch caption: ${captionResponse.status}`);\n      }\n\n      const captionText = await captionResponse.text();\n      \n      // Parse the SRT format\n      return parseSRT(captionText);\n    } catch (error) {\n      console.error(`Error fetching caption track for ${language}:`, error);\n      return [];\n    }\n  };\n\n  // Function to parse SRT format\n  const parseSRT = (srtText) => {\n    const captions = [];\n    const entries = srtText.trim().split('\\n\\n');\n\n    for (const entry of entries) {\n      const lines = entry.split('\\n');\n      if (lines.length >= 3) {\n        // Parse the timestamp line (format: 00:00:00,000 --> 00:00:00,000)\n        const timestamps = lines[1].split(' --> ');\n        const start = parseTimestamp(timestamps[0]);\n        const end = parseTimestamp(timestamps[1]);\n\n        // Join the remaining lines as the caption text\n        const text = lines.slice(2).join(' ');\n\n        // Add POS tagging placeholders - in real implementation you'd process this\n        // with NLP to identify parts of speech\n        const processedText = applyPOSTagging(text);\n\n        captions.push({\n          start,\n          end,\n          text: processedText\n        });\n      }\n    }\n\n    return captions;\n  };\n\n  // Function to parse SRT timestamp to seconds\n  const parseTimestamp = (timestamp) => {\n    // Format: 00:00:00,000\n    const parts = timestamp.replace(',', '.').split(':');\n    return parseFloat(parts[0]) * 3600 + parseFloat(parts[1]) * 60 + parseFloat(parts[2]);\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  // In a real implementation, you would use a proper NLP library\n  const applyPOSTagging = (text) => {\n    // This is a placeholder. In real-world usage, you would use a natural language\n    // processing library to identify nouns, verbs, adjectives, etc.\n    \n    // For demo purposes, we'll use some common words\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n\n    for (let i = 0; i < words.length; i++) {\n      const word = words[i].toLowerCase().replace(/[^\\w\\s]/g, '');\n      \n      if (commonNouns.includes(word)) {\n        taggedText += words[i].replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += words[i].replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += words[i].replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += words[i];\n      }\n      \n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary, tertiary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = { ...selectedLanguages };\n    \n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Language names for display\n  const languageNames = {\n    en: 'English',\n    de: 'German',\n    fr: 'French',\n    es: 'Spanish',\n    ru: 'Russian',\n    ar: 'Arabic',\n    ko: 'Korean',\n    fa: 'Persian',\n    zh: 'Chinese',\n    hi: 'Hindi',\n    pt: 'Portuguese',\n    ja: 'Japanese',\n    it: 'Italian',\n    nl: 'Dutch',\n    pl: 'Polish',\n    sv: 'Swedish',\n    tr: 'Turkish',\n    vi: 'Vietnamese',\n    id: 'Indonesian',\n    th: 'Thai',\n    // Add more languages as needed\n  };\n\n  // Get color based on settings\n  const getColor = (type) => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    \n    switch(type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return '#000000';\n    }\n  };\n\n  // Get font size based on settings\n  const getFontSize = () => {\n    const sizeMap = {\n      'Small': '0.875rem',\n      'Medium': '1rem',\n      'Large': '1.25rem',\n      'X-Large': '1.5rem'\n    };\n    \n    return sizeMap[fontSize] || '1rem';\n  };\n\n  // Get font family based on settings\n  const getFontFamily = () => {\n    const fontMap = {\n      'Sans Serif': 'Arial, Helvetica, sans-serif',\n      'Serif': 'Georgia, Times, serif',\n      'Monospace': 'Courier New, monospace',\n      'Handwriting': 'Comic Sans MS, cursive'\n    };\n    \n    return fontMap[fontFamily] || 'Arial, Helvetica, sans-serif';\n  };\n\n  // Format caption text with styling for parts of speech\n  const formatCaptionText = (text) => {\n    // Replace tagged parts of speech with styled spans\n    const formattedText = text\n      .replace(/<noun>(.*?)<\\/noun>/g, (match, content) => \n        `<span style=\"color:${getColor('noun')}; text-decoration:underline;\">${content}</span>`)\n      .replace(/<verb>(.*?)<\\/verb>/g, (match, content) => \n        `<span style=\"color:${getColor('verb')}; text-decoration:underline;\">${content}</span>`)\n      .replace(/<adjective>(.*?)<\\/adjective>/g, (match, content) => \n        `<span style=\"color:${getColor('adjective')}; text-decoration:underline;\">${content}</span>`);\n    \n    return <span dangerouslySetInnerHTML={{ __html: formattedText }} />;\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  // Sync captions with video playback\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    \n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(\n          caption => currentTime >= caption.start && currentTime <= caption.end\n        );\n        \n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    \n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Handle video time update\n  const handleTimeUpdate = (event) => {\n    setCurrentTime(event.target.currentTime);\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"app-title\">YouTube Multilingual Captions Extractor</h1>\n      \n      {/* Input Box */}\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={youtubeLink}\n            onChange={handleLinkChange}\n            placeholder=\"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\"\n            className=\"input-field\"\n          />\n          <button \n            type=\"submit\"\n            className=\"submit-button\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load Video'}\n          </button>\n        </div>\n      </form>\n      \n      {/* Status message */}\n      {status && (\n        <div className=\"status-message\">\n          {status}\n        </div>\n      )}\n      \n      {videoId && (\n        <div className=\"main-content\">\n          {/* Main Content Area (Video + Captions) */}\n          <div className=\"content-area\">\n            {/* Video Embed Box */}\n            <div className=\"video-container\">\n              <h2 className=\"section-title\">Video</h2>\n              <div className=\"video-wrapper\">\n                <iframe\n                  className=\"video-frame\"\n                  src={`https://www.youtube.com/embed/${videoId}?enablejsapi=1`}\n                  title=\"YouTube video player\"\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                  onTimeUpdate={handleTimeUpdate}\n                ></iframe>\n              </div>\n              \n              {/* Real-time captions overlay */}\n              {captionPlacement === 'Overlay Bottom' && (\n                <div className=\"captions-overlay\">\n                  {getSelectedLanguagesArray().map(lang => (\n                    activeCaptions[lang] && (\n                      <div key={lang} className=\"overlay-caption\">\n                        <span className=\"overlay-language\">\n                          {languageNames[lang]}:\n                        </span>\n                        <span \n                          className=\"overlay-text\"\n                          style={{\n                            fontFamily: getFontFamily(),\n                            fontSize: getFontSize(),\n                            direction: ['ar', 'fa'].includes(lang) ? 'rtl' : 'ltr'\n                          }}\n                        >\n                          {formatCaptionText(activeCaptions[lang].text)}\n                        </span>\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Captions Display - for Below Video or Side Panel modes */}\n            {(captionPlacement === 'Below Video' || captionPlacement === 'Side Panel') && \n             availableLanguages.length > 0 && (\n              <div className={`captions-container ${captionPlacement === 'Side Panel' ? 'side-panel' : ''}`}>\n                <h2 className=\"section-title\">Captions</h2>\n                \n                {getSelectedLanguagesArray().map(lang => (\n                  <div key={lang} className=\"language-section\">\n                    <h3 className=\"language-title\">\n                      {languageNames[lang] || lang} \n                      {lang === selectedLanguages.primary ? ' (Primary)' : \n                       lang === selectedLanguages.secondary ? ' (Secondary)' : \n                       lang === selectedLanguages.tertiary ? ' (Tertiary)' : ''}\n                    </h3>\n                    <div \n                      className=\"captions-content\"\n                      style={{\n                        fontFamily: getFontFamily(),\n                        fontSize: getFontSize(),\n                        direction: ['ar', 'fa'].includes(lang) ? 'rtl' : 'ltr'\n                      }}\n                    >\n                      {captions[lang]?.map((caption, index) => (\n                        <div \n                          key={index} \n                          className={`caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`}\n                        >\n                          <div className=\"timestamp\" style={{ direction: 'ltr' }}>\n                            {Math.floor(caption.start / 60)}:{(caption.start % 60).toFixed(1).padStart(4, '0')} - \n                            {Math.floor(caption.end / 60)}:{(caption.end % 60).toFixed(1).padStart(4, '0')}\n                          </div>\n                          <div className=\"caption-text\">\n                            {formatCaptionText(caption.text)}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          \n          {/* Customization Panel */}\n          <div className=\"settings-panel\">\n            <h2 className=\"section-title\">Customize Display</h2>\n            \n            {/* Language Selection - Updated with ranked dropdowns */}\n            <div className=\"settings-section\">\n              <h3 className=\"settings-title\">Select Languages</h3>\n              \n              {/* Primary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\">Primary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    value={selectedLanguages.primary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'primary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    {availableLanguages.map(lang => (\n                      <option key={lang} value={lang}>\n                        {languageNames[lang] || lang}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              \n              {/* Secondary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\">Secondary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    value={selectedLanguages.secondary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'secondary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    <option value=\"\">None</option>\n                    {availableLanguages.map(lang => (\n                      <option key={lang} value={lang}>\n                        {languageNames[lang] || lang}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              \n              {/* Tertiary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\">Tertiary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    value={selectedLanguages.tertiary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'tertiary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    <option value=\"\">None</option>\n                    {availableLanguages.map(lang => (\n                      <option key={lang} value={lang}>\n                        {languageNames[lang] || lang}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n            \n            {/* Caption Placement */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Caption Placement</label>\n              <select \n                value={captionPlacement} \n                onChange={(e) => setCaptionPlacement(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Below Video</option>\n                <option>Overlay Bottom</option>\n                <option>Side Panel</option>\n              </select>\n            </div>\n            \n            {/* Noun Underline Color */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Noun Underline Color</label>\n              <select \n                value={nounColor} \n                onChange={(e) => setNounColor(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Electric Blue</option>\n                <option>Cherry Red</option>\n                <option>Forest Green</option>\n                <option>Sunny Yellow</option>\n                <option>Royal Purple</option>\n              </select>\n            </div>\n            \n            {/* Verb Underline Color */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Verb Underline Color</label>\n              <select \n                value={verbColor} \n                onChange={(e) => setVerbColor(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Electric Blue</option>\n                <option>Cherry Red</option>\n                <option>Forest Green</option>\n                <option>Sunny Yellow</option>\n                <option>Royal Purple</option>\n              </select>\n            </div>\n            \n            {/* Adjective Underline Color */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Adjective Underline Color</label>\n              <select \n                value={adjectiveColor} \n                onChange={(e) => setAdjectiveColor(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Electric Blue</option>\n                <option>Cherry Red</option>\n                <option>Forest Green</option>\n                <option>Sunny Yellow</option>\n                <option>Royal Purple</option>\n              </select>\n            </div>\n            \n            {/* Font Size */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Font Size</label>\n              <select \n                value={fontSize} \n                onChange={(e) => setFontSize(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Small</option>\n                <option>Medium</option>\n                <option>Large</option>\n                <option>X-Large</option>\n              </select>\n            </div>\n            \n            {/* Font Family */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Font Family</label>\n              <select \n                value={fontFamily} \n                onChange={(e) => setFontFamily(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Sans Serif</option>\n                <option>Serif</option>\n                <option>Monospace</option>\n                <option>Handwriting</option>\n              </select>\n            </div>\n            \n            {/* Export button */}\n            <div className=\"export-section\">\n              <button \n                className=\"export-button\"\n                onClick={() => {\n                  const captionsData = JSON.stringify(captions, null, 2);\n                  const blob = new Blob([captionsData], { type: 'application/json' });\n                  const url = URL.createObjectURL(blob);\n                  const a = document.createElement('a');\n                  a.href = url;\n                  a.download = `captions-${videoId}.json`;\n                  a.click();\n                }}\n              >\n                Export Captions as JSON\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Additional CSS for new features */}\n      <style jsx>{`\n        .captions-overlay {\n          position: absolute;\n          bottom: 10px;\n          left: 10px;\n          right: 10px;\n          background-color: rgba(0, 0, 0, 0.7);\n          color: white;\n          padding: 10px;\n          border-radius: 5px;\n          z-index: 10;\n        }\n        \n        .overlay-caption {\n          margin-bottom: 5px;\n        }\n        \n        .overlay-language {\n          font-weight: bold;\n          margin-right: 5px;\n        }\n        \n        .side-panel {\n          position: absolute;\n          top: 0;\n          right: 0;\n          width: 300px;\n          height: 100%;\n          overflow-y: auto;\n          background-color: #f8f9fa;\n          padding: 10px;\n          border-left: 1px solid #ddd;\n        }\n        \n        .active-caption {\n          background-color: #f0f8ff;\n          border-left: 3px solid #007bff;\n        }\n      `}</style>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,6CAA6C,CAAC;EAC7F,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACY,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGb,QAAQ,CAAC;IACzDc,OAAO,EAAE,IAAI;IACbC,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAM,CAACuB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGxB,QAAQ,CAAC,aAAa,CAAC;EACvE,MAAM,CAACyB,SAAS,EAAEC,YAAY,CAAC,GAAG1B,QAAQ,CAAC,eAAe,CAAC;EAC3D,MAAM,CAAC2B,SAAS,EAAEC,YAAY,CAAC,GAAG5B,QAAQ,CAAC,YAAY,CAAC;EACxD,MAAM,CAAC6B,cAAc,EAAEC,iBAAiB,CAAC,GAAG9B,QAAQ,CAAC,cAAc,CAAC;EACpE,MAAM,CAAC+B,QAAQ,EAAEC,WAAW,CAAC,GAAGhC,QAAQ,CAAC,QAAQ,CAAC;EAClD,MAAM,CAACiC,UAAU,EAAEC,aAAa,CAAC,GAAGlC,QAAQ,CAAC,YAAY,CAAC;;EAE1D;EACA;EACA,MAAMmC,OAAO,GAAG,sBAAsB;;EAEtC;EACA,MAAMC,cAAc,GAAIC,GAAG,IAAK;IAC9B,MAAMC,MAAM,GAAG,2EAA2E;IAC1F,MAAMC,KAAK,GAAGF,GAAG,CAACE,KAAK,CAACD,MAAM,CAAC;IAC/B,OAAQC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACC,MAAM,KAAK,EAAE,GAAID,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;EAC5D,CAAC;;EAED;EACAtC,SAAS,CAAC,MAAM;IACd,MAAMwC,EAAE,GAAGL,cAAc,CAAC9B,WAAW,CAAC;IACtC,IAAImC,EAAE,EAAE;MACNhC,UAAU,CAACgC,EAAE,CAAC;IAChB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,gBAAgB,GAAIC,CAAC,IAAK;IAC9BpC,cAAc,CAACoC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAChC,CAAC;;EAED;EACA,MAAMC,YAAY,GAAIH,CAAC,IAAK;IAC1BA,CAAC,CAACI,cAAc,CAAC,CAAC;IAClB,MAAMN,EAAE,GAAGL,cAAc,CAAC9B,WAAW,CAAC;IACtC,IAAImC,EAAE,EAAE;MACNhC,UAAU,CAACgC,EAAE,CAAC;MACdrB,SAAS,CAAC,qBAAqB,CAAC;MAChCE,YAAY,CAAC,IAAI,CAAC;MAClB0B,aAAa,CAACP,EAAE,CAAC;IACnB,CAAC,MAAM;MACLrB,SAAS,CAAC,qBAAqB,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAM4B,aAAa,GAAG,MAAOxC,OAAO,IAAK;IACvC,IAAI;MACF;MACA,MAAMyC,mBAAmB,GAAG,MAAMC,KAAK,CACrC,uEAAuE1C,OAAO,QAAQ2B,OAAO,EAAE,EAC/F;QACEgB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;UAChB;UACA;QACF;MACF,CACF,CAAC;MAED,IAAI,CAACH,mBAAmB,CAACI,EAAE,EAAE;QAC3B,MAAM,IAAIC,KAAK,CAAC,iCAAiCL,mBAAmB,CAAC9B,MAAM,EAAE,CAAC;MAChF;MAEA,MAAMoC,eAAe,GAAG,MAAMN,mBAAmB,CAACO,IAAI,CAAC,CAAC;MAExD,IAAI,CAACD,eAAe,CAACE,KAAK,IAAIF,eAAe,CAACE,KAAK,CAACjB,MAAM,KAAK,CAAC,EAAE;QAChEpB,SAAS,CAAC,kCAAkC,CAAC;QAC7CE,YAAY,CAAC,KAAK,CAAC;QACnB;MACF;;MAEA;MACA,MAAMoC,yBAAyB,GAAG,EAAE;MACpC,MAAMC,eAAe,GAAG,EAAE;MAC1B,MAAMC,YAAY,GAAG,CAAC,CAAC;;MAEvB;MACA,KAAK,MAAMC,YAAY,IAAIN,eAAe,CAACE,KAAK,EAAE;QAChD,MAAMK,QAAQ,GAAGD,YAAY,CAACE,OAAO,CAACD,QAAQ;QAC9CJ,yBAAyB,CAACM,IAAI,CAACF,QAAQ,CAAC;;QAExC;QACA,IAAID,YAAY,CAACE,OAAO,CAACE,SAAS,KAAK,UAAU,EAAE;UACjDN,eAAe,CAACK,IAAI,CAClBE,iBAAiB,CAACL,YAAY,CAACpB,EAAE,EAAEqB,QAAQ,CAAC,CAACK,IAAI,CAACC,IAAI,IAAI;YACxDR,YAAY,CAACE,QAAQ,CAAC,GAAGM,IAAI;UAC/B,CAAC,CACH,CAAC;QACH;MACF;;MAEA;MACA,MAAMC,OAAO,CAACC,GAAG,CAACX,eAAe,CAAC;MAElCzC,qBAAqB,CAACwC,yBAAyB,CAAC;MAChD/C,WAAW,CAACiD,YAAY,CAAC;;MAEzB;MACA,MAAMW,cAAc,GAAGb,yBAAyB,CAACc,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,GAAGd,yBAAyB,CAAC,CAAC,CAAC;MACrG7C,oBAAoB,CAAC;QACnBC,OAAO,EAAEyD,cAAc;QACvBxD,SAAS,EAAE,EAAE;QACbC,QAAQ,EAAE;MACZ,CAAC,CAAC;MAEFI,SAAS,CAAC,mCAAmCsC,yBAAyB,CAAClB,MAAM,aAAa,CAAC;IAC7F,CAAC,CAAC,OAAOiC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDrD,SAAS,CAAC,4BAA4BqD,KAAK,CAACE,OAAO,EAAE,CAAC;IACxD,CAAC,SAAS;MACRrD,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAM4C,iBAAiB,GAAG,MAAAA,CAAOU,SAAS,EAAEd,QAAQ,KAAK;IACvD,IAAI;MACF;MACA,MAAMe,eAAe,GAAG,MAAM3B,KAAK,CACjC,kDAAkD0B,SAAS,iBAAiBzC,OAAO,EAAE,EACrF;QACEgB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,QAAQ,EAAE;UACV;UACA;QACF;MACF,CACF,CAAC;MAED,IAAI,CAACyB,eAAe,CAACxB,EAAE,EAAE;QACvB,MAAM,IAAIC,KAAK,CAAC,4BAA4BuB,eAAe,CAAC1D,MAAM,EAAE,CAAC;MACvE;MAEA,MAAM2D,WAAW,GAAG,MAAMD,eAAe,CAACE,IAAI,CAAC,CAAC;;MAEhD;MACA,OAAOC,QAAQ,CAACF,WAAW,CAAC;IAC9B,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoCX,QAAQ,GAAG,EAAEW,KAAK,CAAC;MACrE,OAAO,EAAE;IACX;EACF,CAAC;;EAED;EACA,MAAMO,QAAQ,GAAIC,OAAO,IAAK;IAC5B,MAAMvE,QAAQ,GAAG,EAAE;IACnB,MAAMwE,OAAO,GAAGD,OAAO,CAACE,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM,CAAC;IAE5C,KAAK,MAAMC,KAAK,IAAIH,OAAO,EAAE;MAC3B,MAAMI,KAAK,GAAGD,KAAK,CAACD,KAAK,CAAC,IAAI,CAAC;MAC/B,IAAIE,KAAK,CAAC9C,MAAM,IAAI,CAAC,EAAE;QACrB;QACA,MAAM+C,UAAU,GAAGD,KAAK,CAAC,CAAC,CAAC,CAACF,KAAK,CAAC,OAAO,CAAC;QAC1C,MAAMI,KAAK,GAAGC,cAAc,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAMG,GAAG,GAAGD,cAAc,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC;;QAEzC;QACA,MAAMR,IAAI,GAAGO,KAAK,CAACK,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;;QAErC;QACA;QACA,MAAMC,aAAa,GAAGC,eAAe,CAACf,IAAI,CAAC;QAE3CrE,QAAQ,CAACsD,IAAI,CAAC;UACZwB,KAAK;UACLE,GAAG;UACHX,IAAI,EAAEc;QACR,CAAC,CAAC;MACJ;IACF;IAEA,OAAOnF,QAAQ;EACjB,CAAC;;EAED;EACA,MAAM+E,cAAc,GAAIM,SAAS,IAAK;IACpC;IACA,MAAMC,KAAK,GAAGD,SAAS,CAACE,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAACb,KAAK,CAAC,GAAG,CAAC;IACpD,OAAOc,UAAU,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGE,UAAU,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAGE,UAAU,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EACvF,CAAC;;EAED;EACA;EACA,MAAMF,eAAe,GAAIf,IAAI,IAAK;IAChC;IACA;;IAEA;IACA,MAAMoB,WAAW,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC;IAC/O,MAAMC,WAAW,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC;IAChe,MAAMC,gBAAgB,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;;IAEzP;IACA,MAAMC,KAAK,GAAGvB,IAAI,CAACK,KAAK,CAAC,KAAK,CAAC;IAC/B,IAAImB,UAAU,GAAG,EAAE;IAEnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAAC9D,MAAM,EAAEgE,CAAC,EAAE,EAAE;MACrC,MAAMC,IAAI,GAAGH,KAAK,CAACE,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAACT,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;MAE3D,IAAIE,WAAW,CAAC3B,QAAQ,CAACiC,IAAI,CAAC,EAAE;QAC9BF,UAAU,IAAID,KAAK,CAACE,CAAC,CAAC,CAACP,OAAO,CAACQ,IAAI,EAAE,SAASA,IAAI,SAAS,CAAC;MAC9D,CAAC,MAAM,IAAIL,WAAW,CAAC5B,QAAQ,CAACiC,IAAI,CAAC,EAAE;QACrCF,UAAU,IAAID,KAAK,CAACE,CAAC,CAAC,CAACP,OAAO,CAACQ,IAAI,EAAE,SAASA,IAAI,SAAS,CAAC;MAC9D,CAAC,MAAM,IAAIJ,gBAAgB,CAAC7B,QAAQ,CAACiC,IAAI,CAAC,EAAE;QAC1CF,UAAU,IAAID,KAAK,CAACE,CAAC,CAAC,CAACP,OAAO,CAACQ,IAAI,EAAE,cAAcA,IAAI,cAAc,CAAC;MACxE,CAAC,MAAM;QACLF,UAAU,IAAID,KAAK,CAACE,CAAC,CAAC;MACxB;MAEA,IAAIA,CAAC,GAAGF,KAAK,CAAC9D,MAAM,GAAG,CAAC,EAAE;QACxB+D,UAAU,IAAI,GAAG;MACnB;IACF;IAEA,OAAOA,UAAU;EACnB,CAAC;;EAED;EACA,MAAMI,eAAe,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;IACtC;IACA,MAAMC,gBAAgB,GAAG;MAAE,GAAGlG;IAAkB,CAAC;;IAEjD;IACAmG,MAAM,CAACC,IAAI,CAACF,gBAAgB,CAAC,CAACG,OAAO,CAACC,GAAG,IAAI;MAC3C,IAAIJ,gBAAgB,CAACI,GAAG,CAAC,KAAKN,IAAI,IAAIM,GAAG,KAAKL,IAAI,EAAE;QAClDC,gBAAgB,CAACI,GAAG,CAAC,GAAG,EAAE;MAC5B;IACF,CAAC,CAAC;;IAEF;IACAJ,gBAAgB,CAACD,IAAI,CAAC,GAAGD,IAAI;IAC7B/F,oBAAoB,CAACiG,gBAAgB,CAAC;EACxC,CAAC;;EAED;EACA,MAAMK,aAAa,GAAG;IACpBC,EAAE,EAAE,SAAS;IACbC,EAAE,EAAE,QAAQ;IACZC,EAAE,EAAE,QAAQ;IACZC,EAAE,EAAE,SAAS;IACbC,EAAE,EAAE,SAAS;IACbC,EAAE,EAAE,QAAQ;IACZC,EAAE,EAAE,QAAQ;IACZC,EAAE,EAAE,SAAS;IACbC,EAAE,EAAE,SAAS;IACbC,EAAE,EAAE,OAAO;IACXC,EAAE,EAAE,YAAY;IAChBC,EAAE,EAAE,UAAU;IACdC,EAAE,EAAE,SAAS;IACbC,EAAE,EAAE,OAAO;IACXC,EAAE,EAAE,QAAQ;IACZC,EAAE,EAAE,SAAS;IACbC,EAAE,EAAE,SAAS;IACbC,EAAE,EAAE,YAAY;IAChB5F,EAAE,EAAE,YAAY;IAChB6F,EAAE,EAAE;IACJ;EACF,CAAC;;EAED;EACA,MAAMC,QAAQ,GAAIC,IAAI,IAAK;IACzB,MAAMC,QAAQ,GAAG;MACf,eAAe,EAAE,SAAS;MAC1B,YAAY,EAAE,SAAS;MACvB,cAAc,EAAE,SAAS;MACzB,cAAc,EAAE,SAAS;MACzB,cAAc,EAAE;IAClB,CAAC;IAED,QAAOD,IAAI;MACT,KAAK,MAAM;QACT,OAAOC,QAAQ,CAAChH,SAAS,CAAC,IAAIgH,QAAQ,CAAC,eAAe,CAAC;MACzD,KAAK,MAAM;QACT,OAAOA,QAAQ,CAAC9G,SAAS,CAAC,IAAI8G,QAAQ,CAAC,YAAY,CAAC;MACtD,KAAK,WAAW;QACd,OAAOA,QAAQ,CAAC5G,cAAc,CAAC,IAAI4G,QAAQ,CAAC,cAAc,CAAC;MAC7D;QACE,OAAO,SAAS;IACpB;EACF,CAAC;;EAED;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,OAAO,GAAG;MACd,OAAO,EAAE,UAAU;MACnB,QAAQ,EAAE,MAAM;MAChB,OAAO,EAAE,SAAS;MAClB,SAAS,EAAE;IACb,CAAC;IAED,OAAOA,OAAO,CAAC5G,QAAQ,CAAC,IAAI,MAAM;EACpC,CAAC;;EAED;EACA,MAAM6G,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,OAAO,GAAG;MACd,YAAY,EAAE,8BAA8B;MAC5C,OAAO,EAAE,uBAAuB;MAChC,WAAW,EAAE,wBAAwB;MACrC,aAAa,EAAE;IACjB,CAAC;IAED,OAAOA,OAAO,CAAC5G,UAAU,CAAC,IAAI,8BAA8B;EAC9D,CAAC;;EAED;EACA,MAAM6G,iBAAiB,GAAI/D,IAAI,IAAK;IAClC;IACA,MAAMgE,aAAa,GAAGhE,IAAI,CACvBkB,OAAO,CAAC,sBAAsB,EAAE,CAAC1D,KAAK,EAAEyG,OAAO,KAC9C,sBAAsBT,QAAQ,CAAC,MAAM,CAAC,iCAAiCS,OAAO,SAAS,CAAC,CACzF/C,OAAO,CAAC,sBAAsB,EAAE,CAAC1D,KAAK,EAAEyG,OAAO,KAC9C,sBAAsBT,QAAQ,CAAC,MAAM,CAAC,iCAAiCS,OAAO,SAAS,CAAC,CACzF/C,OAAO,CAAC,gCAAgC,EAAE,CAAC1D,KAAK,EAAEyG,OAAO,KACxD,sBAAsBT,QAAQ,CAAC,WAAW,CAAC,iCAAiCS,OAAO,SAAS,CAAC;IAEjG,oBAAO7I,OAAA;MAAM8I,uBAAuB,EAAE;QAAEC,MAAM,EAAEH;MAAc;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACrE,CAAC;;EAED;EACA,MAAMC,yBAAyB,GAAGA,CAAA,KAAM;IACtC,OAAOxC,MAAM,CAACyC,MAAM,CAAC5I,iBAAiB,CAAC,CAAC6I,MAAM,CAAC7C,IAAI,IAAIA,IAAI,KAAK,EAAE,CAAC;EACrE,CAAC;;EAED;EACA,MAAM,CAAC8C,WAAW,EAAEC,cAAc,CAAC,GAAG3J,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAAC4J,cAAc,EAAEC,iBAAiB,CAAC,GAAG7J,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAExD;EACAC,SAAS,CAAC,MAAM;IACd,MAAM6J,iBAAiB,GAAG,CAAC,CAAC;IAE5BP,yBAAyB,CAAC,CAAC,CAACtC,OAAO,CAACL,IAAI,IAAI;MAC1C,IAAIlG,QAAQ,CAACkG,IAAI,CAAC,EAAE;QAClB,MAAMmD,aAAa,GAAGrJ,QAAQ,CAACkG,IAAI,CAAC,CAACoD,IAAI,CACvCC,OAAO,IAAIP,WAAW,IAAIO,OAAO,CAACzE,KAAK,IAAIkE,WAAW,IAAIO,OAAO,CAACvE,GACpE,CAAC;QAED,IAAIqE,aAAa,EAAE;UACjBD,iBAAiB,CAAClD,IAAI,CAAC,GAAGmD,aAAa;QACzC;MACF;IACF,CAAC,CAAC;IAEFF,iBAAiB,CAACC,iBAAiB,CAAC;EACtC,CAAC,EAAE,CAACJ,WAAW,EAAEhJ,QAAQ,EAAEE,iBAAiB,CAAC,CAAC;;EAE9C;EACA,MAAMsJ,gBAAgB,GAAIC,KAAK,IAAK;IAClCR,cAAc,CAACQ,KAAK,CAACvH,MAAM,CAAC8G,WAAW,CAAC;EAC1C,CAAC;EAED,oBACEvJ,OAAA;IAAKiK,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BlK,OAAA;MAAIiK,SAAS,EAAC,WAAW;MAAAC,QAAA,EAAC;IAAuC;MAAAlB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGtEnJ,OAAA;MAAMmK,QAAQ,EAAExH,YAAa;MAACsH,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eACtDlK,OAAA;QAAKiK,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BlK,OAAA;UACEqI,IAAI,EAAC,MAAM;UACX3F,KAAK,EAAEvC,WAAY;UACnBiK,QAAQ,EAAE7H,gBAAiB;UAC3B8H,WAAW,EAAC,4EAA4E;UACxFJ,SAAS,EAAC;QAAa;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CAAC,eACFnJ,OAAA;UACEqI,IAAI,EAAC,QAAQ;UACb4B,SAAS,EAAC,eAAe;UACzBK,QAAQ,EAAEpJ,SAAU;UAAAgJ,QAAA,EAEnBhJ,SAAS,GAAG,YAAY,GAAG;QAAY;UAAA8H,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,EAGNnI,MAAM,iBACLhB,OAAA;MAAKiK,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAC5BlJ;IAAM;MAAAgI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CACN,EAEA9I,OAAO,iBACNL,OAAA;MAAKiK,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAE3BlK,OAAA;QAAKiK,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAE3BlK,OAAA;UAAKiK,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BlK,OAAA;YAAIiK,SAAS,EAAC,eAAe;YAAAC,QAAA,EAAC;UAAK;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACxCnJ,OAAA;YAAKiK,SAAS,EAAC,eAAe;YAAAC,QAAA,eAC5BlK,OAAA;cACEiK,SAAS,EAAC,aAAa;cACvBM,GAAG,EAAE,iCAAiClK,OAAO,gBAAiB;cAC9DmK,KAAK,EAAC,sBAAsB;cAC5BC,WAAW,EAAC,GAAG;cACfC,KAAK,EAAC,0FAA0F;cAChGC,eAAe;cACfC,YAAY,EAAEb;YAAiB;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACxB;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP,CAAC,EAGL/H,gBAAgB,KAAK,gBAAgB,iBACpCpB,OAAA;YAAKiK,SAAS,EAAC,kBAAkB;YAAAC,QAAA,EAC9Bd,yBAAyB,CAAC,CAAC,CAACyB,GAAG,CAACpE,IAAI,IACnCgD,cAAc,CAAChD,IAAI,CAAC,iBAClBzG,OAAA;cAAgBiK,SAAS,EAAC,iBAAiB;cAAAC,QAAA,gBACzClK,OAAA;gBAAMiK,SAAS,EAAC,kBAAkB;gBAAAC,QAAA,GAC/BlD,aAAa,CAACP,IAAI,CAAC,EAAC,GACvB;cAAA;gBAAAuC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACPnJ,OAAA;gBACEiK,SAAS,EAAC,cAAc;gBACxBa,KAAK,EAAE;kBACLhJ,UAAU,EAAE2G,aAAa,CAAC,CAAC;kBAC3B7G,QAAQ,EAAE2G,WAAW,CAAC,CAAC;kBACvBwC,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC1G,QAAQ,CAACoC,IAAI,CAAC,GAAG,KAAK,GAAG;gBACnD,CAAE;gBAAAyD,QAAA,EAEDvB,iBAAiB,CAACc,cAAc,CAAChD,IAAI,CAAC,CAAC7B,IAAI;cAAC;gBAAAoE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACzC,CAAC;YAAA,GAbC1C,IAAI;cAAAuC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAcT,CAER;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CACN;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,EAGL,CAAC/H,gBAAgB,KAAK,aAAa,IAAIA,gBAAgB,KAAK,YAAY,KACxEN,kBAAkB,CAACuB,MAAM,GAAG,CAAC,iBAC5BrC,OAAA;UAAKiK,SAAS,EAAE,sBAAsB7I,gBAAgB,KAAK,YAAY,GAAG,YAAY,GAAG,EAAE,EAAG;UAAA8I,QAAA,gBAC5FlK,OAAA;YAAIiK,SAAS,EAAC,eAAe;YAAAC,QAAA,EAAC;UAAQ;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EAE1CC,yBAAyB,CAAC,CAAC,CAACyB,GAAG,CAACpE,IAAI;YAAA,IAAAuE,cAAA;YAAA,oBACnChL,OAAA;cAAgBiK,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC1ClK,OAAA;gBAAIiK,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,GAC3BlD,aAAa,CAACP,IAAI,CAAC,IAAIA,IAAI,EAC3BA,IAAI,KAAKhG,iBAAiB,CAACE,OAAO,GAAG,YAAY,GACjD8F,IAAI,KAAKhG,iBAAiB,CAACG,SAAS,GAAG,cAAc,GACrD6F,IAAI,KAAKhG,iBAAiB,CAACI,QAAQ,GAAG,aAAa,GAAG,EAAE;cAAA;gBAAAmI,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACvD,CAAC,eACLnJ,OAAA;gBACEiK,SAAS,EAAC,kBAAkB;gBAC5Ba,KAAK,EAAE;kBACLhJ,UAAU,EAAE2G,aAAa,CAAC,CAAC;kBAC3B7G,QAAQ,EAAE2G,WAAW,CAAC,CAAC;kBACvBwC,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC1G,QAAQ,CAACoC,IAAI,CAAC,GAAG,KAAK,GAAG;gBACnD,CAAE;gBAAAyD,QAAA,GAAAc,cAAA,GAEDzK,QAAQ,CAACkG,IAAI,CAAC,cAAAuE,cAAA,uBAAdA,cAAA,CAAgBH,GAAG,CAAC,CAACf,OAAO,EAAEmB,KAAK,kBAClCjL,OAAA;kBAEEiK,SAAS,EAAE,gBAAgBV,WAAW,IAAIO,OAAO,CAACzE,KAAK,IAAIkE,WAAW,IAAIO,OAAO,CAACvE,GAAG,GAAG,gBAAgB,GAAG,EAAE,EAAG;kBAAA2E,QAAA,gBAEhHlK,OAAA;oBAAKiK,SAAS,EAAC,WAAW;oBAACa,KAAK,EAAE;sBAAEC,SAAS,EAAE;oBAAM,CAAE;oBAAAb,QAAA,GACpDgB,IAAI,CAACC,KAAK,CAACrB,OAAO,CAACzE,KAAK,GAAG,EAAE,CAAC,EAAC,GAAC,EAAC,CAACyE,OAAO,CAACzE,KAAK,GAAG,EAAE,EAAE+F,OAAO,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAC,IACnF,EAACH,IAAI,CAACC,KAAK,CAACrB,OAAO,CAACvE,GAAG,GAAG,EAAE,CAAC,EAAC,GAAC,EAAC,CAACuE,OAAO,CAACvE,GAAG,GAAG,EAAE,EAAE6F,OAAO,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;kBAAA;oBAAArC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC3E,CAAC,eACNnJ,OAAA;oBAAKiK,SAAS,EAAC,cAAc;oBAAAC,QAAA,EAC1BvB,iBAAiB,CAACmB,OAAO,CAAClF,IAAI;kBAAC;oBAAAoE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC7B,CAAC;gBAAA,GATD8B,KAAK;kBAAAjC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAUP,CACN;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC;YAAA,GA7BE1C,IAAI;cAAAuC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OA8BT,CAAC;UAAA,CACP,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAGNnJ,OAAA;QAAKiK,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC7BlK,OAAA;UAAIiK,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAC;QAAiB;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAGpDnJ,OAAA;UAAKiK,SAAS,EAAC,kBAAkB;UAAAC,QAAA,gBAC/BlK,OAAA;YAAIiK,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAC;UAAgB;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAGpDnJ,OAAA;YAAKiK,SAAS,EAAC,yBAAyB;YAAAC,QAAA,gBACtClK,OAAA;cAAOiK,SAAS,EAAC,gBAAgB;cAAAC,QAAA,EAAC;YAAgB;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC1DnJ,OAAA;cAAKiK,SAAS,EAAC,6BAA6B;cAAAC,QAAA,eAC1ClK,OAAA;gBACE0C,KAAK,EAAEjC,iBAAiB,CAACE,OAAQ;gBACjCyJ,QAAQ,EAAG5H,CAAC,IAAKgE,eAAe,CAAChE,CAAC,CAACC,MAAM,CAACC,KAAK,EAAE,SAAS,CAAE;gBAC5DuH,SAAS,EAAC,mCAAmC;gBAAAC,QAAA,EAE5CpJ,kBAAkB,CAAC+J,GAAG,CAACpE,IAAI,iBAC1BzG,OAAA;kBAAmB0C,KAAK,EAAE+D,IAAK;kBAAAyD,QAAA,EAC5BlD,aAAa,CAACP,IAAI,CAAC,IAAIA;gBAAI,GADjBA,IAAI;kBAAAuC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAET,CACT;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACI;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAGNnJ,OAAA;YAAKiK,SAAS,EAAC,yBAAyB;YAAAC,QAAA,gBACtClK,OAAA;cAAOiK,SAAS,EAAC,gBAAgB;cAAAC,QAAA,EAAC;YAAkB;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC5DnJ,OAAA;cAAKiK,SAAS,EAAC,6BAA6B;cAAAC,QAAA,eAC1ClK,OAAA;gBACE0C,KAAK,EAAEjC,iBAAiB,CAACG,SAAU;gBACnCwJ,QAAQ,EAAG5H,CAAC,IAAKgE,eAAe,CAAChE,CAAC,CAACC,MAAM,CAACC,KAAK,EAAE,WAAW,CAAE;gBAC9DuH,SAAS,EAAC,mCAAmC;gBAAAC,QAAA,gBAE7ClK,OAAA;kBAAQ0C,KAAK,EAAC,EAAE;kBAAAwH,QAAA,EAAC;gBAAI;kBAAAlB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,EAC7BrI,kBAAkB,CAAC+J,GAAG,CAACpE,IAAI,iBAC1BzG,OAAA;kBAAmB0C,KAAK,EAAE+D,IAAK;kBAAAyD,QAAA,EAC5BlD,aAAa,CAACP,IAAI,CAAC,IAAIA;gBAAI,GADjBA,IAAI;kBAAAuC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAET,CACT,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACI;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAGNnJ,OAAA;YAAKiK,SAAS,EAAC,yBAAyB;YAAAC,QAAA,gBACtClK,OAAA;cAAOiK,SAAS,EAAC,gBAAgB;cAAAC,QAAA,EAAC;YAAiB;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC3DnJ,OAAA;cAAKiK,SAAS,EAAC,6BAA6B;cAAAC,QAAA,eAC1ClK,OAAA;gBACE0C,KAAK,EAAEjC,iBAAiB,CAACI,QAAS;gBAClCuJ,QAAQ,EAAG5H,CAAC,IAAKgE,eAAe,CAAChE,CAAC,CAACC,MAAM,CAACC,KAAK,EAAE,UAAU,CAAE;gBAC7DuH,SAAS,EAAC,mCAAmC;gBAAAC,QAAA,gBAE7ClK,OAAA;kBAAQ0C,KAAK,EAAC,EAAE;kBAAAwH,QAAA,EAAC;gBAAI;kBAAAlB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,EAC7BrI,kBAAkB,CAAC+J,GAAG,CAACpE,IAAI,iBAC1BzG,OAAA;kBAAmB0C,KAAK,EAAE+D,IAAK;kBAAAyD,QAAA,EAC5BlD,aAAa,CAACP,IAAI,CAAC,IAAIA;gBAAI,GADjBA,IAAI;kBAAAuC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAET,CACT,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACI;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAGNnJ,OAAA;UAAKiK,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BlK,OAAA;YAAOiK,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAC;UAAiB;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC3DnJ,OAAA;YACE0C,KAAK,EAAEtB,gBAAiB;YACxBgJ,QAAQ,EAAG5H,CAAC,IAAKnB,mBAAmB,CAACmB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;YACrDuH,SAAS,EAAC,iBAAiB;YAAAC,QAAA,gBAE3BlK,OAAA;cAAAkK,QAAA,EAAQ;YAAW;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC5BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAc;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC/BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAU;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAGNnJ,OAAA;UAAKiK,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BlK,OAAA;YAAOiK,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAC;UAAoB;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC9DnJ,OAAA;YACE0C,KAAK,EAAEpB,SAAU;YACjB8I,QAAQ,EAAG5H,CAAC,IAAKjB,YAAY,CAACiB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;YAC9CuH,SAAS,EAAC,iBAAiB;YAAAC,QAAA,gBAE3BlK,OAAA;cAAAkK,QAAA,EAAQ;YAAa;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC9BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAU;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC3BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAY;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC7BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAY;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC7BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAY;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAGNnJ,OAAA;UAAKiK,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BlK,OAAA;YAAOiK,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAC;UAAoB;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC9DnJ,OAAA;YACE0C,KAAK,EAAElB,SAAU;YACjB4I,QAAQ,EAAG5H,CAAC,IAAKf,YAAY,CAACe,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;YAC9CuH,SAAS,EAAC,iBAAiB;YAAAC,QAAA,gBAE3BlK,OAAA;cAAAkK,QAAA,EAAQ;YAAa;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC9BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAU;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC3BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAY;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC7BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAY;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC7BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAY;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAGNnJ,OAAA;UAAKiK,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BlK,OAAA;YAAOiK,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAC;UAAyB;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACnEnJ,OAAA;YACE0C,KAAK,EAAEhB,cAAe;YACtB0I,QAAQ,EAAG5H,CAAC,IAAKb,iBAAiB,CAACa,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;YACnDuH,SAAS,EAAC,iBAAiB;YAAAC,QAAA,gBAE3BlK,OAAA;cAAAkK,QAAA,EAAQ;YAAa;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC9BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAU;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC3BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAY;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC7BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAY;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC7BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAY;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAGNnJ,OAAA;UAAKiK,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BlK,OAAA;YAAOiK,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAC;UAAS;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACnDnJ,OAAA;YACE0C,KAAK,EAAEd,QAAS;YAChBwI,QAAQ,EAAG5H,CAAC,IAAKX,WAAW,CAACW,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;YAC7CuH,SAAS,EAAC,iBAAiB;YAAAC,QAAA,gBAE3BlK,OAAA;cAAAkK,QAAA,EAAQ;YAAK;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACtBnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAM;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACvBnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAK;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACtBnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAO;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAGNnJ,OAAA;UAAKiK,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BlK,OAAA;YAAOiK,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAC;UAAW;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACrDnJ,OAAA;YACE0C,KAAK,EAAEZ,UAAW;YAClBsI,QAAQ,EAAG5H,CAAC,IAAKT,aAAa,CAACS,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;YAC/CuH,SAAS,EAAC,iBAAiB;YAAAC,QAAA,gBAE3BlK,OAAA;cAAAkK,QAAA,EAAQ;YAAU;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC3BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAK;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACtBnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAS;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC1BnJ,OAAA;cAAAkK,QAAA,EAAQ;YAAW;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAGNnJ,OAAA;UAAKiK,SAAS,EAAC,gBAAgB;UAAAC,QAAA,eAC7BlK,OAAA;YACEiK,SAAS,EAAC,eAAe;YACzBqB,OAAO,EAAEA,CAAA,KAAM;cACb,MAAM7H,YAAY,GAAG8H,IAAI,CAACC,SAAS,CAACjL,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;cACtD,MAAMkL,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACjI,YAAY,CAAC,EAAE;gBAAE4E,IAAI,EAAE;cAAmB,CAAC,CAAC;cACnE,MAAMnG,GAAG,GAAGyJ,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;cACrC,MAAMI,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;cACrCF,CAAC,CAACG,IAAI,GAAG9J,GAAG;cACZ2J,CAAC,CAACI,QAAQ,GAAG,YAAY5L,OAAO,OAAO;cACvCwL,CAAC,CAACK,KAAK,CAAC,CAAC;YACX,CAAE;YAAAhC,QAAA,EACH;UAED;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAGDnJ,OAAA;MAAOmM,GAAG;MAAAjC,QAAA,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAAO;MAAAlB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV;AAACjJ,EAAA,CApsBQD,GAAG;AAAAmM,EAAA,GAAHnM,GAAG;AAssBZ,eAAeA,GAAG;AAAC,IAAAmM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}