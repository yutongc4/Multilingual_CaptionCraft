{"ast":null,"code":"var _jsxFileName = \"/Users/arunasrivastava/random/cse482/Multilingual/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// API base URL - change this if your backend is running on a different port/host\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nfunction App() {\n  _s();\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: '',\n    tertiary: ''\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // Customization options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  const [fontSize, setFontSize] = useState('Medium');\n  const [fontFamily, setFontFamily] = useState('Sans Serif');\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = url => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[7].length === 11 ? match[7] : null;\n  };\n\n  // Initialize with the default URL\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n  }, []);\n\n  // Handle YouTube link input\n  const handleLinkChange = e => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async videoId => {\n    try {\n      var _data$transcripts$fin, _data$transcripts$;\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Received data:', data);\n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n\n      // Store the full transcript information\n      setAvailableTranscripts(data.transcripts);\n\n      // Also keep the language codes for backward compatibility\n      const languageCodes = data.transcripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n\n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = ((_data$transcripts$fin = data.transcripts.find(t => t.language_code === 'en')) === null || _data$transcripts$fin === void 0 ? void 0 : _data$transcripts$fin.language_code) || ((_data$transcripts$ = data.transcripts[0]) === null || _data$transcripts$ === void 0 ? void 0 : _data$transcripts$.language_code) || '';\n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: '',\n        tertiary: ''\n      });\n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n\n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n\n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          const data = await response.json();\n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n\n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  // In a real implementation, you would use a proper NLP library\n  const applyPOSTagging = text => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n\n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary, tertiary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = {\n      ...selectedLanguages\n    };\n\n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Get color based on settings\n  const getColor = type => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    switch (type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return '#000000';\n    }\n  };\n\n  // Get font size based on settings\n  const getFontSize = () => {\n    const sizeMap = {\n      'Small': '0.875rem',\n      'Medium': '1rem',\n      'Large': '1.25rem',\n      'X-Large': '1.5rem'\n    };\n    return sizeMap[fontSize] || '1rem';\n  };\n\n  // Get font family based on settings\n  const getFontFamily = () => {\n    const fontMap = {\n      'Sans Serif': 'Arial, Helvetica, sans-serif',\n      'Serif': 'Georgia, Times, serif',\n      'Monospace': 'Courier New, monospace',\n      'Handwriting': 'Comic Sans MS, cursive'\n    };\n    return fontMap[fontFamily] || 'Arial, Helvetica, sans-serif';\n  };\n\n  // Format caption text with styling for parts of speech\n  const formatCaptionText = text => {\n    // Replace tagged parts of speech with styled spans\n    const formattedText = text.replace(/<noun>(.*?)<\\/noun>/g, (match, content) => `<span style=\"color:${getColor('noun')}; text-decoration:underline;\">${content}</span>`).replace(/<verb>(.*?)<\\/verb>/g, (match, content) => `<span style=\"color:${getColor('verb')}; text-decoration:underline;\">${content}</span>`).replace(/<adjective>(.*?)<\\/adjective>/g, (match, content) => `<span style=\"color:${getColor('adjective')}; text-decoration:underline;\">${content}</span>`);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      dangerouslySetInnerHTML: {\n        __html: formattedText\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 12\n    }, this);\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(caption => currentTime >= caption.start && currentTime <= caption.end);\n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n\n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n\n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = code => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"YouTube Multilingual Captions Extractor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: youtubeLink,\n          onChange: handleLinkChange,\n          placeholder: \"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\",\n          className: \"input-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'Load Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-message\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 9\n    }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"youtube-player\",\n              className: \"video-frame\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 15\n          }, this), captionPlacement === 'Overlay Bottom' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"captions-overlay\",\n            children: getSelectedLanguagesArray().map(lang => {\n              var _findTranscriptByLang;\n              return activeCaptions[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"overlay-caption\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"overlay-language\",\n                  children: [((_findTranscriptByLang = findTranscriptByLanguageCode(lang)) === null || _findTranscriptByLang === void 0 ? void 0 : _findTranscriptByLang.language) || lang, \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 432,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"overlay-text\",\n                  style: {\n                    fontFamily: getFontFamily(),\n                    fontSize: getFontSize(),\n                    direction: ['ar', 'fa', 'he', 'ur'].includes(lang) ? 'rtl' : 'ltr'\n                  },\n                  children: formatCaptionText(activeCaptions[lang].text)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 435,\n                  columnNumber: 25\n                }, this)]\n              }, lang, true, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }, this), (captionPlacement === 'Below Video' || captionPlacement === 'Side Panel') && availableLanguages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `captions-container ${captionPlacement === 'Side Panel' ? 'side-panel' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Captions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"active-captions-section\",\n            children: getSelectedLanguagesArray().map(lang => {\n              const transcript = findTranscriptByLanguageCode(lang);\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"active-caption-display\",\n                style: {\n                  fontFamily: getFontFamily(),\n                  fontSize: getFontSize(),\n                  padding: '10px',\n                  marginBottom: '15px',\n                  backgroundColor: '#f0f8ff',\n                  border: '1px solid #007bff',\n                  borderRadius: '5px'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"language-title\",\n                  style: {\n                    margin: '0 0 5px 0'\n                  },\n                  children: [(transcript === null || transcript === void 0 ? void 0 : transcript.language) || lang, lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : lang === selectedLanguages.tertiary ? ' (Tertiary)' : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 475,\n                  columnNumber: 25\n                }, this), activeCaptions[lang] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"timestamp\",\n                    style: {\n                      direction: 'ltr',\n                      fontWeight: 'bold'\n                    },\n                    children: [Math.floor(activeCaptions[lang].start / 60), \":\", (activeCaptions[lang].start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(activeCaptions[lang].end / 60), \":\", (activeCaptions[lang].end % 60).toFixed(1).padStart(4, '0')]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 484,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"caption-text\",\n                    style: {\n                      direction: ['ar', 'fa', 'he', 'ur'].includes(lang) ? 'rtl' : 'ltr'\n                    },\n                    children: formatCaptionText(activeCaptions[lang].text)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 490,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"no-caption\",\n                  children: \"No caption at current timestamp\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 497,\n                  columnNumber: 27\n                }, this)]\n              }, `active-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 464,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transcripts-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"section-subtitle\",\n              children: \"Full Transcripts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _captions$lang;\n              const transcript = findTranscriptByLanguageCode(lang);\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"language-title\",\n                  children: [(transcript === null || transcript === void 0 ? void 0 : transcript.language) || lang, lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : lang === selectedLanguages.tertiary ? ' (Tertiary)' : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 512,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"captions-content\",\n                  style: {\n                    fontFamily: getFontFamily(),\n                    fontSize: getFontSize(),\n                    direction: ['ar', 'fa', 'he', 'ur'].includes(lang) ? 'rtl' : 'ltr',\n                    maxHeight: '300px',\n                    overflowY: 'auto',\n                    marginBottom: '20px'\n                  },\n                  children: (_captions$lang = captions[lang]) === null || _captions$lang === void 0 ? void 0 : _captions$lang.map((caption, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`,\n                    onClick: () => {\n                      if (window.player && window.player.seekTo) {\n                        window.player.seekTo(caption.start);\n                      }\n                    },\n                    style: {\n                      cursor: 'pointer'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"timestamp\",\n                      style: {\n                        direction: 'ltr'\n                      },\n                      children: [Math.floor(caption.start / 60), \":\", (caption.start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(caption.end / 60), \":\", (caption.end % 60).toFixed(1).padStart(4, '0')]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 542,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"caption-text\",\n                      children: formatCaptionText(caption.text)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 546,\n                      columnNumber: 31\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 532,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 520,\n                  columnNumber: 25\n                }, this)]\n              }, `transcript-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 23\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: \"Customize Display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"settings-title\",\n            children: \"Select Languages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Primary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 570,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedLanguages.primary,\n                onChange: e => setLanguageRank(e.target.value, 'primary'),\n                className: \"settings-select language-dropdown\",\n                children: availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: transcript.language_code,\n                  children: transcript.language\n                }, transcript.language_code, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 578,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 572,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Secondary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedLanguages.secondary,\n                onChange: e => setLanguageRank(e.target.value, 'secondary'),\n                className: \"settings-select language-dropdown\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 595,\n                  columnNumber: 21\n                }, this), availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: transcript.language_code,\n                  children: transcript.language\n                }, transcript.language_code, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 597,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 590,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Tertiary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 607,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedLanguages.tertiary,\n                onChange: e => setLanguageRank(e.target.value, 'tertiary'),\n                className: \"settings-select language-dropdown\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 614,\n                  columnNumber: 21\n                }, this), availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: transcript.language_code,\n                  children: transcript.language\n                }, transcript.language_code, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 616,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 609,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 608,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Caption Placement\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: captionPlacement,\n            onChange: e => setCaptionPlacement(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Below Video\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 633,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Overlay Bottom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 634,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Side Panel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Noun Underline Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: nounColor,\n            onChange: e => setNounColor(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Electric Blue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 647,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Cherry Red\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Forest Green\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 649,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Sunny Yellow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 650,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Royal Purple\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 651,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 642,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Verb Underline Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: verbColor,\n            onChange: e => setVerbColor(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Electric Blue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Cherry Red\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Forest Green\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Sunny Yellow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 666,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Royal Purple\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 667,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Adjective Underline Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: adjectiveColor,\n            onChange: e => setAdjectiveColor(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Electric Blue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 679,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Cherry Red\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 680,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Forest Green\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 681,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Sunny Yellow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 682,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Royal Purple\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 683,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Font Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: fontSize,\n            onChange: e => setFontSize(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Medium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"X-Large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Font Family\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: fontFamily,\n            onChange: e => setFontFamily(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Sans Serif\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 710,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Serif\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 711,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Monospace\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 712,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Handwriting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 713,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"export-section\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"export-button\",\n            onClick: () => {\n              const captionsData = JSON.stringify(captions, null, 2);\n              const blob = new Blob([captionsData], {\n                type: 'application/json'\n              });\n              const url = URL.createObjectURL(blob);\n              const a = document.createElement('a');\n              a.href = url;\n              a.download = `captions-${videoId}.json`;\n              a.click();\n            },\n            children: \"Export Captions as JSON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 719,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .captions-overlay {\n          position: absolute;\n          bottom: 10px;\n          left: 10px;\n          right: 10px;\n          background-color: rgba(0, 0, 0, 0.7);\n          color: white;\n          padding: 10px;\n          border-radius: 5px;\n          z-index: 10;\n        }\n        \n        .overlay-caption {\n          margin-bottom: 5px;\n        }\n        \n        .overlay-language {\n          font-weight: bold;\n          margin-right: 5px;\n        }\n        \n        .side-panel {\n          position: absolute;\n          top: 0;\n          right: 0;\n          width: 300px;\n          height: 100%;\n          overflow-y: auto;\n          background-color: #f8f9fa;\n          padding: 10px;\n          border-left: 1px solid #ddd;\n        }\n        \n        .active-caption {\n          background-color: #f0f8ff;\n          border-left: 3px solid #007bff;\n          padding-left: 10px;\n        }\n        \n        .caption-item {\n          padding: 8px;\n          border-bottom: 1px solid #eee;\n          transition: background-color 0.3s;\n        }\n        \n        .caption-item:hover {\n          background-color: #f5f5f5;\n        }\n        \n        .timestamp {\n          font-size: 0.8em;\n          color: #666;\n          margin-bottom: 3px;\n        }\n        \n        .caption-text {\n          line-height: 1.4;\n        }\n        \n        .no-caption {\n          color: #999;\n          font-style: italic;\n        }\n        \n        .active-caption-display {\n          position: relative;\n        }\n        \n        .video-frame {\n          width: 100%;\n          height: 400px;\n        }\n        \n        .active-captions-section {\n          margin-bottom: 30px;\n          padding-bottom: 20px;\n          border-bottom: 2px solid #eee;\n        }\n        \n        .section-subtitle {\n          font-size: 1.2rem;\n          margin-bottom: 15px;\n          color: #333;\n          border-bottom: 1px solid #ddd;\n          padding-bottom: 5px;\n        }\n        \n        .transcripts-section {\n          margin-top: 10px;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 739,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"aq7OZTr+cOle+uPU3pQvBu/5znY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","App","_s","youtubeLink","setYoutubeLink","videoId","setVideoId","captions","setCaptions","selectedLanguages","setSelectedLanguages","primary","secondary","tertiary","availableLanguages","setAvailableLanguages","availableTranscripts","setAvailableTranscripts","status","setStatus","isLoading","setIsLoading","currentTime","setCurrentTime","activeCaptions","setActiveCaptions","captionPlacement","setCaptionPlacement","nounColor","setNounColor","verbColor","setVerbColor","adjectiveColor","setAdjectiveColor","fontSize","setFontSize","fontFamily","setFontFamily","extractVideoId","url","regExp","match","length","id","handleLinkChange","e","target","value","handleSubmit","preventDefault","fetchAvailableLanguages","_data$transcripts$fin","_data$transcripts$","console","log","response","fetch","ok","errorText","text","error","Error","data","json","transcripts","languageCodes","map","t","language_code","defaultPrimary","find","fetchCaptions","message","languages","captionsData","lang","warn","processedTranscript","transcript","caption","applyPOSTagging","end","start","duration","Object","keys","commonNouns","commonVerbs","commonAdjectives","words","split","taggedText","i","originalWord","word","toLowerCase","replace","includes","setLanguageRank","rank","updatedLanguages","forEach","key","getColor","type","colorMap","getFontSize","sizeMap","getFontFamily","fontMap","formatCaptionText","formattedText","content","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","getSelectedLanguagesArray","values","filter","newActiveCaptions","activeCaption","interval","setInterval","window","YT","Player","player","getCurrentTime","clearInterval","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","createYouTubePlayer","destroy","events","onPlayerReady","onPlayerStateChange","event","PlayerState","PLAYING","updateTime","getPlayerState","requestAnimationFrame","findTranscriptByLanguageCode","code","className","children","onSubmit","onChange","placeholder","disabled","_findTranscriptByLang","language","style","direction","padding","marginBottom","backgroundColor","border","borderRadius","margin","fontWeight","Math","floor","toFixed","padStart","_captions$lang","maxHeight","overflowY","index","onClick","seekTo","cursor","JSON","stringify","blob","Blob","URL","createObjectURL","a","href","download","click","jsx","_c","$RefreshReg$"],"sources":["/Users/arunasrivastava/random/cse482/Multilingual/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// API base URL - change this if your backend is running on a different port/host\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n\nfunction App() {\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: '',\n    tertiary: ''\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // Customization options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  const [fontSize, setFontSize] = useState('Medium');\n  const [fontFamily, setFontFamily] = useState('Sans Serif');\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = (url) => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[7].length === 11) ? match[7] : null;\n  };\n\n  // Initialize with the default URL\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n  }, []);\n\n  // Handle YouTube link input\n  const handleLinkChange = (e) => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async (videoId) => {\n    try {\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Received data:', data);\n      \n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Store the full transcript information\n      setAvailableTranscripts(data.transcripts);\n      \n      // Also keep the language codes for backward compatibility\n      const languageCodes = data.transcripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n      \n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = data.transcripts.find(t => t.language_code === 'en')?.language_code \n        || (data.transcripts[0]?.language_code || '');\n        \n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: '',\n        tertiary: ''\n      });\n      \n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n      \n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n      \n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n      \n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          \n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          \n          const data = await response.json();\n          \n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n          \n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          \n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      \n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  // In a real implementation, you would use a proper NLP library\n  const applyPOSTagging = (text) => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n    \n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      \n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      \n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary, tertiary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = { ...selectedLanguages };\n    \n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Get color based on settings\n  const getColor = (type) => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    \n    switch(type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return '#000000';\n    }\n  };\n\n  // Get font size based on settings\n  const getFontSize = () => {\n    const sizeMap = {\n      'Small': '0.875rem',\n      'Medium': '1rem',\n      'Large': '1.25rem',\n      'X-Large': '1.5rem'\n    };\n    \n    return sizeMap[fontSize] || '1rem';\n  };\n\n  // Get font family based on settings\n  const getFontFamily = () => {\n    const fontMap = {\n      'Sans Serif': 'Arial, Helvetica, sans-serif',\n      'Serif': 'Georgia, Times, serif',\n      'Monospace': 'Courier New, monospace',\n      'Handwriting': 'Comic Sans MS, cursive'\n    };\n    \n    return fontMap[fontFamily] || 'Arial, Helvetica, sans-serif';\n  };\n\n  // Format caption text with styling for parts of speech\n  const formatCaptionText = (text) => {\n    // Replace tagged parts of speech with styled spans\n    const formattedText = text\n      .replace(/<noun>(.*?)<\\/noun>/g, (match, content) => \n        `<span style=\"color:${getColor('noun')}; text-decoration:underline;\">${content}</span>`)\n      .replace(/<verb>(.*?)<\\/verb>/g, (match, content) => \n        `<span style=\"color:${getColor('verb')}; text-decoration:underline;\">${content}</span>`)\n      .replace(/<adjective>(.*?)<\\/adjective>/g, (match, content) => \n        `<span style=\"color:${getColor('adjective')}; text-decoration:underline;\">${content}</span>`);\n    \n    return <span dangerouslySetInnerHTML={{ __html: formattedText }} />;\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    \n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(\n          caption => currentTime >= caption.start && currentTime <= caption.end\n        );\n        \n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    \n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n    \n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    \n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      \n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    \n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      \n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    \n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    \n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    \n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = (code) => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"app-title\">YouTube Multilingual Captions Extractor</h1>\n      \n      {/* Input Box */}\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={youtubeLink}\n            onChange={handleLinkChange}\n            placeholder=\"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\"\n            className=\"input-field\"\n          />\n          <button \n            type=\"submit\"\n            className=\"submit-button\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load Video'}\n          </button>\n        </div>\n      </form>\n      \n      {/* Status message */}\n      {status && (\n        <div className=\"status-message\">\n          {status}\n        </div>\n      )}\n      \n      {videoId && (\n        <div className=\"main-content\">\n          {/* Main Content Area (Video + Captions) */}\n          <div className=\"content-area\">\n            {/* Video Embed Box */}\n            <div className=\"video-container\">\n              <h2 className=\"section-title\">Video</h2>\n              <div className=\"video-wrapper\">\n                {/* Changed to use YouTube API for better time synchronization */}\n                <div id=\"youtube-player\" className=\"video-frame\"></div>\n              </div>\n              \n              {/* Real-time captions overlay */}\n              {captionPlacement === 'Overlay Bottom' && (\n                <div className=\"captions-overlay\">\n                  {getSelectedLanguagesArray().map(lang => (\n                    activeCaptions[lang] && (\n                      <div key={lang} className=\"overlay-caption\">\n                        <span className=\"overlay-language\">\n                          {findTranscriptByLanguageCode(lang)?.language || lang}:\n                        </span>\n                        <span \n                          className=\"overlay-text\"\n                          style={{\n                            fontFamily: getFontFamily(),\n                            fontSize: getFontSize(),\n                            direction: ['ar', 'fa', 'he', 'ur'].includes(lang) ? 'rtl' : 'ltr'\n                          }}\n                        >\n                          {formatCaptionText(activeCaptions[lang].text)}\n                        </span>\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Captions Display - for Below Video or Side Panel modes */}\n            {(captionPlacement === 'Below Video' || captionPlacement === 'Side Panel') && \n             availableLanguages.length > 0 && (\n              <div className={`captions-container ${captionPlacement === 'Side Panel' ? 'side-panel' : ''}`}>\n                <h2 className=\"section-title\">Captions</h2>\n                \n                {/* Current active captions section - all languages together */}\n                <div className=\"active-captions-section\">\n                  \n                  {getSelectedLanguagesArray().map(lang => {\n                    const transcript = findTranscriptByLanguageCode(lang);\n                    return (\n                      <div key={`active-${lang}`} className=\"active-caption-display\"\n                        style={{\n                          fontFamily: getFontFamily(),\n                          fontSize: getFontSize(),\n                          padding: '10px',\n                          marginBottom: '15px',\n                          backgroundColor: '#f0f8ff',\n                          border: '1px solid #007bff',\n                          borderRadius: '5px'\n                        }}\n                      >\n                        <h4 className=\"language-title\" style={{ margin: '0 0 5px 0' }}>\n                          {transcript?.language || lang} \n                          {lang === selectedLanguages.primary ? ' (Primary)' : \n                           lang === selectedLanguages.secondary ? ' (Secondary)' : \n                           lang === selectedLanguages.tertiary ? ' (Tertiary)' : ''}\n                        </h4>\n                        \n                        {activeCaptions[lang] ? (\n                          <>\n                            <div className=\"timestamp\" style={{ direction: 'ltr', fontWeight: 'bold' }}>\n                              {Math.floor(activeCaptions[lang].start / 60)}:\n                              {(activeCaptions[lang].start % 60).toFixed(1).padStart(4, '0')} - \n                              {Math.floor(activeCaptions[lang].end / 60)}:\n                              {(activeCaptions[lang].end % 60).toFixed(1).padStart(4, '0')}\n                            </div>\n                            <div className=\"caption-text\" style={{ \n                              direction: ['ar', 'fa', 'he', 'ur'].includes(lang) ? 'rtl' : 'ltr'\n                            }}>\n                              {formatCaptionText(activeCaptions[lang].text)}\n                            </div>\n                          </>\n                        ) : (\n                          <span className=\"no-caption\">No caption at current timestamp</span>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n                \n                {/* Transcripts section - all languages */}\n                <div className=\"transcripts-section\">\n                  <h3 className=\"section-subtitle\">Full Transcripts</h3>\n                  \n                  {getSelectedLanguagesArray().map(lang => {\n                    const transcript = findTranscriptByLanguageCode(lang);\n                    return (\n                      <div key={`transcript-${lang}`} className=\"language-section\">\n                        <h4 className=\"language-title\">\n                          {transcript?.language || lang} \n                          {lang === selectedLanguages.primary ? ' (Primary)' : \n                           lang === selectedLanguages.secondary ? ' (Secondary)' : \n                           lang === selectedLanguages.tertiary ? ' (Tertiary)' : ''}\n                        </h4>\n                        \n                        {/* Full transcript */}\n                        <div \n                          className=\"captions-content\"\n                          style={{\n                            fontFamily: getFontFamily(),\n                            fontSize: getFontSize(),\n                            direction: ['ar', 'fa', 'he', 'ur'].includes(lang) ? 'rtl' : 'ltr',\n                            maxHeight: '300px',\n                            overflowY: 'auto',\n                            marginBottom: '20px'\n                          }}\n                        >\n                          {captions[lang]?.map((caption, index) => (\n                            <div \n                              key={index} \n                              className={`caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`}\n                              onClick={() => {\n                                if (window.player && window.player.seekTo) {\n                                  window.player.seekTo(caption.start);\n                                }\n                              }}\n                              style={{ cursor: 'pointer' }}\n                            >\n                              <div className=\"timestamp\" style={{ direction: 'ltr' }}>\n                                {Math.floor(caption.start / 60)}:{(caption.start % 60).toFixed(1).padStart(4, '0')} - \n                                {Math.floor(caption.end / 60)}:{(caption.end % 60).toFixed(1).padStart(4, '0')}\n                              </div>\n                              <div className=\"caption-text\">\n                                {formatCaptionText(caption.text)}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Customization Panel */}\n          <div className=\"settings-panel\">\n            <h2 className=\"section-title\">Customize Display</h2>\n            \n            {/* Language Selection - Updated with ranked dropdowns */}\n            <div className=\"settings-section\">\n              <h3 className=\"settings-title\">Select Languages</h3>\n              \n              {/* Primary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\">Primary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    value={selectedLanguages.primary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'primary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    {availableTranscripts.map(transcript => (\n                      <option key={transcript.language_code} value={transcript.language_code}>\n                        {transcript.language}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              \n              {/* Secondary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\">Secondary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    value={selectedLanguages.secondary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'secondary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    <option value=\"\">None</option>\n                    {availableTranscripts.map(transcript => (\n                      <option key={transcript.language_code} value={transcript.language_code}>\n                        {transcript.language}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              \n              {/* Tertiary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\">Tertiary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    value={selectedLanguages.tertiary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'tertiary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    <option value=\"\">None</option>\n                    {availableTranscripts.map(transcript => (\n                      <option key={transcript.language_code} value={transcript.language_code}>\n                        {transcript.language}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n            \n            {/* Caption Placement */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Caption Placement</label>\n              <select \n                value={captionPlacement} \n                onChange={(e) => setCaptionPlacement(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Below Video</option>\n                <option>Overlay Bottom</option>\n                <option>Side Panel</option>\n              </select>\n            </div>\n            \n            {/* Noun Underline Color */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Noun Underline Color</label>\n              <select \n                value={nounColor} \n                onChange={(e) => setNounColor(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Electric Blue</option>\n                <option>Cherry Red</option>\n                <option>Forest Green</option>\n                <option>Sunny Yellow</option>\n                <option>Royal Purple</option>\n              </select>\n            </div>\n            \n            {/* Verb Underline Color */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Verb Underline Color</label>\n              <select \n                value={verbColor} \n                onChange={(e) => setVerbColor(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Electric Blue</option>\n                <option>Cherry Red</option>\n                <option>Forest Green</option>\n                <option>Sunny Yellow</option>\n                <option>Royal Purple</option>\n              </select>\n            </div>\n            \n            {/* Adjective Underline Color */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Adjective Underline Color</label>\n              <select \n                value={adjectiveColor} \n                onChange={(e) => setAdjectiveColor(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Electric Blue</option>\n                <option>Cherry Red</option>\n                <option>Forest Green</option>\n                <option>Sunny Yellow</option>\n                <option>Royal Purple</option>\n              </select>\n            </div>\n            \n            {/* Font Size */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Font Size</label>\n              <select \n                value={fontSize} \n                onChange={(e) => setFontSize(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Small</option>\n                <option>Medium</option>\n                <option>Large</option>\n                <option>X-Large</option>\n              </select>\n            </div>\n            \n            {/* Font Family */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Font Family</label>\n              <select \n                value={fontFamily} \n                onChange={(e) => setFontFamily(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Sans Serif</option>\n                <option>Serif</option>\n                <option>Monospace</option>\n                <option>Handwriting</option>\n              </select>\n            </div>\n            \n            {/* Export button */}\n            <div className=\"export-section\">\n              <button \n                className=\"export-button\"\n                onClick={() => {\n                  const captionsData = JSON.stringify(captions, null, 2);\n                  const blob = new Blob([captionsData], { type: 'application/json' });\n                  const url = URL.createObjectURL(blob);\n                  const a = document.createElement('a');\n                  a.href = url;\n                  a.download = `captions-${videoId}.json`;\n                  a.click();\n                }}\n              >\n                Export Captions as JSON\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Additional CSS for new features */}\n      <style jsx>{`\n        .captions-overlay {\n          position: absolute;\n          bottom: 10px;\n          left: 10px;\n          right: 10px;\n          background-color: rgba(0, 0, 0, 0.7);\n          color: white;\n          padding: 10px;\n          border-radius: 5px;\n          z-index: 10;\n        }\n        \n        .overlay-caption {\n          margin-bottom: 5px;\n        }\n        \n        .overlay-language {\n          font-weight: bold;\n          margin-right: 5px;\n        }\n        \n        .side-panel {\n          position: absolute;\n          top: 0;\n          right: 0;\n          width: 300px;\n          height: 100%;\n          overflow-y: auto;\n          background-color: #f8f9fa;\n          padding: 10px;\n          border-left: 1px solid #ddd;\n        }\n        \n        .active-caption {\n          background-color: #f0f8ff;\n          border-left: 3px solid #007bff;\n          padding-left: 10px;\n        }\n        \n        .caption-item {\n          padding: 8px;\n          border-bottom: 1px solid #eee;\n          transition: background-color 0.3s;\n        }\n        \n        .caption-item:hover {\n          background-color: #f5f5f5;\n        }\n        \n        .timestamp {\n          font-size: 0.8em;\n          color: #666;\n          margin-bottom: 3px;\n        }\n        \n        .caption-text {\n          line-height: 1.4;\n        }\n        \n        .no-caption {\n          color: #999;\n          font-style: italic;\n        }\n        \n        .active-caption-display {\n          position: relative;\n        }\n        \n        .video-frame {\n          width: 100%;\n          height: 400px;\n        }\n        \n        .active-captions-section {\n          margin-bottom: 30px;\n          padding-bottom: 20px;\n          border-bottom: 2px solid #eee;\n        }\n        \n        .section-subtitle {\n          font-size: 1.2rem;\n          margin-bottom: 15px;\n          color: #333;\n          border-bottom: 1px solid #ddd;\n          padding-bottom: 5px;\n        }\n        \n        .transcripts-section {\n          margin-top: 10px;\n        }\n      `}</style>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}