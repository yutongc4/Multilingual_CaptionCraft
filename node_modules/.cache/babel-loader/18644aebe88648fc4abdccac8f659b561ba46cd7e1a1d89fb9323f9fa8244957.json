{"ast":null,"code":"var _jsxFileName = \"/Users/arunasrivastava/random/cse482/Multilingual/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// API base URL - change this if your backend is running on a different port/host\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nfunction App() {\n  _s();\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n    // tertiary language removed\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n\n  // Add missing hiddenLanguages state\n  const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n\n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50,\n    // percentage\n    y: 80,\n    // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0\n  });\n\n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n\n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n\n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n\n  // New state for UI enhancements\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n  const [captionsHeight, setCaptionsHeight] = useState('normal');\n\n  // Refs\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const videoResizeHandleRef = useRef(null);\n  const captionsResizeHandleRef = useRef(null);\n  const activeResizeRef = useRef(null);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = url => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[7].length === 11 ? match[7] : null;\n  };\n\n  // Toggle settings panel collapse\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]);\n\n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = lang => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n\n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n\n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n\n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = {\n      ...languageCustomizations\n    };\n\n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 'Large',\n          // Updated default: larger font\n          fontWeight: 'bold',\n          // Added default: bold text\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 'normal'\n        };\n      }\n    });\n    setLanguageCustomizations(newLanguageCustomizations);\n  }, [selectedLanguages, darkMode, languageCustomizations]);\n\n  // Add this function to toggle language visibility\n  const toggleLanguageVisibility = lang => {\n    setHiddenLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = {\n      ...languageCustomizations\n    };\n    Object.keys(updatedCustomizations).forEach(lang => {\n      var _updatedCustomization, _updatedCustomization2;\n      if (((_updatedCustomization = updatedCustomizations[lang]) === null || _updatedCustomization === void 0 ? void 0 : _updatedCustomization.textColor) === '#000000' || ((_updatedCustomization2 = updatedCustomizations[lang]) === null || _updatedCustomization2 === void 0 ? void 0 : _updatedCustomization2.textColor) === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n      }\n    });\n    setLanguageCustomizations(updatedCustomizations);\n  }, [darkMode, languageCustomizations]);\n\n  // Set up video container resize functionality\n  useEffect(() => {\n    if (!videoId) return;\n    const videoContainer = videoContainerRef.current;\n    const resizeHandle = videoResizeHandleRef.current;\n    if (!videoContainer || !resizeHandle) return;\n    const handleMouseDown = e => {\n      e.preventDefault();\n\n      // Save initial position and dimensions\n      const startX = e.clientX;\n      const startWidth = videoContainer.offsetWidth;\n      activeResizeRef.current = 'video';\n      const handleMouseMove = moveEvent => {\n        if (activeResizeRef.current !== 'video') return;\n\n        // Calculate new width based on mouse movement\n        const deltaX = moveEvent.clientX - startX;\n        const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n\n        // Set width\n        videoContainer.style.width = `${newWidth}px`;\n\n        // Update the video wrapper's padding-top to maintain aspect ratio\n        const videoWrapper = videoContainer.querySelector('.video-wrapper');\n        if (videoWrapper) {\n          // No need to explicitly set height - padding-top maintains ratio\n          videoWrapper.style.paddingTop = `${9 / 16 * 100}%`; // Keep 16:9 ratio\n        }\n        moveEvent.preventDefault();\n      };\n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    return () => {\n      if (resizeHandle) {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      }\n    };\n  }, [videoId]);\n\n  // Set up captions container resize functionality\n  useEffect(() => {\n    if (!captionsResizeHandleRef.current) return;\n    const resizeHandle = captionsResizeHandleRef.current;\n    const handleMouseDown = e => {\n      e.preventDefault();\n\n      // Find the active captions section\n      const captionsSection = document.querySelector('.active-captions-section');\n      if (!captionsSection) return;\n\n      // Save initial position and dimensions\n      const startY = e.clientY;\n      const startHeight = captionsSection.offsetHeight;\n      activeResizeRef.current = 'captions';\n      const handleMouseMove = moveEvent => {\n        if (activeResizeRef.current !== 'captions') return;\n\n        // Calculate new height\n        const height = startHeight + (moveEvent.clientY - startY);\n\n        // Apply new height with min constraint\n        if (height > 100) {\n          captionsSection.style.height = `${height}px`;\n          captionsSection.style.maxHeight = `${height}px`;\n        }\n        moveEvent.preventDefault();\n      };\n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    return () => {\n      resizeHandle.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [availableLanguages.length]);\n\n  // Handle YouTube link input\n  const handleLinkChange = e => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async videoId => {\n    try {\n      var _data$transcripts$fin, _data$transcripts$;\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Received data:', data);\n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n\n      // Store the full transcript information\n      setAvailableTranscripts(data.transcripts);\n\n      // Also keep the language codes for backward compatibility\n      const languageCodes = data.transcripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n\n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = ((_data$transcripts$fin = data.transcripts.find(t => t.language_code === 'en')) === null || _data$transcripts$fin === void 0 ? void 0 : _data$transcripts$fin.language_code) || ((_data$transcripts$ = data.transcripts[0]) === null || _data$transcripts$ === void 0 ? void 0 : _data$transcripts$.language_code) || '';\n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: ''\n      });\n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n\n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n\n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          const data = await response.json();\n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n\n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = text => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n\n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = {\n      ...selectedLanguages\n    };\n\n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => ({\n      ...prev,\n      [lang]: {\n        ...prev[lang],\n        [property]: value\n      }\n    }));\n  };\n\n  // Get color based on settings\n  const getColor = type => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    switch (type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return darkMode ? '#FFFFFF' : '#000000';\n    }\n  };\n\n  // Get font size based on settings\n  const getFontSize = sizeOption => {\n    const sizeMap = {\n      'Small': '0.875rem',\n      'Medium': '1rem',\n      'Large': '1.25rem',\n      'X-Large': '1.5rem'\n    };\n    return sizeMap[sizeOption] || '1.25rem'; // Default to Large\n  };\n\n  // Get font weight based on settings\n  const getFontWeight = weightOption => {\n    return weightOption || 'bold'; // Default to bold\n  };\n\n  // Get font family based on settings\n  const getFontFamily = fontOption => {\n    const fontMap = {\n      'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n      'Roboto': 'Roboto, Arial, sans-serif',\n      'Open Sans': 'Open Sans, Arial, sans-serif',\n      'Noto Sans': 'Noto Sans, Arial, sans-serif',\n      'Verdana': 'Verdana, Geneva, sans-serif',\n      'Courier New': 'Courier New, monospace',\n      'Consolas': 'Consolas, monospace',\n      'Source Code Pro': 'Source Code Pro, monospace',\n      'Sans Serif': 'Arial, Helvetica, sans-serif',\n      'Serif': 'Georgia, Times, serif',\n      'Monospace': 'Courier New, monospace',\n      'Handwriting': 'Comic Sans MS, cursive'\n    };\n    return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n  };\n\n  // Format caption text with styling for parts of speech\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial / Helvetica',\n      fontSize: 'Large',\n      fontWeight: 'bold',\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 'normal'\n    };\n\n    // Create a plain wrapper for text without POS tags\n    const fontStyle = {\n      fontFamily: getFontFamily(customization.fontFamily),\n      fontSize: getFontSize(customization.fontSize),\n      fontWeight: getFontWeight(customization.fontWeight),\n      color: darkMode ? '#FFFFFF' : customization.textColor,\n      letterSpacing: customization.letterSpacing,\n      display: 'inline'\n    };\n\n    // Replace POS tags with styled spans\n    let formattedContent = text;\n    formattedContent = formattedContent.replace(/<noun>(.*?)<\\/noun>/g, (_, content) => `<span class=\"pos-tag noun\">${content}</span>`);\n    formattedContent = formattedContent.replace(/<verb>(.*?)<\\/verb>/g, (_, content) => `<span class=\"pos-tag verb\">${content}</span>`);\n    formattedContent = formattedContent.replace(/<adjective>(.*?)<\\/adjective>/g, (_, content) => `<span class=\"pos-tag adjective\">${content}</span>`);\n\n    // Create a style tag for POS highlighting that will be unique to this text\n    const styleId = `style-${Math.random().toString(36).substr(2, 9)}`;\n    const styleTag = `\n      <style id=\"${styleId}\">\n        .pos-tag {\n          text-decoration: underline;\n        }\n        .pos-tag.noun {\n          color: ${getColor('noun')} !important;\n        }\n        .pos-tag.verb {\n          color: ${getColor('verb')} !important;\n        }\n        .pos-tag.adjective {\n          color: ${getColor('adjective')} !important;\n        }\n      </style>\n    `;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"caption-wrapper\",\n      style: fontStyle,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        dangerouslySetInnerHTML: {\n          __html: styleTag + formattedContent\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = lang => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    return {\n      fontFamily: getFontFamily(customization.fontFamily || 'Arial / Helvetica'),\n      fontSize: getFontSize(customization.fontSize || 'Large'),\n      fontWeight: getFontWeight(customization.fontWeight || 'bold'),\n      color: darkMode ? '#FFFFFF' : customization.textColor || '#000000',\n      letterSpacing: customization.letterSpacing || 'normal',\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(caption => currentTime >= caption.start && currentTime <= caption.end);\n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n\n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n\n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = code => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = langCode => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return (transcript === null || transcript === void 0 ? void 0 : transcript.language) || langCode;\n  };\n\n  // Start dragging the caption overlay\n  const handleMouseDown = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n\n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n\n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n\n  // Handle mouse move during dragging - Completely redesigned for immediate, direct movement\n  const handleMouseMove = e => {\n    if (!overlayPosition.isDragging) return;\n\n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate direct position as percentage of container\n    // This immediately places the overlay where the mouse is instead of incremental movement\n    const newX = Math.max(0, Math.min(100, (e.clientX - rect.left) / rect.width * 100));\n    const newY = Math.max(0, Math.min(100, (e.clientY - rect.top) / rect.height * 100));\n\n    // Update position with direct placement for more intuitive movement\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n\n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n\n  // Stop dragging\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle touch start for mobile devices\n  const handleTouchStart = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n\n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', handleTouchEnd);\n\n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n\n  // Handle touch move for mobile devices\n  const handleTouchMove = e => {\n    if (!overlayPosition.isDragging) return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate touch movement delta\n    const deltaX = touch.clientX - overlayPosition.startX;\n    const deltaY = touch.clientY - overlayPosition.startY;\n\n    // Calculate new position in percentage\n    const newX = Math.max(0, Math.min(100, overlayPosition.x + deltaX / rect.width * 100));\n    const newY = Math.max(0, Math.min(100, overlayPosition.y + deltaY / rect.height * 100));\n\n    // Update position and starting points for next movement calculation\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n\n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n\n  // Handle touch end for mobile devices\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n\n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n\n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = time => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"YouTube Multilingual Captions Extractor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 871,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dark-mode-toggle\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"toggle-checkbox\",\n          type: \"checkbox\",\n          checked: darkMode,\n          onChange: toggleDarkMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 876,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-slot\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sun-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify sun-icon\",\n              \"data-icon\": \"feather-sun\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 884,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 883,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"toggle-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 886,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"moon-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify moon-icon\",\n              \"data-icon\": \"feather-moon\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 888,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 887,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 882,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 875,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 874,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: youtubeLink,\n          onChange: handleLinkChange,\n          placeholder: \"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\",\n          className: \"input-field\",\n          \"aria-label\": \"YouTube video URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'Load Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 905,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 896,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 895,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-message\",\n      role: \"status\",\n      \"aria-live\": \"polite\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 917,\n      columnNumber: 9\n    }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          ref: videoContainerRef,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"section-title\",\n              children: \"Video\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 929,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"placement-toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"placement-label\",\n                children: \"Captions:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 931,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`,\n                onClick: () => setCaptionPlacement('Below Video'),\n                children: \"Below\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 932,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`,\n                onClick: () => setCaptionPlacement('Overlay'),\n                children: \"Overlay\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 938,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 930,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 928,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-wrapper\",\n            style: {\n              paddingTop: '56.25%'\n            },\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"youtube-player\",\n              className: \"video-frame\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 948,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 946,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: videoResizeHandleRef,\n            className: \"video-resize-handle\",\n            title: \"Drag to resize video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 952,\n            columnNumber: 15\n          }, this), captionPlacement === 'Overlay' && /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: overlayRef,\n            className: `captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''}`,\n            style: {\n              position: 'absolute',\n              left: `${overlayPosition.x}%`,\n              top: `${overlayPosition.y}%`,\n              transform: 'translate(-50%, -50%)',\n              cursor: overlayPosition.isDragging ? 'grabbing' : 'grab'\n            },\n            onMouseDown: handleMouseDown,\n            onTouchStart: handleTouchStart,\n            tabIndex: \"0\",\n            role: \"region\",\n            \"aria-label\": \"Movable captions overlay\",\n            onKeyDown: e => {\n              // Arrow key navigation for accessibility\n              const step = 5; // 5% movement steps\n              if (e.key === 'ArrowLeft') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  x: Math.max(0, prev.x - step)\n                }));\n                e.preventDefault();\n              } else if (e.key === 'ArrowRight') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  x: Math.min(100, prev.x + step)\n                }));\n                e.preventDefault();\n              } else if (e.key === 'ArrowUp') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  y: Math.max(0, prev.y - step)\n                }));\n                e.preventDefault();\n              } else if (e.key === 'ArrowDown') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  y: Math.min(100, prev.y + step)\n                }));\n                e.preventDefault();\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-drag-instructions\",\n              children: \"Hold and drag to reposition\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1005,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _languageCustomizatio, _languageCustomizatio2, _languageCustomizatio3, _languageCustomizatio4, _languageCustomizatio5;\n              return activeCaptions[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"overlay-caption\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"overlay-language\",\n                  children: [getLanguageName(lang), \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1012,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"overlay-text\",\n                  style: {\n                    fontFamily: getFontFamily(((_languageCustomizatio = languageCustomizations[lang]) === null || _languageCustomizatio === void 0 ? void 0 : _languageCustomizatio.fontFamily) || 'Arial / Helvetica'),\n                    fontSize: getFontSize(((_languageCustomizatio2 = languageCustomizations[lang]) === null || _languageCustomizatio2 === void 0 ? void 0 : _languageCustomizatio2.fontSize) || 'Large'),\n                    fontWeight: getFontWeight(((_languageCustomizatio3 = languageCustomizations[lang]) === null || _languageCustomizatio3 === void 0 ? void 0 : _languageCustomizatio3.fontWeight) || 'bold'),\n                    color: darkMode ? '#FFFFFF' : ((_languageCustomizatio4 = languageCustomizations[lang]) === null || _languageCustomizatio4 === void 0 ? void 0 : _languageCustomizatio4.textColor) || '#000000',\n                    letterSpacing: ((_languageCustomizatio5 = languageCustomizations[lang]) === null || _languageCustomizatio5 === void 0 ? void 0 : _languageCustomizatio5.letterSpacing) || 'normal'\n                  },\n                  children: formatCaptionText(activeCaptions[lang].text, lang)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1015,\n                  columnNumber: 25\n                }, this)]\n              }, lang, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1011,\n                columnNumber: 23\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 960,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 927,\n          columnNumber: 13\n        }, this), captionPlacement === 'Below Video' && availableLanguages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"captions-container closer-to-video\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"toggle-caption-height\",\n              onClick: toggleCaptionsHeight,\n              title: captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions',\n              children: captionsHeight === 'normal' ? '↓' : '↑'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1041,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _languageCustomizatio6, _languageCustomizatio7, _languageCustomizatio8, _languageCustomizatio9, _languageCustomizatio10;\n              // Skip hidden languages\n              if (hiddenLanguages[lang]) return null;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"caption-text-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `language-tag ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`,\n                  children: getLanguageName(lang)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1058,\n                  columnNumber: 23\n                }, this), activeCaptions[lang] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"caption-text\",\n                  style: {\n                    fontFamily: getFontFamily(((_languageCustomizatio6 = languageCustomizations[lang]) === null || _languageCustomizatio6 === void 0 ? void 0 : _languageCustomizatio6.fontFamily) || 'Arial / Helvetica'),\n                    fontSize: getFontSize(((_languageCustomizatio7 = languageCustomizations[lang]) === null || _languageCustomizatio7 === void 0 ? void 0 : _languageCustomizatio7.fontSize) || 'Large'),\n                    fontWeight: getFontWeight(((_languageCustomizatio8 = languageCustomizations[lang]) === null || _languageCustomizatio8 === void 0 ? void 0 : _languageCustomizatio8.fontWeight) || 'bold'),\n                    color: darkMode ? '#FFFFFF' : ((_languageCustomizatio9 = languageCustomizations[lang]) === null || _languageCustomizatio9 === void 0 ? void 0 : _languageCustomizatio9.textColor) || '#000000',\n                    letterSpacing: ((_languageCustomizatio10 = languageCustomizations[lang]) === null || _languageCustomizatio10 === void 0 ? void 0 : _languageCustomizatio10.letterSpacing) || 'normal'\n                  },\n                  children: formatCaptionText(activeCaptions[lang].text, lang)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1063,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"no-caption\",\n                  children: \"No caption at current timestamp\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1073,\n                  columnNumber: 25\n                }, this)]\n              }, `active-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1054,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1040,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: captionsResizeHandleRef,\n            className: \"resize-handle resize-handle-vertical\",\n            title: \"Drag to resize captions height\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1081,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transcripts-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"section-subtitle\",\n              children: \"Full Transcripts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1089,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _captions$lang;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"language-title\",\n                  children: [getLanguageName(lang), lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1093,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"captions-content\",\n                  children: (_captions$lang = captions[lang]) === null || _captions$lang === void 0 ? void 0 : _captions$lang.map((caption, index) => {\n                    var _languageCustomizatio11, _languageCustomizatio12, _languageCustomizatio13, _languageCustomizatio14, _languageCustomizatio15;\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: `caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`,\n                      onClick: () => jumpToTime(caption.start),\n                      tabIndex: \"0\",\n                      role: \"button\",\n                      \"aria-label\": `Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`,\n                      onKeyDown: e => {\n                        if (e.key === 'Enter' || e.key === ' ') {\n                          jumpToTime(caption.start);\n                        }\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"timestamp\",\n                        children: [Math.floor(caption.start / 60), \":\", (caption.start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(caption.end / 60), \":\", (caption.end % 60).toFixed(1).padStart(4, '0')]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1114,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"caption-text\",\n                        style: {\n                          fontFamily: getFontFamily(((_languageCustomizatio11 = languageCustomizations[lang]) === null || _languageCustomizatio11 === void 0 ? void 0 : _languageCustomizatio11.fontFamily) || 'Arial / Helvetica'),\n                          fontSize: getFontSize(((_languageCustomizatio12 = languageCustomizations[lang]) === null || _languageCustomizatio12 === void 0 ? void 0 : _languageCustomizatio12.fontSize) || 'Large'),\n                          fontWeight: getFontWeight(((_languageCustomizatio13 = languageCustomizations[lang]) === null || _languageCustomizatio13 === void 0 ? void 0 : _languageCustomizatio13.fontWeight) || 'bold'),\n                          color: darkMode ? '#FFFFFF' : ((_languageCustomizatio14 = languageCustomizations[lang]) === null || _languageCustomizatio14 === void 0 ? void 0 : _languageCustomizatio14.textColor) || '#000000',\n                          letterSpacing: ((_languageCustomizatio15 = languageCustomizations[lang]) === null || _languageCustomizatio15 === void 0 ? void 0 : _languageCustomizatio15.letterSpacing) || 'normal'\n                        },\n                        children: formatCaptionText(caption.text, lang)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1118,\n                        columnNumber: 29\n                      }, this)]\n                    }, index, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1102,\n                      columnNumber: 27\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1100,\n                  columnNumber: 23\n                }, this)]\n              }, `transcript-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1092,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1088,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1037,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 925,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"settings-toggle\",\n          onClick: toggleSettingsPanel,\n          title: settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\",\n          \"aria-expanded\": !settingsPanelCollapsed,\n          \"aria-controls\": \"settings-content\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"settings-toggle-icon\",\n            children: settingsPanelCollapsed ? '»' : '«'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1146,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"settings-content\",\n          style: {\n            display: settingsPanelCollapsed ? 'none' : 'block',\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Customize Display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1152,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Select Languages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1156,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"primary-language\",\n                children: \"Primary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1160,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"primary-language\",\n                  value: selectedLanguages.primary,\n                  onChange: e => setLanguageRank(e.target.value, 'primary'),\n                  className: \"settings-select language-dropdown\",\n                  children: availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, transcript.language_code, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1169,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1162,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1161,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1159,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"secondary-language\",\n                children: \"Secondary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1179,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"secondary-language\",\n                  value: selectedLanguages.secondary,\n                  onChange: e => setLanguageRank(e.target.value, 'secondary'),\n                  className: \"settings-select language-dropdown\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1187,\n                    columnNumber: 23\n                  }, this), availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, transcript.language_code, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1189,\n                    columnNumber: 25\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1181,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1180,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1178,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1155,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Language Customizations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1200,\n              columnNumber: 17\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _languageCustomizatio16, _languageCustomizatio17, _languageCustomizatio18, _languageCustomizatio19, _languageCustomizatio20;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-customization-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-header\",\n                  onClick: () => toggleLanguageCollapse(lang),\n                  style: {\n                    cursor: 'pointer'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"language-header-content\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-name\",\n                      children: getLanguageName(lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1209,\n                      columnNumber: 25\n                    }, this), lang === selectedLanguages.primary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag primary\",\n                      children: \"Primary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1210,\n                      columnNumber: 64\n                    }, this), lang === selectedLanguages.secondary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag secondary\",\n                      children: \"Secondary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1211,\n                      columnNumber: 66\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1208,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"collapse-icon\",\n                    children: collapsedLanguages[lang] ? '▶' : '▼'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1214,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1204,\n                  columnNumber: 21\n                }, this), !collapsedLanguages[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-content\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"settings-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      children: \"Visibility\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1223,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: `visibility-toggle ${hiddenLanguages[lang] ? 'hidden' : 'visible'}`,\n                      onClick: () => toggleLanguageVisibility(lang),\n                      children: hiddenLanguages[lang] ? 'Show language' : 'Hide language'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1224,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      htmlFor: `font-family-${lang}`,\n                      children: \"Font\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1230,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      id: `font-family-${lang}`,\n                      value: ((_languageCustomizatio16 = languageCustomizations[lang]) === null || _languageCustomizatio16 === void 0 ? void 0 : _languageCustomizatio16.fontFamily) || 'Arial / Helvetica',\n                      onChange: e => updateLanguageCustomization(lang, 'fontFamily', e.target.value),\n                      className: \"settings-select\",\n                      children: [/*#__PURE__*/_jsxDEV(\"optgroup\", {\n                        label: \"Sans-serif\",\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Arial / Helvetica\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1238,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Roboto\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1239,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Open Sans\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1240,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Noto Sans\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1241,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Verdana\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1242,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1237,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n                        label: \"Monospace\",\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Courier New\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1245,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Consolas\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1246,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Source Code Pro\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1247,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1244,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1231,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1222,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"settings-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      htmlFor: `font-size-${lang}`,\n                      children: \"Size\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1255,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      id: `font-size-${lang}`,\n                      value: ((_languageCustomizatio17 = languageCustomizations[lang]) === null || _languageCustomizatio17 === void 0 ? void 0 : _languageCustomizatio17.fontSize) || 'Large',\n                      onChange: e => updateLanguageCustomization(lang, 'fontSize', e.target.value),\n                      className: \"settings-select\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Small\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1262,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Medium\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1263,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Large\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1264,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"X-Large\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1265,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1256,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1254,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"settings-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      htmlFor: `font-weight-${lang}`,\n                      children: \"Font Weight\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1271,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      id: `font-weight-${lang}`,\n                      value: ((_languageCustomizatio18 = languageCustomizations[lang]) === null || _languageCustomizatio18 === void 0 ? void 0 : _languageCustomizatio18.fontWeight) || 'bold',\n                      onChange: e => updateLanguageCustomization(lang, 'fontWeight', e.target.value),\n                      className: \"settings-select\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"normal\",\n                        children: \"Normal\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1278,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"bold\",\n                        children: \"Bold\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1279,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"600\",\n                        children: \"Semi-Bold\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1280,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"300\",\n                        children: \"Light\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1281,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1272,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1270,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"settings-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      htmlFor: `text-color-${lang}`,\n                      children: \"Color\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1287,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      id: `text-color-${lang}`,\n                      value: ((_languageCustomizatio19 = languageCustomizations[lang]) === null || _languageCustomizatio19 === void 0 ? void 0 : _languageCustomizatio19.textColor) || '#000000',\n                      onChange: e => updateLanguageCustomization(lang, 'textColor', e.target.value),\n                      className: \"settings-select\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"#000000\",\n                        children: \"Black\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1294,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"#FFFFFF\",\n                        children: \"White\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1295,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"#333333\",\n                        children: \"Dark Gray\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1296,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"#1A1AFF\",\n                        children: \"Dark Blue\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1297,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1288,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1286,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"settings-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      htmlFor: `letter-spacing-${lang}`,\n                      children: \"Character Spacing\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1303,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      id: `letter-spacing-${lang}`,\n                      value: ((_languageCustomizatio20 = languageCustomizations[lang]) === null || _languageCustomizatio20 === void 0 ? void 0 : _languageCustomizatio20.letterSpacing) || 'normal',\n                      onChange: e => updateLanguageCustomization(lang, 'letterSpacing', e.target.value),\n                      className: \"settings-select\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"normal\",\n                        children: \"Normal\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1310,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"0.05em\",\n                        children: \"Slightly Expanded\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1311,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"0.1em\",\n                        children: \"Expanded\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1312,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"-0.03em\",\n                        children: \"Condensed\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1313,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1304,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1302,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"reset-button\",\n                    onClick: () => {\n                      // Reset this language's customizations to new defaults with larger, bolder text\n                      setLanguageCustomizations(prev => ({\n                        ...prev,\n                        [lang]: {\n                          fontFamily: 'Arial / Helvetica',\n                          fontSize: 'Large',\n                          // Updated from Medium to Large\n                          fontWeight: 'bold',\n                          // New default\n                          textColor: darkMode ? '#FFFFFF' : '#000000',\n                          letterSpacing: 'normal'\n                        }\n                      }));\n                    },\n                    \"aria-label\": `Reset customization for ${getLanguageName(lang)}`,\n                    children: \"Reset\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1317,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1220,\n                  columnNumber: 21\n                }, this)]\n              }, `customize-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1203,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1199,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Part of Speech Highlighting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1344,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pos-color-controls\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"pos-label\",\n                  htmlFor: \"noun-color\",\n                  children: \"Nouns\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1347,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"noun-color\",\n                  value: nounColor,\n                  onChange: e => setNounColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1354,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1355,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1356,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1357,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1358,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1348,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1346,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"pos-label\",\n                  htmlFor: \"verb-color\",\n                  children: \"Verbs\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1363,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"verb-color\",\n                  value: verbColor,\n                  onChange: e => setVerbColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1370,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1371,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1372,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1373,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1374,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1364,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1362,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"pos-label\",\n                  htmlFor: \"adjective-color\",\n                  children: \"Adjectives\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1379,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"adjective-color\",\n                  value: adjectiveColor,\n                  onChange: e => setAdjectiveColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1386,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1387,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1388,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1389,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1390,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1380,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1378,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1345,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1343,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1151,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 923,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 870,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"GIOKot6VcHmnmveV3qzm4Lsq0Bk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","youtubeLink","setYoutubeLink","videoId","setVideoId","captions","setCaptions","selectedLanguages","setSelectedLanguages","primary","secondary","availableLanguages","setAvailableLanguages","availableTranscripts","setAvailableTranscripts","status","setStatus","isLoading","setIsLoading","currentTime","setCurrentTime","activeCaptions","setActiveCaptions","collapsedLanguages","setCollapsedLanguages","hiddenLanguages","setHiddenLanguages","captionPlacement","setCaptionPlacement","overlayPosition","setOverlayPosition","x","y","isDragging","startX","startY","nounColor","setNounColor","verbColor","setVerbColor","adjectiveColor","setAdjectiveColor","languageCustomizations","setLanguageCustomizations","darkMode","setDarkMode","settingsPanelCollapsed","setSettingsPanelCollapsed","captionsHeight","setCaptionsHeight","overlayRef","videoContainerRef","videoResizeHandleRef","captionsResizeHandleRef","activeResizeRef","extractVideoId","url","regExp","match","length","toggleSettingsPanel","toggleCaptionsHeight","getSelectedLanguagesArray","Object","values","filter","lang","initialCollapsedState","forEach","toggleLanguageCollapse","prev","id","window","matchMedia","matches","document","body","classList","add","mediaQuery","handleChange","e","remove","Iconify","script","createElement","src","async","appendChild","addEventListener","removeEventListener","iconifyScript","querySelector","head","contains","removeChild","addListener","removeListener","newLanguageCustomizations","fontFamily","fontSize","fontWeight","textColor","letterSpacing","toggleLanguageVisibility","updatedCustomizations","keys","_updatedCustomization","_updatedCustomization2","videoContainer","current","resizeHandle","handleMouseDown","preventDefault","clientX","startWidth","offsetWidth","handleMouseMove","moveEvent","deltaX","newWidth","Math","max","style","width","videoWrapper","paddingTop","handleMouseUp","captionsSection","clientY","startHeight","offsetHeight","height","maxHeight","handleLinkChange","target","value","handleSubmit","fetchAvailableLanguages","_data$transcripts$fin","_data$transcripts$","console","log","response","fetch","ok","errorText","text","error","Error","data","json","transcripts","languageCodes","map","t","language_code","defaultPrimary","find","fetchCaptions","message","languages","captionsData","warn","processedTranscript","transcript","caption","applyPOSTagging","end","start","duration","commonNouns","commonVerbs","commonAdjectives","words","split","taggedText","i","originalWord","word","toLowerCase","replace","includes","setLanguageRank","rank","updatedLanguages","key","updateLanguageCustomization","property","getColor","type","colorMap","getFontSize","sizeOption","sizeMap","getFontWeight","weightOption","getFontFamily","fontOption","fontMap","formatCaptionText","customization","fontStyle","color","display","formattedContent","_","content","styleId","random","toString","substr","styleTag","className","children","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","getCaptionStyle","isRTL","backgroundColor","direction","newActiveCaptions","activeCaption","interval","setInterval","YT","Player","player","getCurrentTime","clearInterval","tag","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","createYouTubePlayer","destroy","events","onPlayerReady","onPlayerStateChange","event","PlayerState","PLAYING","updateTime","getPlayerState","requestAnimationFrame","findTranscriptByLanguageCode","code","getLanguageName","langCode","language","rect","getBoundingClientRect","newX","min","left","newY","top","getSelection","removeAllRanges","handleTouchStart","touch","touches","handleTouchMove","passive","handleTouchEnd","deltaY","toggleDarkMode","jumpToTime","time","seekTo","playVideo","checked","onChange","onSubmit","placeholder","disabled","role","ref","onClick","title","position","transform","cursor","onMouseDown","onTouchStart","tabIndex","onKeyDown","step","_languageCustomizatio","_languageCustomizatio2","_languageCustomizatio3","_languageCustomizatio4","_languageCustomizatio5","_languageCustomizatio6","_languageCustomizatio7","_languageCustomizatio8","_languageCustomizatio9","_languageCustomizatio10","_captions$lang","index","_languageCustomizatio11","_languageCustomizatio12","_languageCustomizatio13","_languageCustomizatio14","_languageCustomizatio15","floor","toFixed","padStart","htmlFor","_languageCustomizatio16","_languageCustomizatio17","_languageCustomizatio18","_languageCustomizatio19","_languageCustomizatio20","label","_c","$RefreshReg$"],"sources":["/Users/arunasrivastava/random/cse482/Multilingual/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// API base URL - change this if your backend is running on a different port/host\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n\nfunction App() {\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n    // tertiary language removed\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n  \n  // Add missing hiddenLanguages state\n  const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  \n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50, // percentage\n    y: 80, // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0\n  });\n  \n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  \n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n  \n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n  \n  // New state for UI enhancements\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n  const [captionsHeight, setCaptionsHeight] = useState('normal');\n  \n  // Refs\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const videoResizeHandleRef = useRef(null);\n  const captionsResizeHandleRef = useRef(null);\n  const activeResizeRef = useRef(null);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = (url) => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[7].length === 11) ? match[7] : null;\n  };\n\n  // Toggle settings panel collapse\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]); \n  \n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = (lang) => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n    \n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n    \n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e) => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n    \n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    \n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = { ...languageCustomizations };\n    \n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 'Large', // Updated default: larger font\n          fontWeight: 'bold', // Added default: bold text\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 'normal'\n        };\n      }\n    });\n    \n    setLanguageCustomizations(newLanguageCustomizations);\n  }, [selectedLanguages, darkMode, languageCustomizations]);\n\n  // Add this function to toggle language visibility\n  const toggleLanguageVisibility = (lang) => {\n    setHiddenLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = { ...languageCustomizations };\n    \n    Object.keys(updatedCustomizations).forEach(lang => {\n      if (updatedCustomizations[lang]?.textColor === '#000000' || updatedCustomizations[lang]?.textColor === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n      }\n    });\n    \n    setLanguageCustomizations(updatedCustomizations);\n  }, [darkMode, languageCustomizations]);\n\n  // Set up video container resize functionality\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const videoContainer = videoContainerRef.current;\n    const resizeHandle = videoResizeHandleRef.current;\n    \n    if (!videoContainer || !resizeHandle) return;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Save initial position and dimensions\n      const startX = e.clientX;\n      const startWidth = videoContainer.offsetWidth;\n      \n      activeResizeRef.current = 'video';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'video') return;\n        \n        // Calculate new width based on mouse movement\n        const deltaX = moveEvent.clientX - startX;\n        const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n        \n        // Set width\n        videoContainer.style.width = `${newWidth}px`;\n        \n        // Update the video wrapper's padding-top to maintain aspect ratio\n        const videoWrapper = videoContainer.querySelector('.video-wrapper');\n        if (videoWrapper) {\n          // No need to explicitly set height - padding-top maintains ratio\n          videoWrapper.style.paddingTop = `${(9/16) * 100}%`; // Keep 16:9 ratio\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      if (resizeHandle) {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      }\n    };\n  }, [videoId]);\n\n  // Set up captions container resize functionality\n  useEffect(() => {\n    if (!captionsResizeHandleRef.current) return;\n    \n    const resizeHandle = captionsResizeHandleRef.current;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Find the active captions section\n      const captionsSection = document.querySelector('.active-captions-section');\n      if (!captionsSection) return;\n      \n      // Save initial position and dimensions\n      const startY = e.clientY;\n      const startHeight = captionsSection.offsetHeight;\n      \n      activeResizeRef.current = 'captions';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'captions') return;\n        \n        // Calculate new height\n        const height = startHeight + (moveEvent.clientY - startY);\n        \n        // Apply new height with min constraint\n        if (height > 100) {\n          captionsSection.style.height = `${height}px`;\n          captionsSection.style.maxHeight = `${height}px`;\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      resizeHandle.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [availableLanguages.length]);\n\n  // Handle YouTube link input\n  const handleLinkChange = (e) => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async (videoId) => {\n    try {\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Received data:', data);\n      \n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Store the full transcript information\n      setAvailableTranscripts(data.transcripts);\n      \n      // Also keep the language codes for backward compatibility\n      const languageCodes = data.transcripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n      \n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = data.transcripts.find(t => t.language_code === 'en')?.language_code \n        || (data.transcripts[0]?.language_code || '');\n        \n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: ''\n      });\n      \n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n      \n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n      \n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n      \n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          \n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          \n          const data = await response.json();\n          \n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n          \n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          \n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      \n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = (text) => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n    \n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      \n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      \n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = { ...selectedLanguages };\n    \n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => ({\n      ...prev,\n      [lang]: {\n        ...prev[lang],\n        [property]: value\n      }\n    }));\n  };\n\n  // Get color based on settings\n  const getColor = (type) => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    \n    switch(type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return darkMode ? '#FFFFFF' : '#000000';\n    }\n  };\n\n  // Get font size based on settings\n  const getFontSize = (sizeOption) => {\n    const sizeMap = {\n      'Small': '0.875rem',\n      'Medium': '1rem',\n      'Large': '1.25rem',\n      'X-Large': '1.5rem'\n    };\n    \n    return sizeMap[sizeOption] || '1.25rem'; // Default to Large\n  };\n\n  // Get font weight based on settings\n  const getFontWeight = (weightOption) => {\n    return weightOption || 'bold'; // Default to bold\n  };\n\n  // Get font family based on settings\n  const getFontFamily = (fontOption) => {\n    const fontMap = {\n      'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n      'Roboto': 'Roboto, Arial, sans-serif',\n      'Open Sans': 'Open Sans, Arial, sans-serif',\n      'Noto Sans': 'Noto Sans, Arial, sans-serif',\n      'Verdana': 'Verdana, Geneva, sans-serif',\n      'Courier New': 'Courier New, monospace',\n      'Consolas': 'Consolas, monospace',\n      'Source Code Pro': 'Source Code Pro, monospace',\n      'Sans Serif': 'Arial, Helvetica, sans-serif',\n      'Serif': 'Georgia, Times, serif',\n      'Monospace': 'Courier New, monospace',\n      'Handwriting': 'Comic Sans MS, cursive'\n    };\n    \n    return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n  };\n\n  // Format caption text with styling for parts of speech\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    \n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial / Helvetica',\n      fontSize: 'Large',\n      fontWeight: 'bold',\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 'normal'\n    };\n\n    // Create a plain wrapper for text without POS tags\n    const fontStyle = {\n      fontFamily: getFontFamily(customization.fontFamily),\n      fontSize: getFontSize(customization.fontSize),\n      fontWeight: getFontWeight(customization.fontWeight),\n      color: darkMode ? '#FFFFFF' : customization.textColor,\n      letterSpacing: customization.letterSpacing,\n      display: 'inline'\n    };\n\n    // Replace POS tags with styled spans\n    let formattedContent = text;\n    formattedContent = formattedContent.replace(/<noun>(.*?)<\\/noun>/g, (_, content) => `<span class=\"pos-tag noun\">${content}</span>`);\n    formattedContent = formattedContent.replace(/<verb>(.*?)<\\/verb>/g, (_, content) => `<span class=\"pos-tag verb\">${content}</span>`);\n    formattedContent = formattedContent.replace(/<adjective>(.*?)<\\/adjective>/g, (_, content) => `<span class=\"pos-tag adjective\">${content}</span>`);\n    \n    // Create a style tag for POS highlighting that will be unique to this text\n    const styleId = `style-${Math.random().toString(36).substr(2, 9)}`;\n    const styleTag = `\n      <style id=\"${styleId}\">\n        .pos-tag {\n          text-decoration: underline;\n        }\n        .pos-tag.noun {\n          color: ${getColor('noun')} !important;\n        }\n        .pos-tag.verb {\n          color: ${getColor('verb')} !important;\n        }\n        .pos-tag.adjective {\n          color: ${getColor('adjective')} !important;\n        }\n      </style>\n    `;\n    \n    return (\n      <div className=\"caption-wrapper\" style={fontStyle}>\n        <span dangerouslySetInnerHTML={{ __html: styleTag + formattedContent }} />\n      </div>\n    );\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = (lang) => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    \n    return {\n      fontFamily: getFontFamily(customization.fontFamily || 'Arial / Helvetica'),\n      fontSize: getFontSize(customization.fontSize || 'Large'),\n      fontWeight: getFontWeight(customization.fontWeight || 'bold'),\n      color: darkMode ? '#FFFFFF' : (customization.textColor || '#000000'),\n      letterSpacing: customization.letterSpacing || 'normal',\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    \n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(\n          caption => currentTime >= caption.start && currentTime <= caption.end\n        );\n        \n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    \n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n    \n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    \n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      \n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    \n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      \n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    \n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    \n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    \n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = (code) => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = (langCode) => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return transcript?.language || langCode;\n  };\n  \n  // Start dragging the caption overlay\n  const handleMouseDown = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n    \n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    \n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n  \n  // Handle mouse move during dragging - Completely redesigned for immediate, direct movement\n  const handleMouseMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate direct position as percentage of container\n    // This immediately places the overlay where the mouse is instead of incremental movement\n    const newX = Math.max(0, Math.min(100, ((e.clientX - rect.left) / rect.width) * 100));\n    const newY = Math.max(0, Math.min(100, ((e.clientY - rect.top) / rect.height) * 100));\n    \n    // Update position with direct placement for more intuitive movement\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX, \n      y: newY,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n    \n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n  \n  // Stop dragging\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({ ...prev, isDragging: false }));\n    \n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n  \n  // Handle touch start for mobile devices\n  const handleTouchStart = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n    \n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, { passive: false });\n    document.addEventListener('touchend', handleTouchEnd);\n    \n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n  \n  // Handle touch move for mobile devices\n  const handleTouchMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate touch movement delta\n    const deltaX = touch.clientX - overlayPosition.startX;\n    const deltaY = touch.clientY - overlayPosition.startY;\n    \n    // Calculate new position in percentage\n    const newX = Math.max(0, Math.min(100, overlayPosition.x + (deltaX / rect.width) * 100));\n    const newY = Math.max(0, Math.min(100, overlayPosition.y + (deltaY / rect.height) * 100));\n    \n    // Update position and starting points for next movement calculation\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX, \n      y: newY,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n    \n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n  \n  // Handle touch end for mobile devices\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({ ...prev, isDragging: false }));\n    \n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n  \n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    \n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = (time) => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n\n  return (\n    <div className={`app-container ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <h1 className=\"app-title\">YouTube Multilingual Captions Extractor</h1>\n      \n      {/* Fancy Dark Mode Toggle */}\n      <div className=\"dark-mode-toggle\">\n        <label>\n          <input \n            className=\"toggle-checkbox\" \n            type=\"checkbox\" \n            checked={darkMode}\n            onChange={toggleDarkMode}\n          />\n          <div className=\"toggle-slot\">\n            <div className=\"sun-icon-wrapper\">\n              <div className=\"iconify sun-icon\" data-icon=\"feather-sun\" data-inline=\"false\"></div>\n            </div>\n            <div className=\"toggle-button\"></div>\n            <div className=\"moon-icon-wrapper\">\n              <div className=\"iconify moon-icon\" data-icon=\"feather-moon\" data-inline=\"false\"></div>\n            </div>\n          </div>\n        </label>\n      </div>\n      \n      {/* Input Box */}\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={youtubeLink}\n            onChange={handleLinkChange}\n            placeholder=\"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\"\n            className=\"input-field\"\n            aria-label=\"YouTube video URL\"\n          />\n          <button \n            type=\"submit\"\n            className=\"submit-button\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load Video'}\n          </button>\n        </div>\n      </form>\n      \n      {/* Status message */}\n      {status && (\n        <div className=\"status-message\" role=\"status\" aria-live=\"polite\">\n          {status}\n        </div>\n      )}\n      \n      {videoId && (\n        <div className=\"main-content\">\n          {/* Main Content Area (Video + Captions) */}\n          <div className=\"content-area\">\n            {/* Video Embed Box */}\n            <div className=\"video-container\" ref={videoContainerRef}>\n              <div className=\"video-header\">\n                <h2 className=\"section-title\">Video</h2>\n                <div className=\"placement-toggle\">\n                  <label className=\"placement-label\">Captions:</label>\n                  <button \n                    className={`placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`}\n                    onClick={() => setCaptionPlacement('Below Video')}\n                  >\n                    Below\n                  </button>\n                  <button \n                    className={`placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`}\n                    onClick={() => setCaptionPlacement('Overlay')}\n                  >\n                    Overlay\n                  </button>\n                </div>\n              </div>\n              <div className=\"video-wrapper\" style={{ paddingTop: '56.25%' }}> {/* 16:9 Aspect Ratio */}\n                {/* YouTube player */}\n                <div id=\"youtube-player\" className=\"video-frame\"></div>\n              </div>\n              \n              {/* Video resize handle */}\n              <div \n                ref={videoResizeHandleRef}\n                className=\"video-resize-handle\" \n                title=\"Drag to resize video\"\n              ></div>\n              \n              {/* Real-time captions overlay - with improved draggable functionality */}\n              {captionPlacement === 'Overlay' && (\n                <div \n                  ref={overlayRef}\n                  className={`captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''}`}\n                  style={{\n                    position: 'absolute',\n                    left: `${overlayPosition.x}%`,\n                    top: `${overlayPosition.y}%`,\n                    transform: 'translate(-50%, -50%)',\n                    cursor: overlayPosition.isDragging ? 'grabbing' : 'grab'\n                  }}\n                  onMouseDown={handleMouseDown}\n                  onTouchStart={handleTouchStart}\n                  tabIndex=\"0\"\n                  role=\"region\"\n                  aria-label=\"Movable captions overlay\"\n                  onKeyDown={(e) => {\n                    // Arrow key navigation for accessibility\n                    const step = 5; // 5% movement steps\n                    if (e.key === 'ArrowLeft') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        x: Math.max(0, prev.x - step)\n                      }));\n                      e.preventDefault();\n                    } else if (e.key === 'ArrowRight') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        x: Math.min(100, prev.x + step)\n                      }));\n                      e.preventDefault();\n                    } else if (e.key === 'ArrowUp') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        y: Math.max(0, prev.y - step)\n                      }));\n                      e.preventDefault();\n                    } else if (e.key === 'ArrowDown') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        y: Math.min(100, prev.y + step)\n                      }));\n                      e.preventDefault();\n                    }\n                  }}\n                >\n                  <div className=\"overlay-drag-instructions\">\n                    Hold and drag to reposition\n                  </div>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    activeCaptions[lang] && (\n                      <div key={lang} className=\"overlay-caption\">\n                        <span className=\"overlay-language\">\n                          {getLanguageName(lang)}:\n                        </span>\n                        <span \n                          className=\"overlay-text\"\n                          style={{\n                            fontFamily: getFontFamily(languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica'),\n                            fontSize: getFontSize(languageCustomizations[lang]?.fontSize || 'Large'),\n                            fontWeight: getFontWeight(languageCustomizations[lang]?.fontWeight || 'bold'),\n                            color: darkMode ? '#FFFFFF' : (languageCustomizations[lang]?.textColor || '#000000'),\n                            letterSpacing: languageCustomizations[lang]?.letterSpacing || 'normal',\n                          }}\n                        >\n                          {formatCaptionText(activeCaptions[lang].text, lang)}\n                        </span>\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Captions Display - for Below Video mode only - with reduced spacing */}\n            {captionPlacement === 'Below Video' && \n             availableLanguages.length > 0 && (\n              <div className=\"captions-container closer-to-video\">\n                \n                {/* Current active captions section - all languages together */}\n                <div className={`active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`}>\n                  <button\n                    className=\"toggle-caption-height\"\n                    onClick={toggleCaptionsHeight}\n                    title={captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions'}\n                  >\n                    {captionsHeight === 'normal' ? '↓' : '↑'}\n                  </button>\n                  \n                  {getSelectedLanguagesArray().map(lang => {\n                  // Skip hidden languages\n                  if (hiddenLanguages[lang]) return null;\n                  \n                  return (\n                    <div \n                      key={`active-${lang}`} \n                      className=\"caption-text-container\"\n                    >\n                      <span className={`language-tag ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`}>\n                        {getLanguageName(lang)}\n                      </span>\n                      \n                      {activeCaptions[lang] ? (\n                        <div className=\"caption-text\" style={{\n                          fontFamily: getFontFamily(languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica'),\n                          fontSize: getFontSize(languageCustomizations[lang]?.fontSize || 'Large'),\n                          fontWeight: getFontWeight(languageCustomizations[lang]?.fontWeight || 'bold'),\n                          color: darkMode ? '#FFFFFF' : (languageCustomizations[lang]?.textColor || '#000000'),\n                          letterSpacing: languageCustomizations[lang]?.letterSpacing || 'normal',\n                        }}>\n                          {formatCaptionText(activeCaptions[lang].text, lang)}\n                        </div>\n                      ) : (\n                        <span className=\"no-caption\">No caption at current timestamp</span>\n                      )}\n                    </div>\n                  );\n                })}\n                </div>\n                \n                {/* Caption resize handle */}\n                <div \n                  ref={captionsResizeHandleRef}\n                  className=\"resize-handle resize-handle-vertical\" \n                  title=\"Drag to resize captions height\"\n                ></div>\n                \n                {/* Transcripts section - all languages */}\n                <div className=\"transcripts-section\">\n                  <h3 className=\"section-subtitle\">Full Transcripts</h3>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    <div key={`transcript-${lang}`} className=\"language-section\">\n                      <h4 className=\"language-title\">\n                        {getLanguageName(lang)} \n                        {lang === selectedLanguages.primary ? ' (Primary)' : \n                         lang === selectedLanguages.secondary ? ' (Secondary)' : ''}\n                      </h4>\n                      \n                      {/* Full transcript with timestamps */}\n                      <div className=\"captions-content\">\n                        {captions[lang]?.map((caption, index) => (\n                          <div key={index} \n                            className={`caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`}\n                            onClick={() => jumpToTime(caption.start)}\n                            tabIndex=\"0\"\n                            role=\"button\"\n                            aria-label={`Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`}\n                            onKeyDown={(e) => {\n                              if (e.key === 'Enter' || e.key === ' ') {\n                                jumpToTime(caption.start);\n                              }\n                            }}\n                          >\n                            <div className=\"timestamp\">\n                              {Math.floor(caption.start / 60)}:{(caption.start % 60).toFixed(1).padStart(4, '0')} - \n                              {Math.floor(caption.end / 60)}:{(caption.end % 60).toFixed(1).padStart(4, '0')}\n                            </div>\n                            <div className=\"caption-text\" style={{\n                              fontFamily: getFontFamily(languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica'),\n                              fontSize: getFontSize(languageCustomizations[lang]?.fontSize || 'Large'),\n                              fontWeight: getFontWeight(languageCustomizations[lang]?.fontWeight || 'bold'),\n                              color: darkMode ? '#FFFFFF' : (languageCustomizations[lang]?.textColor || '#000000'),\n                              letterSpacing: languageCustomizations[lang]?.letterSpacing || 'normal',\n                            }}>\n                              {formatCaptionText(caption.text, lang)}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Settings Panel - Now with improved toggle */}\n          <div className={`settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`}>\n            <button \n              className=\"settings-toggle\" \n              onClick={toggleSettingsPanel}\n              title={settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\"}\n              aria-expanded={!settingsPanelCollapsed}\n              aria-controls=\"settings-content\"\n            >\n              <span className=\"settings-toggle-icon\">\n                {settingsPanelCollapsed ? '»' : '«'}\n              </span>\n            </button>\n            \n            <div id=\"settings-content\" style={{ display: settingsPanelCollapsed ? 'none' : 'block', width: '100%' }}>\n              <h2 className=\"section-title\">Customize Display</h2>\n              \n              {/* Language Selection */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Select Languages</h3>\n                \n                {/* Primary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"primary-language\">Primary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"primary-language\"\n                      value={selectedLanguages.primary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'primary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      {availableTranscripts.map(transcript => (\n                        <option key={transcript.language_code} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n                \n                {/* Secondary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"secondary-language\">Secondary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"secondary-language\"\n                      value={selectedLanguages.secondary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'secondary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      <option value=\"\">None</option>\n                      {availableTranscripts.map(transcript => (\n                        <option key={transcript.language_code} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Language-specific customization */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Language Customizations</h3>\n                \n                {getSelectedLanguagesArray().map(lang => (\n                  <div key={`customize-${lang}`} className=\"language-customization-card\">\n                    <div className=\"language-card-header\"\n                      onClick={() => toggleLanguageCollapse(lang)}\n                      style={{ cursor: 'pointer' }}\n                    >\n                      <div className=\"language-header-content\">\n                        <span className=\"language-name\">{getLanguageName(lang)}</span>\n                        {lang === selectedLanguages.primary && <span className=\"language-tag primary\">Primary</span>}\n                        {lang === selectedLanguages.secondary && <span className=\"language-tag secondary\">Secondary</span>}\n                      </div>\n                      {/* Collapse/Expand icon */}\n                      <span className=\"collapse-icon\">\n                        {collapsedLanguages[lang] ? '▶' : '▼'}\n                      </span>\n                    </div>\n\n                    {!collapsedLanguages[lang] && (   \n                    <div className=\"language-card-content\">\n                      {/* Font Type */}\n                      <div className=\"settings-item\">\n                        <label className=\"settings-label\">Visibility</label>\n                        <button \n                          className={`visibility-toggle ${hiddenLanguages[lang] ? 'hidden' : 'visible'}`}\n                          onClick={() => toggleLanguageVisibility(lang)}\n                        >\n                          {hiddenLanguages[lang] ? 'Show language' : 'Hide language'}\n                        </button>\n                        <label className=\"settings-label\" htmlFor={`font-family-${lang}`}>Font</label>\n                        <select \n                          id={`font-family-${lang}`}\n                          value={languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica'} \n                          onChange={(e) => updateLanguageCustomization(lang, 'fontFamily', e.target.value)}\n                          className=\"settings-select\"\n                        >\n                          <optgroup label=\"Sans-serif\">\n                            <option>Arial / Helvetica</option>\n                            <option>Roboto</option>\n                            <option>Open Sans</option>\n                            <option>Noto Sans</option>\n                            <option>Verdana</option>\n                          </optgroup>\n                          <optgroup label=\"Monospace\">\n                            <option>Courier New</option>\n                            <option>Consolas</option>\n                            <option>Source Code Pro</option>\n                          </optgroup>\n                        </select>\n                      </div>\n\n                      \n                      {/* Font Size */}\n                      <div className=\"settings-item\">\n                        <label className=\"settings-label\" htmlFor={`font-size-${lang}`}>Size</label>\n                        <select \n                          id={`font-size-${lang}`}\n                          value={languageCustomizations[lang]?.fontSize || 'Large'} \n                          onChange={(e) => updateLanguageCustomization(lang, 'fontSize', e.target.value)}\n                          className=\"settings-select\"\n                        >\n                          <option>Small</option>\n                          <option>Medium</option>\n                          <option>Large</option>\n                          <option>X-Large</option>\n                        </select>\n                      </div>\n                      \n                      {/* Font Weight */}\n                      <div className=\"settings-item\">\n                        <label className=\"settings-label\" htmlFor={`font-weight-${lang}`}>Font Weight</label>\n                        <select \n                          id={`font-weight-${lang}`}\n                          value={languageCustomizations[lang]?.fontWeight || 'bold'} \n                          onChange={(e) => updateLanguageCustomization(lang, 'fontWeight', e.target.value)}\n                          className=\"settings-select\"\n                        >\n                          <option value=\"normal\">Normal</option>\n                          <option value=\"bold\">Bold</option>\n                          <option value=\"600\">Semi-Bold</option>\n                          <option value=\"300\">Light</option>\n                        </select>\n                      </div>\n                      \n                      {/* Text Color */}\n                      <div className=\"settings-item\">\n                        <label className=\"settings-label\" htmlFor={`text-color-${lang}`}>Color</label>\n                        <select \n                          id={`text-color-${lang}`}\n                          value={languageCustomizations[lang]?.textColor || '#000000'} \n                          onChange={(e) => updateLanguageCustomization(lang, 'textColor', e.target.value)}\n                          className=\"settings-select\"\n                        >\n                          <option value=\"#000000\">Black</option>\n                          <option value=\"#FFFFFF\">White</option>\n                          <option value=\"#333333\">Dark Gray</option>\n                          <option value=\"#1A1AFF\">Dark Blue</option>\n                        </select>\n                      </div>\n                      \n                      {/* Character Spacing */}\n                      <div className=\"settings-item\">\n                        <label className=\"settings-label\" htmlFor={`letter-spacing-${lang}`}>Character Spacing</label>\n                        <select \n                          id={`letter-spacing-${lang}`}\n                          value={languageCustomizations[lang]?.letterSpacing || 'normal'} \n                          onChange={(e) => updateLanguageCustomization(lang, 'letterSpacing', e.target.value)}\n                          className=\"settings-select\"\n                        >\n                          <option value=\"normal\">Normal</option>\n                          <option value=\"0.05em\">Slightly Expanded</option>\n                          <option value=\"0.1em\">Expanded</option>\n                          <option value=\"-0.03em\">Condensed</option>\n                        </select>\n                      </div>\n                      \n                      <button \n                        className=\"reset-button\"\n                        onClick={() => {\n                          // Reset this language's customizations to new defaults with larger, bolder text\n                          setLanguageCustomizations(prev => ({\n                            ...prev,\n                            [lang]: {\n                              fontFamily: 'Arial / Helvetica',\n                              fontSize: 'Large', // Updated from Medium to Large\n                              fontWeight: 'bold', // New default\n                              textColor: darkMode ? '#FFFFFF' : '#000000',\n                              letterSpacing: 'normal'\n                            }\n                          }));\n                        }}\n                        aria-label={`Reset customization for ${getLanguageName(lang)}`}\n                      >\n                        Reset\n                      </button>\n                    </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n              \n              {/* Part of speech color customization */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Part of Speech Highlighting</h3>\n                <div className=\"pos-color-controls\">\n                  <div className=\"pos-color-item\">\n                    <label className=\"pos-label\" htmlFor=\"noun-color\">Nouns</label>\n                    <select \n                      id=\"noun-color\" \n                      value={nounColor} \n                      onChange={(e) => setNounColor(e.target.value)} \n                      className=\"settings-select pos-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"pos-color-item\">\n                    <label className=\"pos-label\" htmlFor=\"verb-color\">Verbs</label>\n                    <select \n                      id=\"verb-color\" \n                      value={verbColor} \n                      onChange={(e) => setVerbColor(e.target.value)} \n                      className=\"settings-select pos-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"pos-color-item\">\n                    <label className=\"pos-label\" htmlFor=\"adjective-color\">Adjectives</label>\n                    <select \n                      id=\"adjective-color\" \n                      value={adjectiveColor} \n                      onChange={(e) => setAdjectiveColor(e.target.value)} \n                      className=\"settings-select pos-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}