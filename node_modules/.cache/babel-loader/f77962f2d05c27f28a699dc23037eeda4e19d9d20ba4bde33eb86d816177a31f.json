{"ast":null,"code":"var _jsxFileName = \"/Users/arunasrivastava/random/cse482/Multilingual/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// API base URL - change this if your backend is running on a different port/host\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nfunction App() {\n  _s();\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: '',\n    tertiary: ''\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n\n  // New state for overlay position\n  const [overlayPosition, setOverlayPosition] = useState({\n    vertical: 'bottom',\n    horizontal: 'center'\n  });\n\n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n\n  // Per-language customization settings (simplified)\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n  const [highContrastMode, setHighContrastMode] = useState(false);\n\n  // Effect to set high contrast mode when overlay is selected\n  useEffect(() => {\n    if (captionPlacement === 'Overlay') {\n      setHighContrastMode(true);\n    }\n  }, [captionPlacement]);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = url => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[7].length === 11 ? match[7] : null;\n  };\n\n  // Initialize with the default URL\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = {\n      ...languageCustomizations\n    };\n\n    // Initialize customizations for any new languages with simplified options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 'Medium',\n          textColor: '#000000',\n          letterSpacing: 'normal'\n        };\n      }\n    });\n    setLanguageCustomizations(newLanguageCustomizations);\n  }, [selectedLanguages]);\n\n  // Handle YouTube link input\n  const handleLinkChange = e => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async videoId => {\n    try {\n      var _data$transcripts$fin, _data$transcripts$;\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Received data:', data);\n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n\n      // Store the full transcript information\n      setAvailableTranscripts(data.transcripts);\n\n      // Also keep the language codes for backward compatibility\n      const languageCodes = data.transcripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n\n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = ((_data$transcripts$fin = data.transcripts.find(t => t.language_code === 'en')) === null || _data$transcripts$fin === void 0 ? void 0 : _data$transcripts$fin.language_code) || ((_data$transcripts$ = data.transcripts[0]) === null || _data$transcripts$ === void 0 ? void 0 : _data$transcripts$.language_code) || '';\n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: '',\n        tertiary: ''\n      });\n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n\n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n\n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          const data = await response.json();\n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n\n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = text => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n\n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary, tertiary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = {\n      ...selectedLanguages\n    };\n\n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => ({\n      ...prev,\n      [lang]: {\n        ...prev[lang],\n        [property]: value\n      }\n    }));\n  };\n\n  // Get color based on settings\n  const getColor = type => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    switch (type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return '#000000';\n    }\n  };\n\n  // Get font size based on settings\n  const getFontSize = sizeOption => {\n    const sizeMap = {\n      'Small': '0.875rem',\n      'Medium': '1rem',\n      'Large': '1.25rem',\n      'X-Large': '1.5rem'\n    };\n    return sizeMap[sizeOption] || '1rem';\n  };\n\n  // Get font family based on settings\n  const getFontFamily = fontOption => {\n    const fontMap = {\n      'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n      'Roboto': 'Roboto, Arial, sans-serif',\n      'Open Sans': 'Open Sans, Arial, sans-serif',\n      'Noto Sans': 'Noto Sans, Arial, sans-serif',\n      'Verdana': 'Verdana, Geneva, sans-serif',\n      'Courier New': 'Courier New, monospace',\n      'Consolas': 'Consolas, monospace',\n      'Source Code Pro': 'Source Code Pro, monospace',\n      'Sans Serif': 'Arial, Helvetica, sans-serif',\n      'Serif': 'Georgia, Times, serif',\n      'Monospace': 'Courier New, monospace',\n      'Handwriting': 'Comic Sans MS, cursive'\n    };\n    return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n  };\n\n  // Format caption text with styling for parts of speech (simplified)\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial / Helvetica',\n      fontSize: 'Medium',\n      textColor: '#000000',\n      letterSpacing: 'normal'\n    };\n\n    // Define base style for the caption (simplified)\n    let baseStyle = `\n      color: ${highContrastMode ? '#FFFFFF' : customization.textColor};\n      font-family: ${getFontFamily(customization.fontFamily)};\n      font-size: ${getFontSize(customization.fontSize)};\n      letter-spacing: ${customization.letterSpacing};\n      display: inline-block;\n    `;\n\n    // Replace tagged parts of speech with styled spans\n    const formattedText = text.replace(/<noun>(.*?)<\\/noun>/g, (match, content) => `<span style=\"${baseStyle}; color:${getColor('noun')}; text-decoration:underline;\">${content}</span>`).replace(/<verb>(.*?)<\\/verb>/g, (match, content) => `<span style=\"${baseStyle}; color:${getColor('verb')}; text-decoration:underline;\">${content}</span>`).replace(/<adjective>(.*?)<\\/adjective>/g, (match, content) => `<span style=\"${baseStyle}; color:${getColor('adjective')}; text-decoration:underline;\">${content}</span>`);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      dangerouslySetInnerHTML: {\n        __html: formattedText\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 12\n    }, this);\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = lang => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    return {\n      fontFamily: getFontFamily(customization.fontFamily),\n      fontSize: getFontSize(customization.fontSize),\n      color: highContrastMode ? '#FFFFFF' : customization.textColor || '#000000',\n      letterSpacing: customization.letterSpacing || 'normal',\n      backgroundColor: highContrastMode ? '#000000' : 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(caption => currentTime >= caption.start && currentTime <= caption.end);\n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n\n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n\n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = code => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = langCode => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return (transcript === null || transcript === void 0 ? void 0 : transcript.language) || langCode;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"YouTube Multilingual Captions Extractor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: youtubeLink,\n          onChange: handleLinkChange,\n          placeholder: \"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\",\n          className: \"input-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'Load Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-message\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 9\n    }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"youtube-player\",\n              className: \"video-frame\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 15\n          }, this), captionPlacement === 'Overlay' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `captions-overlay ${overlayPosition.vertical} ${overlayPosition.horizontal}`,\n            style: {\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"move-overlay-button\",\n              title: \"Move captions\",\n              onClick: () => {\n                // Cycle through positions\n                let newPosition = {\n                  ...overlayPosition\n                };\n\n                // Cycle through vertical positions\n                if (overlayPosition.vertical === 'bottom') {\n                  newPosition.vertical = 'top';\n                } else if (overlayPosition.vertical === 'top') {\n                  newPosition.vertical = 'center';\n                } else {\n                  newPosition.vertical = 'bottom';\n                }\n\n                // If we've cycled through all vertical positions, change horizontal\n                if (newPosition.vertical === 'bottom') {\n                  if (overlayPosition.horizontal === 'center') {\n                    newPosition.horizontal = 'left';\n                  } else if (overlayPosition.horizontal === 'left') {\n                    newPosition.horizontal = 'right';\n                  } else {\n                    newPosition.horizontal = 'center';\n                  }\n                }\n                setOverlayPosition(newPosition);\n              },\n              children: \"\\u21C4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => activeCaptions[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-caption\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-language\",\n                children: [getLanguageName(lang), \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 563,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-text\",\n                style: getCaptionStyle(lang),\n                children: formatCaptionText(activeCaptions[lang].text, lang)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 566,\n                columnNumber: 25\n              }, this)]\n            }, lang, true, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 13\n        }, this), captionPlacement === 'Below Video' && availableLanguages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"captions-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"active-captions-section\",\n            children: getSelectedLanguagesArray().map(lang => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"active-caption-display\",\n              style: {\n                padding: '10px',\n                marginBottom: '15px',\n                backgroundColor: '#f0f8ff',\n                border: '1px solid #007bff',\n                borderRadius: '5px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"language-title\",\n                style: {\n                  margin: '0 0 5px 0'\n                },\n                children: [getLanguageName(lang), lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : lang === selectedLanguages.tertiary ? ' (Tertiary)' : '']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 599,\n                columnNumber: 23\n              }, this), activeCaptions[lang] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"timestamp\",\n                  style: {\n                    direction: 'ltr',\n                    fontWeight: 'bold'\n                  },\n                  children: [Math.floor(activeCaptions[lang].start / 60), \":\", (activeCaptions[lang].start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(activeCaptions[lang].end / 60), \":\", (activeCaptions[lang].end % 60).toFixed(1).padStart(4, '0')]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 608,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"caption-text\",\n                  style: getCaptionStyle(lang),\n                  children: formatCaptionText(activeCaptions[lang].text, lang)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 614,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"no-caption\",\n                children: \"No caption at current timestamp\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 25\n              }, this)]\n            }, `active-${lang}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transcripts-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"section-subtitle\",\n              children: \"Full Transcripts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _captions$lang;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"language-title\",\n                  children: [getLanguageName(lang), lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : lang === selectedLanguages.tertiary ? ' (Tertiary)' : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 631,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"captions-content\",\n                  style: {\n                    ...getCaptionStyle(lang),\n                    maxHeight: '300px',\n                    overflowY: 'auto',\n                    marginBottom: '20px'\n                  },\n                  children: (_captions$lang = captions[lang]) === null || _captions$lang === void 0 ? void 0 : _captions$lang.map((caption, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`,\n                    onClick: () => {\n                      if (window.player && window.player.seekTo) {\n                        window.player.seekTo(caption.start);\n                      }\n                    },\n                    style: {\n                      cursor: 'pointer'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"timestamp\",\n                      style: {\n                        direction: 'ltr'\n                      },\n                      children: [Math.floor(caption.start / 60), \":\", (caption.start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(caption.end / 60), \":\", (caption.end % 60).toFixed(1).padStart(4, '0')]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 659,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"caption-text\",\n                      children: formatCaptionText(caption.text, lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 663,\n                      columnNumber: 29\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 649,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 639,\n                  columnNumber: 23\n                }, this)]\n              }, `transcript-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 630,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: \"Customize Display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"settings-title\",\n            children: \"Select Languages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Primary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 686,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedLanguages.primary,\n                onChange: e => setLanguageRank(e.target.value, 'primary'),\n                className: \"settings-select language-dropdown\",\n                children: availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: transcript.language_code,\n                  children: transcript.language\n                }, transcript.language_code, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 694,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 688,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 685,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Secondary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 704,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedLanguages.secondary,\n                onChange: e => setLanguageRank(e.target.value, 'secondary'),\n                className: \"settings-select language-dropdown\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 711,\n                  columnNumber: 21\n                }, this), availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: transcript.language_code,\n                  children: transcript.language\n                }, transcript.language_code, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 713,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 706,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 705,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Tertiary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 723,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedLanguages.tertiary,\n                onChange: e => setLanguageRank(e.target.value, 'tertiary'),\n                className: \"settings-select language-dropdown\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 730,\n                  columnNumber: 21\n                }, this), availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: transcript.language_code,\n                  children: transcript.language\n                }, transcript.language_code, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 732,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 725,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"settings-title\",\n            children: \"Global Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 743,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Caption Placement\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 746,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: captionPlacement,\n              onChange: e => setCaptionPlacement(e.target.value),\n              className: \"settings-select\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Below Video\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 752,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Overlay\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 753,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 747,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 745,\n            columnNumber: 15\n          }, this), captionPlacement === 'Overlay' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Default Overlay Position\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 760,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-position-controls\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"position-control-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"position-label\",\n                  children: \"Vertical\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 763,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: overlayPosition.vertical,\n                  onChange: e => setOverlayPosition({\n                    ...overlayPosition,\n                    vertical: e.target.value\n                  }),\n                  className: \"settings-select position-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"top\",\n                    children: \"Top\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 769,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"center\",\n                    children: \"Middle\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 770,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"bottom\",\n                    children: \"Bottom\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 771,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 764,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 762,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"position-control-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"position-label\",\n                  children: \"Horizontal\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 776,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: overlayPosition.horizontal,\n                  onChange: e => setOverlayPosition({\n                    ...overlayPosition,\n                    horizontal: e.target.value\n                  }),\n                  className: \"settings-select position-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"left\",\n                    children: \"Left\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 782,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"center\",\n                    children: \"Center\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 783,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"right\",\n                    children: \"Right\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 784,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 777,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 775,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 761,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 759,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-item\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"toggle-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"toggle-switch\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: highContrastMode,\n                  onChange: () => setHighContrastMode(!highContrastMode)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 795,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"toggle-slider\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 800,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 794,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"toggle-label\",\n                children: \"High Contrast Mode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 802,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 793,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Parts of Speech Colors\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 808,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pos-color-controls\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"pos-label\",\n                  children: \"Nouns\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 811,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: nounColor,\n                  onChange: e => setNounColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 817,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 818,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 819,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 820,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 821,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 812,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 810,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"pos-label\",\n                  children: \"Verbs\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 826,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: verbColor,\n                  onChange: e => setVerbColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 832,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 833,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 834,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 835,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 836,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 827,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 825,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"pos-label\",\n                  children: \"Adjectives\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 841,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: adjectiveColor,\n                  onChange: e => setAdjectiveColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 847,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 848,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 849,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 850,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 851,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 842,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 840,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 809,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 807,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"settings-title\",\n            children: \"Language Customizations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 860,\n            columnNumber: 15\n          }, this), getSelectedLanguagesArray().map(lang => {\n            var _languageCustomizatio, _languageCustomizatio2, _languageCustomizatio3, _languageCustomizatio4;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-customization-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-card-header\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: getLanguageName(lang)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 865,\n                  columnNumber: 21\n                }, this), lang === selectedLanguages.primary && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"language-tag primary\",\n                  children: \"Primary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 866,\n                  columnNumber: 60\n                }, this), lang === selectedLanguages.secondary && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"language-tag secondary\",\n                  children: \"Secondary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 867,\n                  columnNumber: 62\n                }, this), lang === selectedLanguages.tertiary && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"language-tag tertiary\",\n                  children: \"Tertiary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 868,\n                  columnNumber: 61\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 864,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-card-content\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"settings-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"settings-label\",\n                    children: \"Font\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 874,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: ((_languageCustomizatio = languageCustomizations[lang]) === null || _languageCustomizatio === void 0 ? void 0 : _languageCustomizatio.fontFamily) || 'Arial / Helvetica',\n                    onChange: e => updateLanguageCustomization(lang, 'fontFamily', e.target.value),\n                    className: \"settings-select\",\n                    children: [/*#__PURE__*/_jsxDEV(\"optgroup\", {\n                      label: \"Sans-serif\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Arial / Helvetica\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 881,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Roboto\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 882,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Open Sans\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 883,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Noto Sans\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 884,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Verdana\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 885,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 880,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n                      label: \"Monospace\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Courier New\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 888,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Consolas\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 889,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Source Code Pro\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 890,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 887,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 875,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 873,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"settings-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"settings-label\",\n                    children: \"Size\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 897,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: ((_languageCustomizatio2 = languageCustomizations[lang]) === null || _languageCustomizatio2 === void 0 ? void 0 : _languageCustomizatio2.fontSize) || 'Medium',\n                    onChange: e => updateLanguageCustomization(lang, 'fontSize', e.target.value),\n                    className: \"settings-select\",\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      children: \"Small\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 903,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      children: \"Medium\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 904,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      children: \"Large\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 905,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      children: \"X-Large\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 906,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 898,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 896,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"settings-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"settings-label\",\n                    children: \"Color\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 912,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: ((_languageCustomizatio3 = languageCustomizations[lang]) === null || _languageCustomizatio3 === void 0 ? void 0 : _languageCustomizatio3.textColor) || '#000000',\n                    onChange: e => updateLanguageCustomization(lang, 'textColor', e.target.value),\n                    className: \"settings-select\",\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"#000000\",\n                      children: \"Black\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 918,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"#FFFFFF\",\n                      children: \"White\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 919,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"#333333\",\n                      children: \"Dark Gray\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 920,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"#1A1AFF\",\n                      children: \"Dark Blue\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 921,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 913,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 911,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"settings-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"settings-label\",\n                    children: \"Character Spacing\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 927,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: ((_languageCustomizatio4 = languageCustomizations[lang]) === null || _languageCustomizatio4 === void 0 ? void 0 : _languageCustomizatio4.letterSpacing) || 'normal',\n                    onChange: e => updateLanguageCustomization(lang, 'letterSpacing', e.target.value),\n                    className: \"settings-select\",\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"normal\",\n                      children: \"Normal\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 933,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"0.05em\",\n                      children: \"Slightly Expanded\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 934,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"0.1em\",\n                      children: \"Expanded\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 935,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"-0.03em\",\n                      children: \"Condensed\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 936,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 928,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 926,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"reset-button\",\n                  onClick: () => {\n                    // Reset this language's customizations to defaults\n                    setLanguageCustomizations(prev => ({\n                      ...prev,\n                      [lang]: {\n                        fontFamily: 'Arial / Helvetica',\n                        fontSize: 'Medium',\n                        textColor: '#000000',\n                        letterSpacing: 'normal'\n                      }\n                    }));\n                  },\n                  children: \"Reset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 941,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 871,\n                columnNumber: 19\n              }, this)]\n            }, `customize-${lang}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 863,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"export-section\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"export-button\",\n            onClick: () => {\n              // Export captions with customization settings\n              const exportData = {\n                captions,\n                customizations: languageCustomizations,\n                selectedLanguages,\n                videoId\n              };\n              const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n                type: 'application/json'\n              });\n              const url = URL.createObjectURL(blob);\n              const a = document.createElement('a');\n              a.href = url;\n              a.download = `captions-${videoId}.json`;\n              a.click();\n            },\n            children: \"Export Captions as JSON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 965,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 964,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 477,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Hgi0TltMgWQDWcG5R4C2RneY0Xs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","App","_s","youtubeLink","setYoutubeLink","videoId","setVideoId","captions","setCaptions","selectedLanguages","setSelectedLanguages","primary","secondary","tertiary","availableLanguages","setAvailableLanguages","availableTranscripts","setAvailableTranscripts","status","setStatus","isLoading","setIsLoading","currentTime","setCurrentTime","activeCaptions","setActiveCaptions","captionPlacement","setCaptionPlacement","overlayPosition","setOverlayPosition","vertical","horizontal","nounColor","setNounColor","verbColor","setVerbColor","adjectiveColor","setAdjectiveColor","languageCustomizations","setLanguageCustomizations","highContrastMode","setHighContrastMode","extractVideoId","url","regExp","match","length","id","newLanguageCustomizations","Object","values","forEach","lang","fontFamily","fontSize","textColor","letterSpacing","handleLinkChange","e","target","value","handleSubmit","preventDefault","fetchAvailableLanguages","_data$transcripts$fin","_data$transcripts$","console","log","response","fetch","ok","errorText","text","error","Error","data","json","transcripts","languageCodes","map","t","language_code","defaultPrimary","find","fetchCaptions","message","languages","captionsData","warn","processedTranscript","transcript","caption","applyPOSTagging","end","start","duration","keys","commonNouns","commonVerbs","commonAdjectives","words","split","taggedText","i","originalWord","word","toLowerCase","replace","includes","setLanguageRank","rank","updatedLanguages","key","updateLanguageCustomization","property","prev","getColor","type","colorMap","getFontSize","sizeOption","sizeMap","getFontFamily","fontOption","fontMap","formatCaptionText","customization","baseStyle","formattedText","content","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","getSelectedLanguagesArray","filter","getCaptionStyle","isRTL","color","backgroundColor","direction","newActiveCaptions","activeCaption","interval","setInterval","window","YT","Player","player","getCurrentTime","clearInterval","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","createYouTubePlayer","destroy","events","onPlayerReady","onPlayerStateChange","event","PlayerState","PLAYING","updateTime","getPlayerState","requestAnimationFrame","findTranscriptByLanguageCode","code","getLanguageName","langCode","language","className","children","onSubmit","onChange","placeholder","disabled","style","title","onClick","newPosition","padding","marginBottom","border","borderRadius","margin","fontWeight","Math","floor","toFixed","padStart","_captions$lang","maxHeight","overflowY","index","seekTo","cursor","checked","_languageCustomizatio","_languageCustomizatio2","_languageCustomizatio3","_languageCustomizatio4","label","exportData","customizations","blob","Blob","JSON","stringify","URL","createObjectURL","a","href","download","click","_c","$RefreshReg$"],"sources":["/Users/arunasrivastava/random/cse482/Multilingual/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// API base URL - change this if your backend is running on a different port/host\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n\nfunction App() {\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: '',\n    tertiary: ''\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  \n  // New state for overlay position\n  const [overlayPosition, setOverlayPosition] = useState({\n    vertical: 'bottom',\n    horizontal: 'center'\n  });\n  \n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  \n  // Per-language customization settings (simplified)\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n  const [highContrastMode, setHighContrastMode] = useState(false);\n  \n  // Effect to set high contrast mode when overlay is selected\n  useEffect(() => {\n    if (captionPlacement === 'Overlay') {\n      setHighContrastMode(true);\n    }\n  }, [captionPlacement]);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = (url) => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[7].length === 11) ? match[7] : null;\n  };\n\n  // Initialize with the default URL\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = { ...languageCustomizations };\n    \n    // Initialize customizations for any new languages with simplified options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 'Medium',\n          textColor: '#000000',\n          letterSpacing: 'normal'\n        };\n      }\n    });\n    \n    setLanguageCustomizations(newLanguageCustomizations);\n  }, [selectedLanguages]);\n\n  // Handle YouTube link input\n  const handleLinkChange = (e) => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async (videoId) => {\n    try {\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Received data:', data);\n      \n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Store the full transcript information\n      setAvailableTranscripts(data.transcripts);\n      \n      // Also keep the language codes for backward compatibility\n      const languageCodes = data.transcripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n      \n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = data.transcripts.find(t => t.language_code === 'en')?.language_code \n        || (data.transcripts[0]?.language_code || '');\n        \n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: '',\n        tertiary: ''\n      });\n      \n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n      \n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n      \n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n      \n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          \n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          \n          const data = await response.json();\n          \n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n          \n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          \n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      \n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = (text) => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n    \n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      \n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      \n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary, tertiary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = { ...selectedLanguages };\n    \n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => ({\n      ...prev,\n      [lang]: {\n        ...prev[lang],\n        [property]: value\n      }\n    }));\n  };\n\n  // Get color based on settings\n  const getColor = (type) => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    \n    switch(type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return '#000000';\n    }\n  };\n\n  // Get font size based on settings\n  const getFontSize = (sizeOption) => {\n    const sizeMap = {\n      'Small': '0.875rem',\n      'Medium': '1rem',\n      'Large': '1.25rem',\n      'X-Large': '1.5rem'\n    };\n    \n    return sizeMap[sizeOption] || '1rem';\n  };\n\n  // Get font family based on settings\n  const getFontFamily = (fontOption) => {\n    const fontMap = {\n      'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n      'Roboto': 'Roboto, Arial, sans-serif',\n      'Open Sans': 'Open Sans, Arial, sans-serif',\n      'Noto Sans': 'Noto Sans, Arial, sans-serif',\n      'Verdana': 'Verdana, Geneva, sans-serif',\n      'Courier New': 'Courier New, monospace',\n      'Consolas': 'Consolas, monospace',\n      'Source Code Pro': 'Source Code Pro, monospace',\n      'Sans Serif': 'Arial, Helvetica, sans-serif',\n      'Serif': 'Georgia, Times, serif',\n      'Monospace': 'Courier New, monospace',\n      'Handwriting': 'Comic Sans MS, cursive'\n    };\n    \n    return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n  };\n\n  // Format caption text with styling for parts of speech (simplified)\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    \n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial / Helvetica',\n      fontSize: 'Medium',\n      textColor: '#000000',\n      letterSpacing: 'normal'\n    };\n\n    // Define base style for the caption (simplified)\n    let baseStyle = `\n      color: ${highContrastMode ? '#FFFFFF' : customization.textColor};\n      font-family: ${getFontFamily(customization.fontFamily)};\n      font-size: ${getFontSize(customization.fontSize)};\n      letter-spacing: ${customization.letterSpacing};\n      display: inline-block;\n    `;\n    \n    // Replace tagged parts of speech with styled spans\n    const formattedText = text\n      .replace(/<noun>(.*?)<\\/noun>/g, (match, content) => \n        `<span style=\"${baseStyle}; color:${getColor('noun')}; text-decoration:underline;\">${content}</span>`)\n      .replace(/<verb>(.*?)<\\/verb>/g, (match, content) => \n        `<span style=\"${baseStyle}; color:${getColor('verb')}; text-decoration:underline;\">${content}</span>`)\n      .replace(/<adjective>(.*?)<\\/adjective>/g, (match, content) => \n        `<span style=\"${baseStyle}; color:${getColor('adjective')}; text-decoration:underline;\">${content}</span>`);\n    \n    return <span dangerouslySetInnerHTML={{ __html: formattedText }} />;\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = (lang) => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    \n    return {\n      fontFamily: getFontFamily(customization.fontFamily),\n      fontSize: getFontSize(customization.fontSize),\n      color: highContrastMode ? '#FFFFFF' : (customization.textColor || '#000000'),\n      letterSpacing: customization.letterSpacing || 'normal',\n      backgroundColor: highContrastMode ? '#000000' : 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    \n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(\n          caption => currentTime >= caption.start && currentTime <= caption.end\n        );\n        \n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    \n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n    \n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    \n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      \n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    \n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      \n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    \n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    \n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    \n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = (code) => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = (langCode) => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return transcript?.language || langCode;\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"app-title\">YouTube Multilingual Captions Extractor</h1>\n      \n      {/* Input Box */}\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={youtubeLink}\n            onChange={handleLinkChange}\n            placeholder=\"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\"\n            className=\"input-field\"\n          />\n          <button \n            type=\"submit\"\n            className=\"submit-button\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load Video'}\n          </button>\n        </div>\n      </form>\n      \n      {/* Status message */}\n      {status && (\n        <div className=\"status-message\">\n          {status}\n        </div>\n      )}\n      \n      {videoId && (\n        <div className=\"main-content\">\n          {/* Main Content Area (Video + Captions) */}\n          <div className=\"content-area\">\n            {/* Video Embed Box */}\n            <div className=\"video-container\">\n              <h2 className=\"section-title\">Video</h2>\n              <div className=\"video-wrapper\">\n                {/* Changed to use YouTube API for better time synchronization */}\n                <div id=\"youtube-player\" className=\"video-frame\"></div>\n              </div>\n              \n              {/* Real-time captions overlay - redesigned with positioning */}\n              {captionPlacement === 'Overlay' && (\n                <div \n                  className={`captions-overlay ${overlayPosition.vertical} ${overlayPosition.horizontal}`}\n                  style={{\n                    backgroundColor: 'rgba(0, 0, 0, 0.7)'\n                  }}\n                >\n                  <button \n                    className=\"move-overlay-button\" \n                    title=\"Move captions\"\n                    onClick={() => {\n                      // Cycle through positions\n                      let newPosition = {...overlayPosition};\n                      \n                      // Cycle through vertical positions\n                      if (overlayPosition.vertical === 'bottom') {\n                        newPosition.vertical = 'top';\n                      } else if (overlayPosition.vertical === 'top') {\n                        newPosition.vertical = 'center';\n                      } else {\n                        newPosition.vertical = 'bottom';\n                      }\n                      \n                      // If we've cycled through all vertical positions, change horizontal\n                      if (newPosition.vertical === 'bottom') {\n                        if (overlayPosition.horizontal === 'center') {\n                          newPosition.horizontal = 'left';\n                        } else if (overlayPosition.horizontal === 'left') {\n                          newPosition.horizontal = 'right';\n                        } else {\n                          newPosition.horizontal = 'center';\n                        }\n                      }\n                      \n                      setOverlayPosition(newPosition);\n                    }}\n                  >\n                    ⇄\n                  </button>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    activeCaptions[lang] && (\n                      <div key={lang} className=\"overlay-caption\">\n                        <span className=\"overlay-language\">\n                          {getLanguageName(lang)}:\n                        </span>\n                        <span \n                          className=\"overlay-text\"\n                          style={getCaptionStyle(lang)}\n                        >\n                          {formatCaptionText(activeCaptions[lang].text, lang)}\n                        </span>\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Captions Display - for Below Video mode only */}\n            {captionPlacement === 'Below Video' && \n             availableLanguages.length > 0 && (\n              <div className=\"captions-container\">\n                \n                {/* Current active captions section - all languages together */}\n                <div className=\"active-captions-section\">\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    <div \n                      key={`active-${lang}`} \n                      className=\"active-caption-display\"\n                      style={{\n                        padding: '10px',\n                        marginBottom: '15px',\n                        backgroundColor: '#f0f8ff',\n                        border: '1px solid #007bff',\n                        borderRadius: '5px'\n                      }}\n                    >\n                      <h4 className=\"language-title\" style={{ margin: '0 0 5px 0' }}>\n                        {getLanguageName(lang)} \n                        {lang === selectedLanguages.primary ? ' (Primary)' : \n                         lang === selectedLanguages.secondary ? ' (Secondary)' : \n                         lang === selectedLanguages.tertiary ? ' (Tertiary)' : ''}\n                      </h4>\n                      \n                      {activeCaptions[lang] ? (\n                        <>\n                          <div className=\"timestamp\" style={{ direction: 'ltr', fontWeight: 'bold' }}>\n                            {Math.floor(activeCaptions[lang].start / 60)}:\n                            {(activeCaptions[lang].start % 60).toFixed(1).padStart(4, '0')} - \n                            {Math.floor(activeCaptions[lang].end / 60)}:\n                            {(activeCaptions[lang].end % 60).toFixed(1).padStart(4, '0')}\n                          </div>\n                          <div className=\"caption-text\" style={getCaptionStyle(lang)}>\n                            {formatCaptionText(activeCaptions[lang].text, lang)}\n                          </div>\n                        </>\n                      ) : (\n                        <span className=\"no-caption\">No caption at current timestamp</span>\n                      )}\n                    </div>\n                  ))}\n                </div>\n                \n                {/* Transcripts section - all languages */}\n                <div className=\"transcripts-section\">\n                  <h3 className=\"section-subtitle\">Full Transcripts</h3>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    <div key={`transcript-${lang}`} className=\"language-section\">\n                      <h4 className=\"language-title\">\n                        {getLanguageName(lang)} \n                        {lang === selectedLanguages.primary ? ' (Primary)' : \n                         lang === selectedLanguages.secondary ? ' (Secondary)' : \n                         lang === selectedLanguages.tertiary ? ' (Tertiary)' : ''}\n                      </h4>\n                      \n                      {/* Full transcript */}\n                      <div \n                        className=\"captions-content\"\n                        style={{\n                          ...getCaptionStyle(lang),\n                          maxHeight: '300px',\n                          overflowY: 'auto',\n                          marginBottom: '20px'\n                        }}\n                      >\n                        {captions[lang]?.map((caption, index) => (\n                          <div \n                            key={index} \n                            className={`caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`}\n                            onClick={() => {\n                              if (window.player && window.player.seekTo) {\n                                window.player.seekTo(caption.start);\n                              }\n                            }}\n                            style={{ cursor: 'pointer' }}\n                          >\n                            <div className=\"timestamp\" style={{ direction: 'ltr' }}>\n                              {Math.floor(caption.start / 60)}:{(caption.start % 60).toFixed(1).padStart(4, '0')} - \n                              {Math.floor(caption.end / 60)}:{(caption.end % 60).toFixed(1).padStart(4, '0')}\n                            </div>\n                            <div className=\"caption-text\">\n                              {formatCaptionText(caption.text, lang)}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Settings Panel with new accessibility features */}\n          <div className=\"settings-panel\">\n            <h2 className=\"section-title\">Customize Display</h2>\n            \n            {/* Language Selection - Updated with ranked dropdowns */}\n            <div className=\"settings-section\">\n              <h3 className=\"settings-title\">Select Languages</h3>\n              \n              {/* Primary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\">Primary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    value={selectedLanguages.primary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'primary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    {availableTranscripts.map(transcript => (\n                      <option key={transcript.language_code} value={transcript.language_code}>\n                        {transcript.language}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              \n              {/* Secondary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\">Secondary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    value={selectedLanguages.secondary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'secondary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    <option value=\"\">None</option>\n                    {availableTranscripts.map(transcript => (\n                      <option key={transcript.language_code} value={transcript.language_code}>\n                        {transcript.language}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              \n              {/* Tertiary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\">Tertiary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    value={selectedLanguages.tertiary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'tertiary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    <option value=\"\">None</option>\n                    {availableTranscripts.map(transcript => (\n                      <option key={transcript.language_code} value={transcript.language_code}>\n                        {transcript.language}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n            \n            {/* Caption Placement */}\n            <div className=\"settings-section\">\n              <h3 className=\"settings-title\">Global Settings</h3>\n              \n              <div className=\"settings-item\">\n                <label className=\"settings-label\">Caption Placement</label>\n                <select \n                  value={captionPlacement} \n                  onChange={(e) => setCaptionPlacement(e.target.value)}\n                  className=\"settings-select\"\n                >\n                  <option>Below Video</option>\n                  <option>Overlay</option>\n                </select>\n              </div>\n              \n              {/* Overlay Position Controls - only show when Overlay is selected */}\n              {captionPlacement === 'Overlay' && (\n                <div className=\"settings-item\">\n                  <label className=\"settings-label\">Default Overlay Position</label>\n                  <div className=\"overlay-position-controls\">\n                    <div className=\"position-control-group\">\n                      <label className=\"position-label\">Vertical</label>\n                      <select \n                        value={overlayPosition.vertical} \n                        onChange={(e) => setOverlayPosition({...overlayPosition, vertical: e.target.value})}\n                        className=\"settings-select position-select\"\n                      >\n                        <option value=\"top\">Top</option>\n                        <option value=\"center\">Middle</option>\n                        <option value=\"bottom\">Bottom</option>\n                      </select>\n                    </div>\n                    \n                    <div className=\"position-control-group\">\n                      <label className=\"position-label\">Horizontal</label>\n                      <select \n                        value={overlayPosition.horizontal} \n                        onChange={(e) => setOverlayPosition({...overlayPosition, horizontal: e.target.value})}\n                        className=\"settings-select position-select\"\n                      >\n                        <option value=\"left\">Left</option>\n                        <option value=\"center\">Center</option>\n                        <option value=\"right\">Right</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              {/* High Contrast Mode Toggle - modernized */}\n              <div className=\"settings-item\">\n                <div className=\"toggle-container\">\n                  <label className=\"toggle-switch\">\n                    <input\n                      type=\"checkbox\"\n                      checked={highContrastMode}\n                      onChange={() => setHighContrastMode(!highContrastMode)}\n                    />\n                    <span className=\"toggle-slider\"></span>\n                  </label>\n                  <span className=\"toggle-label\">High Contrast Mode</span>\n                </div>\n              </div>\n              \n              {/* Parts of Speech Highlighting - compact version */}\n              <div className=\"settings-item\">\n                <label className=\"settings-label\">Parts of Speech Colors</label>\n                <div className=\"pos-color-controls\">\n                  <div className=\"pos-color-item\">\n                    <span className=\"pos-label\">Nouns</span>\n                    <select \n                      value={nounColor} \n                      onChange={(e) => setNounColor(e.target.value)}\n                      className=\"settings-select pos-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"pos-color-item\">\n                    <span className=\"pos-label\">Verbs</span>\n                    <select \n                      value={verbColor} \n                      onChange={(e) => setVerbColor(e.target.value)}\n                      className=\"settings-select pos-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"pos-color-item\">\n                    <span className=\"pos-label\">Adjectives</span>\n                    <select \n                      value={adjectiveColor} \n                      onChange={(e) => setAdjectiveColor(e.target.value)}\n                      className=\"settings-select pos-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Language-specific customization */}\n            <div className=\"settings-section\">\n              <h3 className=\"settings-title\">Language Customizations</h3>\n              \n              {getSelectedLanguagesArray().map(lang => (\n                <div key={`customize-${lang}`} className=\"language-customization-card\">\n                  <div className=\"language-card-header\">\n                    <span>{getLanguageName(lang)}</span>\n                    {lang === selectedLanguages.primary && <span className=\"language-tag primary\">Primary</span>}\n                    {lang === selectedLanguages.secondary && <span className=\"language-tag secondary\">Secondary</span>}\n                    {lang === selectedLanguages.tertiary && <span className=\"language-tag tertiary\">Tertiary</span>}\n                  </div>\n                  \n                  <div className=\"language-card-content\">\n                    {/* Font Type */}\n                    <div className=\"settings-item\">\n                      <label className=\"settings-label\">Font</label>\n                      <select \n                        value={languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica'} \n                        onChange={(e) => updateLanguageCustomization(lang, 'fontFamily', e.target.value)}\n                        className=\"settings-select\"\n                      >\n                        <optgroup label=\"Sans-serif\">\n                          <option>Arial / Helvetica</option>\n                          <option>Roboto</option>\n                          <option>Open Sans</option>\n                          <option>Noto Sans</option>\n                          <option>Verdana</option>\n                        </optgroup>\n                        <optgroup label=\"Monospace\">\n                          <option>Courier New</option>\n                          <option>Consolas</option>\n                          <option>Source Code Pro</option>\n                        </optgroup>\n                      </select>\n                    </div>\n                    \n                    {/* Font Size */}\n                    <div className=\"settings-item\">\n                      <label className=\"settings-label\">Size</label>\n                      <select \n                        value={languageCustomizations[lang]?.fontSize || 'Medium'} \n                        onChange={(e) => updateLanguageCustomization(lang, 'fontSize', e.target.value)}\n                        className=\"settings-select\"\n                      >\n                        <option>Small</option>\n                        <option>Medium</option>\n                        <option>Large</option>\n                        <option>X-Large</option>\n                      </select>\n                    </div>\n                    \n                    {/* Text Color */}\n                    <div className=\"settings-item\">\n                      <label className=\"settings-label\">Color</label>\n                      <select \n                        value={languageCustomizations[lang]?.textColor || '#000000'} \n                        onChange={(e) => updateLanguageCustomization(lang, 'textColor', e.target.value)}\n                        className=\"settings-select\"\n                      >\n                        <option value=\"#000000\">Black</option>\n                        <option value=\"#FFFFFF\">White</option>\n                        <option value=\"#333333\">Dark Gray</option>\n                        <option value=\"#1A1AFF\">Dark Blue</option>\n                      </select>\n                    </div>\n                    \n                    {/* Character Spacing */}\n                    <div className=\"settings-item\">\n                      <label className=\"settings-label\">Character Spacing</label>\n                      <select \n                        value={languageCustomizations[lang]?.letterSpacing || 'normal'} \n                        onChange={(e) => updateLanguageCustomization(lang, 'letterSpacing', e.target.value)}\n                        className=\"settings-select\"\n                      >\n                        <option value=\"normal\">Normal</option>\n                        <option value=\"0.05em\">Slightly Expanded</option>\n                        <option value=\"0.1em\">Expanded</option>\n                        <option value=\"-0.03em\">Condensed</option>\n                      </select>\n                    </div>\n                    \n                    {/* Reset Button */}\n                    <button \n                      className=\"reset-button\"\n                      onClick={() => {\n                        // Reset this language's customizations to defaults\n                        setLanguageCustomizations(prev => ({\n                          ...prev,\n                          [lang]: {\n                            fontFamily: 'Arial / Helvetica',\n                            fontSize: 'Medium',\n                            textColor: '#000000',\n                            letterSpacing: 'normal'\n                          }\n                        }));\n                      }}\n                    >\n                      Reset\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            {/* Export button */}\n            <div className=\"export-section\">\n              <button \n                className=\"export-button\"\n                onClick={() => {\n                  // Export captions with customization settings\n                  const exportData = {\n                    captions,\n                    customizations: languageCustomizations,\n                    selectedLanguages,\n                    videoId\n                  };\n                  \n                  const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n                  const url = URL.createObjectURL(blob);\n                  const a = document.createElement('a');\n                  a.href = url;\n                  a.download = `captions-${videoId}.json`;\n                  a.click();\n                }}\n              >\n                Export Captions as JSON\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Additional CSS for overlay positioning is in App.css */}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}