{"ast":null,"code":"var _jsxFileName = \"/Users/arunasrivastava/random/cse482/Multilingual/src/App.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// StyledCaptionText component for reliable font customization\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCaptionText = ({\n  text,\n  customization,\n  darkMode,\n  getColor\n}) => {\n  if (!text) return null;\n\n  // Font styles from customization\n  const fontStyles = {\n    fontFamily: getFontFamily(customization.fontFamily),\n    fontSize: getFontSize(customization.fontSize),\n    fontWeight: getFontWeight(customization.fontWeight),\n    color: darkMode ? '#FFFFFF' : customization.textColor,\n    letterSpacing: customization.letterSpacing || 'normal'\n  };\n\n  // Process the text to identify tagged parts\n  const processText = text => {\n    const segments = [];\n    let remainingText = text;\n\n    // Find all tags using a single regex pattern\n    const tagPattern = /<(noun|verb|adjective)>(.*?)<\\/(noun|verb|adjective)>/;\n    let match;\n    let lastIndex = 0;\n\n    // Use a regex with capturing groups to find all tags\n    const fullPattern = new RegExp(tagPattern, 'g');\n    while ((match = fullPattern.exec(text)) !== null) {\n      // Add text before the tag\n      if (match.index > lastIndex) {\n        segments.push({\n          type: 'text',\n          content: text.substring(lastIndex, match.index)\n        });\n      }\n\n      // Add the tagged content (ensuring tag types match)\n      if (match[1] === match[3]) {\n        segments.push({\n          type: match[1],\n          // 'noun', 'verb', or 'adjective'\n          content: match[2]\n        });\n      } else {\n        // If tags don't match, treat as plain text\n        segments.push({\n          type: 'text',\n          content: match[0]\n        });\n      }\n      lastIndex = match.index + match[0].length;\n    }\n\n    // Add any remaining text\n    if (lastIndex < text.length) {\n      segments.push({\n        type: 'text',\n        content: text.substring(lastIndex)\n      });\n    }\n    return segments;\n  };\n\n  // Parse text into segments\n  const segments = processText(text);\n\n  // Main render function - completely pure React approach\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: fontStyles,\n    children: segments.map((segment, index) => {\n      if (segment.type === 'text') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 18\n        }, this);\n      } else if (segment.type === 'noun') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: getColor('noun'),\n            textDecoration: 'underline'\n          },\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this);\n      } else if (segment.type === 'verb') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: getColor('verb'),\n            textDecoration: 'underline'\n          },\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this);\n      } else if (segment.type === 'adjective') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: getColor('adjective'),\n            textDecoration: 'underline'\n          },\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this);\n      }\n      return null;\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n// API base URL - change this if your backend is running on a different port/host\n_c = StyledCaptionText;\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n// Get font size based on settings\nconst getFontSize = sizeOption => {\n  const sizeMap = {\n    'Small': '0.875rem',\n    'Medium': '1rem',\n    'Large': '1.25rem',\n    'X-Large': '1.5rem'\n  };\n  return sizeMap[sizeOption] || '1.25rem'; // Default to Large\n};\n\n// Get font weight based on settings\nconst getFontWeight = weightOption => {\n  return weightOption || 'bold'; // Default to bold\n};\n\n// Get font family based on settings\nconst getFontFamily = fontOption => {\n  _s2();\n  var _s = $RefreshSig$();\n  const fontMap = {\n    'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n    'Roboto': 'Roboto, Arial, sans-serif',\n    'Open Sans': 'Open Sans, Arial, sans-serif',\n    'Noto Sans': 'Noto Sans, Arial, sans-serif',\n    'Verdana': 'Verdana, Geneva, sans-serif',\n    'Courier New': 'Courier New, monospace',\n    'Consolas': 'Consolas, monospace',\n    'Source Code Pro': 'Source Code Pro, monospace',\n    'Sans Serif': 'Arial, Helvetica, sans-serif',\n    'Serif': 'Georgia, Times, serif',\n    'Monospace': 'Courier New, monospace',\n    'Handwriting': 'Comic Sans MS, cursive'\n  };\n  function App() {\n    _s();\n    const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n    const [videoId, setVideoId] = useState('');\n    const [captions, setCaptions] = useState({});\n    const [selectedLanguages, setSelectedLanguages] = useState({\n      primary: 'en',\n      secondary: ''\n      // tertiary language removed\n    });\n    const [availableLanguages, setAvailableLanguages] = useState([]);\n    const [availableTranscripts, setAvailableTranscripts] = useState([]);\n    const [status, setStatus] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [currentTime, setCurrentTime] = useState(0);\n    const [activeCaptions, setActiveCaptions] = useState({});\n\n    // New state for managing language customization collapse\n    const [collapsedLanguages, setCollapsedLanguages] = useState({});\n\n    // Add missing hiddenLanguages state\n    const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n    // Caption placement state with updated options\n    const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n\n    // State for free movement of overlay captions\n    const [overlayPosition, setOverlayPosition] = useState({\n      x: 50,\n      // percentage\n      y: 80,\n      // percentage\n      isDragging: false,\n      startX: 0,\n      startY: 0\n    });\n\n    // Global customization options\n    const [nounColor, setNounColor] = useState('Electric Blue');\n    const [verbColor, setVerbColor] = useState('Cherry Red');\n    const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n\n    // Per-language customization settings with updated defaults\n    const [languageCustomizations, setLanguageCustomizations] = useState({});\n\n    // Replace high contrast with theme mode\n    const [darkMode, setDarkMode] = useState(false);\n\n    // New state for UI enhancements\n    const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n    const [captionsHeight, setCaptionsHeight] = useState('normal');\n\n    // Refs\n    const overlayRef = useRef(null);\n    const videoContainerRef = useRef(null);\n    const videoResizeHandleRef = useRef(null);\n    const captionsResizeHandleRef = useRef(null);\n    const activeResizeRef = useRef(null);\n\n    // Extract video ID from YouTube URL\n    const extractVideoId = url => {\n      const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n      const match = url.match(regExp);\n      return match && match[7].length === 11 ? match[7] : null;\n    };\n\n    // Toggle settings panel collapse\n    const toggleSettingsPanel = () => {\n      setSettingsPanelCollapsed(!settingsPanelCollapsed);\n    };\n\n    // Toggle captions height\n    const toggleCaptionsHeight = () => {\n      setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n    };\n\n    // Get selected languages as an array (for compatibility with the rest of the code)\n    const getSelectedLanguagesArray = () => {\n      return Object.values(selectedLanguages).filter(lang => lang !== '');\n    };\n    useEffect(() => {\n      const initialCollapsedState = {};\n      getSelectedLanguagesArray().forEach(lang => {\n        initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n      });\n      setCollapsedLanguages(initialCollapsedState);\n    }, [selectedLanguages]);\n\n    // Toggle collapse for a specific language\n    const toggleLanguageCollapse = lang => {\n      setCollapsedLanguages(prev => ({\n        ...prev,\n        [lang]: !prev[lang]\n      }));\n    };\n\n    // Initialize with the default URL and load Iconify script\n    useEffect(() => {\n      const id = extractVideoId(youtubeLink);\n      if (id) {\n        setVideoId(id);\n      }\n\n      // Check for user's preferred color scheme\n      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        setDarkMode(true);\n        document.body.classList.add('dark-mode');\n      }\n\n      // Listen for changes in color scheme preference\n      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n      const handleChange = e => {\n        setDarkMode(e.matches);\n        if (e.matches) {\n          document.body.classList.add('dark-mode');\n        } else {\n          document.body.classList.remove('dark-mode');\n        }\n      };\n\n      // Load Iconify script if it's not already loaded (for the dark mode toggle)\n      if (!window.Iconify) {\n        const script = document.createElement('script');\n        script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n        script.async = true;\n        document.body.appendChild(script);\n      }\n      if (mediaQuery.addEventListener) {\n        mediaQuery.addEventListener('change', handleChange);\n        return () => {\n          mediaQuery.removeEventListener('change', handleChange);\n          // Clean up Iconify script if we added it\n          const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n          if (iconifyScript && !document.head.contains(iconifyScript)) {\n            document.body.removeChild(iconifyScript);\n          }\n        };\n      } else {\n        // Fallback for older browsers\n        mediaQuery.addListener(handleChange);\n        return () => {\n          mediaQuery.removeListener(handleChange);\n          // Clean up Iconify script if we added it\n          const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n          if (iconifyScript && !document.head.contains(iconifyScript)) {\n            document.body.removeChild(iconifyScript);\n          }\n        };\n      }\n    }, []);\n\n    // Initialize language customizations when new languages are selected\n    useEffect(() => {\n      const newLanguageCustomizations = {\n        ...languageCustomizations\n      };\n\n      // Initialize customizations for any new languages with improved default options\n      Object.values(selectedLanguages).forEach(lang => {\n        if (lang && !newLanguageCustomizations[lang]) {\n          newLanguageCustomizations[lang] = {\n            fontFamily: 'Arial / Helvetica',\n            fontSize: 'Large',\n            // Updated default: larger font\n            fontWeight: 'bold',\n            // Added default: bold text\n            textColor: darkMode ? '#FFFFFF' : '#000000',\n            letterSpacing: 'normal'\n          };\n        }\n      });\n      setLanguageCustomizations(newLanguageCustomizations);\n    }, [selectedLanguages, darkMode, languageCustomizations]);\n\n    // Add this function to toggle language visibility\n    const toggleLanguageVisibility = lang => {\n      setHiddenLanguages(prev => ({\n        ...prev,\n        [lang]: !prev[lang]\n      }));\n    };\n\n    // Update language customizations when dark mode changes\n    useEffect(() => {\n      // Update text colors for all languages when dark mode changes\n      const updatedCustomizations = {\n        ...languageCustomizations\n      };\n      Object.keys(updatedCustomizations).forEach(lang => {\n        var _updatedCustomization, _updatedCustomization2;\n        if (((_updatedCustomization = updatedCustomizations[lang]) === null || _updatedCustomization === void 0 ? void 0 : _updatedCustomization.textColor) === '#000000' || ((_updatedCustomization2 = updatedCustomizations[lang]) === null || _updatedCustomization2 === void 0 ? void 0 : _updatedCustomization2.textColor) === '#FFFFFF') {\n          updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n        }\n      });\n      setLanguageCustomizations(updatedCustomizations);\n    }, [darkMode, languageCustomizations]);\n\n    // Set up video container resize functionality\n    useEffect(() => {\n      if (!videoId) return;\n      const videoContainer = videoContainerRef.current;\n      const resizeHandle = videoResizeHandleRef.current;\n      if (!videoContainer || !resizeHandle) return;\n      const handleMouseDown = e => {\n        e.preventDefault();\n\n        // Save initial position and dimensions\n        const startX = e.clientX;\n        const startWidth = videoContainer.offsetWidth;\n        activeResizeRef.current = 'video';\n        const handleMouseMove = moveEvent => {\n          if (activeResizeRef.current !== 'video') return;\n\n          // Calculate new width based on mouse movement\n          const deltaX = moveEvent.clientX - startX;\n          const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n\n          // Set width\n          videoContainer.style.width = `${newWidth}px`;\n\n          // Update the video wrapper's padding-top to maintain aspect ratio\n          const videoWrapper = videoContainer.querySelector('.video-wrapper');\n          if (videoWrapper) {\n            // No need to explicitly set height - padding-top maintains ratio\n            videoWrapper.style.paddingTop = `${9 / 16 * 100}%`; // Keep 16:9 ratio\n          }\n          moveEvent.preventDefault();\n        };\n        const handleMouseUp = () => {\n          activeResizeRef.current = null;\n          document.removeEventListener('mousemove', handleMouseMove);\n          document.removeEventListener('mouseup', handleMouseUp);\n        };\n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n      };\n      resizeHandle.addEventListener('mousedown', handleMouseDown);\n      return () => {\n        if (resizeHandle) {\n          resizeHandle.removeEventListener('mousedown', handleMouseDown);\n        }\n      };\n    }, [videoId]);\n\n    // Set up captions container resize functionality\n    useEffect(() => {\n      if (!captionsResizeHandleRef.current) return;\n      const resizeHandle = captionsResizeHandleRef.current;\n      const handleMouseDown = e => {\n        e.preventDefault();\n\n        // Find the active captions section\n        const captionsSection = document.querySelector('.active-captions-section');\n        if (!captionsSection) return;\n\n        // Save initial position and dimensions\n        const startY = e.clientY;\n        const startHeight = captionsSection.offsetHeight;\n        activeResizeRef.current = 'captions';\n        const handleMouseMove = moveEvent => {\n          if (activeResizeRef.current !== 'captions') return;\n\n          // Calculate new height\n          const height = startHeight + (moveEvent.clientY - startY);\n\n          // Apply new height with min constraint\n          if (height > 100) {\n            captionsSection.style.height = `${height}px`;\n            captionsSection.style.maxHeight = `${height}px`;\n          }\n          moveEvent.preventDefault();\n        };\n        const handleMouseUp = () => {\n          activeResizeRef.current = null;\n          document.removeEventListener('mousemove', handleMouseMove);\n          document.removeEventListener('mouseup', handleMouseUp);\n        };\n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n      };\n      resizeHandle.addEventListener('mousedown', handleMouseDown);\n      return () => {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      };\n    }, [availableLanguages.length]);\n\n    // Handle YouTube link input\n    const handleLinkChange = e => {\n      setYoutubeLink(e.target.value);\n    };\n\n    // Handle form submission\n    const handleSubmit = e => {\n      e.preventDefault();\n      const id = extractVideoId(youtubeLink);\n      if (id) {\n        setVideoId(id);\n        setStatus('Fetching available languages...');\n        setIsLoading(true);\n        fetchAvailableLanguages(id);\n      } else {\n        setStatus('Invalid YouTube URL');\n      }\n    };\n\n    // Function to fetch available languages using the youtube_transcript_api\n    const fetchAvailableLanguages = async videoId => {\n      try {\n        var _data$transcripts$fin, _data$transcripts$;\n        console.log(`Fetching languages for video ID: ${videoId}`);\n        const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(`API error (${response.status}):`, errorText);\n          throw new Error(`Failed to fetch transcript list: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Received data:', data);\n        if (data.error) {\n          console.error('API returned error:', data.error);\n          throw new Error(data.error);\n        }\n\n        // Store the full transcript information\n        setAvailableTranscripts(data.transcripts);\n\n        // Also keep the language codes for backward compatibility\n        const languageCodes = data.transcripts.map(t => t.language_code);\n        setAvailableLanguages(languageCodes);\n        console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n\n        // Set primary language to English if available, otherwise first available language\n        const defaultPrimary = ((_data$transcripts$fin = data.transcripts.find(t => t.language_code === 'en')) === null || _data$transcripts$fin === void 0 ? void 0 : _data$transcripts$fin.language_code) || ((_data$transcripts$ = data.transcripts[0]) === null || _data$transcripts$ === void 0 ? void 0 : _data$transcripts$.language_code) || '';\n        setSelectedLanguages({\n          primary: defaultPrimary,\n          secondary: ''\n        });\n        setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n\n        // Fetch transcripts for all available languages\n        await fetchCaptions(videoId, languageCodes);\n      } catch (error) {\n        console.error('Error fetching transcript languages:', error);\n        setStatus(`Error: ${error.message}`);\n        setIsLoading(false);\n      }\n    };\n\n    // Function to fetch transcripts for all available languages\n    const fetchCaptions = async (videoId, languages) => {\n      try {\n        const captionsData = {};\n\n        // For each language, fetch the transcript\n        for (const lang of languages) {\n          try {\n            const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n            if (!response.ok) {\n              console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n              continue;\n            }\n            const data = await response.json();\n            if (data.error) {\n              console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n              continue;\n            }\n\n            // Process the transcript data - add POS tagging\n            const processedTranscript = data.transcript.map(caption => ({\n              ...caption,\n              text: applyPOSTagging(caption.text),\n              end: caption.start + caption.duration // Calculate end time\n            }));\n            captionsData[lang] = processedTranscript;\n          } catch (error) {\n            console.warn(`Error processing transcript for ${lang}:`, error);\n          }\n        }\n        setCaptions(captionsData);\n        setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n      } catch (error) {\n        console.error('Error fetching captions:', error);\n        setStatus(`Error fetching captions: ${error.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    // Function to apply part-of-speech tagging (simplified for demo)\n    const applyPOSTagging = text => {\n      // This is a simplified implementation. In a production environment,\n      // you would use a more sophisticated NLP approach.\n\n      // Common words lists for basic POS tagging\n      const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n      const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n      const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n      // Tokenize the text\n      const words = text.split(/\\s+/);\n      let taggedText = '';\n      for (let i = 0; i < words.length; i++) {\n        const originalWord = words[i];\n        const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n        if (commonNouns.includes(word)) {\n          taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n        } else if (commonVerbs.includes(word)) {\n          taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n        } else if (commonAdjectives.includes(word)) {\n          taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n        } else {\n          taggedText += originalWord;\n        }\n        if (i < words.length - 1) {\n          taggedText += ' ';\n        }\n      }\n      return taggedText;\n    };\n\n    // Set language rank (primary, secondary)\n    const setLanguageRank = (lang, rank) => {\n      // If language is already selected in another rank, clear it\n      const updatedLanguages = {\n        ...selectedLanguages\n      };\n\n      // If this language is already in another position, remove it\n      Object.keys(updatedLanguages).forEach(key => {\n        if (updatedLanguages[key] === lang && key !== rank) {\n          updatedLanguages[key] = '';\n        }\n      });\n\n      // Set the language to the new rank\n      updatedLanguages[rank] = lang;\n      setSelectedLanguages(updatedLanguages);\n    };\n\n    // Update customization for a specific language\n    const updateLanguageCustomization = (lang, property, value) => {\n      setLanguageCustomizations(prev => ({\n        ...prev,\n        [lang]: {\n          ...prev[lang],\n          [property]: value\n        }\n      }));\n    };\n\n    // Get color based on settings\n    const getColor = type => {\n      const colorMap = {\n        'Electric Blue': '#007bff',\n        'Cherry Red': '#dc3545',\n        'Forest Green': '#28a745',\n        'Sunny Yellow': '#ffc107',\n        'Royal Purple': '#6f42c1'\n      };\n      switch (type) {\n        case 'noun':\n          return colorMap[nounColor] || colorMap['Electric Blue'];\n        case 'verb':\n          return colorMap[verbColor] || colorMap['Cherry Red'];\n        case 'adjective':\n          return colorMap[adjectiveColor] || colorMap['Forest Green'];\n        default:\n          return darkMode ? '#FFFFFF' : '#000000';\n      }\n    };\n    return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n  }\n  _s(App, \"Oqf0qTbPt36iP9CV8mo07EUUUhU=\");\n  ;\n\n  // Format caption text using new StyledCaptionText component\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    const customization = languageCustomizations[lang] || {\n      fontFamily: getFontFamily('Arial / Helvetica'),\n      fontSize: getFontSize('Large'),\n      fontWeight: getFontWeight('bold'),\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 'normal'\n    };\n    return /*#__PURE__*/_jsxDEV(StyledCaptionText, {\n      text: text,\n      customization: customization,\n      darkMode: darkMode,\n      getColor: getColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = lang => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    return {\n      fontFamily: getFontFamily(customization.fontFamily || 'Arial / Helvetica'),\n      fontSize: getFontSize(customization.fontSize || 'Large'),\n      fontWeight: getFontWeight(customization.fontWeight || 'bold'),\n      color: darkMode ? '#FFFFFF' : customization.textColor || '#000000',\n      letterSpacing: customization.letterSpacing || 'normal',\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(caption => currentTime >= caption.start && currentTime <= caption.end);\n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n\n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n\n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = code => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = langCode => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return (transcript === null || transcript === void 0 ? void 0 : transcript.language) || langCode;\n  };\n\n  // Start dragging the caption overlay\n  const handleMouseDown = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n\n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n\n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n\n  // Handle mouse move during dragging - Completely redesigned for immediate, direct movement\n  const handleMouseMove = e => {\n    if (!overlayPosition.isDragging) return;\n\n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate direct position as percentage of container\n    // This immediately places the overlay where the mouse is instead of incremental movement\n    const newX = Math.max(0, Math.min(100, (e.clientX - rect.left) / rect.width * 100));\n    const newY = Math.max(0, Math.min(100, (e.clientY - rect.top) / rect.height * 100));\n\n    // Update position with direct placement for more intuitive movement\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n\n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n\n  // Stop dragging\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle touch start for mobile devices\n  const handleTouchStart = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n\n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', handleTouchEnd);\n\n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n\n  // Handle touch move for mobile devices\n  const handleTouchMove = e => {\n    if (!overlayPosition.isDragging) return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate touch movement delta\n    const deltaX = touch.clientX - overlayPosition.startX;\n    const deltaY = touch.clientY - overlayPosition.startY;\n\n    // Calculate new position in percentage\n    const newX = Math.max(0, Math.min(100, overlayPosition.x + deltaX / rect.width * 100));\n    const newY = Math.max(0, Math.min(100, overlayPosition.y + deltaY / rect.height * 100));\n\n    // Update position and starting points for next movement calculation\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n\n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n\n  // Handle touch end for mobile devices\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n\n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n\n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = time => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"YouTube Multilingual Captions Extractor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 954,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dark-mode-toggle\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"toggle-checkbox\",\n          type: \"checkbox\",\n          checked: darkMode,\n          onChange: toggleDarkMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 959,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-slot\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sun-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify sun-icon\",\n              \"data-icon\": \"feather-sun\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 967,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 966,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"toggle-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 969,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"moon-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify moon-icon\",\n              \"data-icon\": \"feather-moon\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 971,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 970,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 965,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 958,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 957,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: youtubeLink,\n          onChange: handleLinkChange,\n          placeholder: \"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\",\n          className: \"input-field\",\n          \"aria-label\": \"YouTube video URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 980,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'Load Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 988,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 979,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 978,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-message\",\n      role: \"status\",\n      \"aria-live\": \"polite\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1000,\n      columnNumber: 9\n    }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          ref: videoContainerRef,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"section-title\",\n              children: \"Video\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1012,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"placement-toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"placement-label\",\n                children: \"Captions:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1014,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`,\n                onClick: () => setCaptionPlacement('Below Video'),\n                children: \"Below\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1015,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`,\n                onClick: () => setCaptionPlacement('Overlay'),\n                children: \"Overlay\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1021,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1013,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1011,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-wrapper\",\n            style: {\n              paddingTop: '56.25%'\n            },\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"youtube-player\",\n              className: \"video-frame\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1031,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1029,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: videoResizeHandleRef,\n            className: \"video-resize-handle\",\n            title: \"Drag to resize video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1035,\n            columnNumber: 15\n          }, this), captionPlacement === 'Overlay' && /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: overlayRef,\n            className: `captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''}`,\n            style: {\n              position: 'absolute',\n              left: `${overlayPosition.x}%`,\n              top: `${overlayPosition.y}%`,\n              transform: 'translate(-50%, -50%)',\n              cursor: overlayPosition.isDragging ? 'grabbing' : 'grab'\n            },\n            onMouseDown: handleMouseDown,\n            onTouchStart: handleTouchStart,\n            tabIndex: \"0\",\n            role: \"region\",\n            \"aria-label\": \"Movable captions overlay\",\n            onKeyDown: e => {\n              // Arrow key navigation for accessibility\n              const step = 5; // 5% movement steps\n              if (e.key === 'ArrowLeft') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  x: Math.max(0, prev.x - step)\n                }));\n                e.preventDefault();\n              } else if (e.key === 'ArrowRight') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  x: Math.min(100, prev.x + step)\n                }));\n                e.preventDefault();\n              } else if (e.key === 'ArrowUp') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  y: Math.max(0, prev.y - step)\n                }));\n                e.preventDefault();\n              } else if (e.key === 'ArrowDown') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  y: Math.min(100, prev.y + step)\n                }));\n                e.preventDefault();\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-drag-instructions\",\n              children: \"Hold and drag to reposition\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1088,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => activeCaptions[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-caption\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-language\",\n                children: [getLanguageName(lang), \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1095,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-text\",\n                children: formatCaptionText(activeCaptions[lang].text, lang)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1098,\n                columnNumber: 25\n              }, this)]\n            }, lang, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1094,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1043,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1010,\n          columnNumber: 13\n        }, this), captionPlacement === 'Below Video' && availableLanguages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"captions-container closer-to-video\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"toggle-caption-height\",\n              onClick: toggleCaptionsHeight,\n              title: captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions',\n              children: captionsHeight === 'normal' ? '↓' : '↑'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1115,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              // Skip hidden languages\n              if (hiddenLanguages[lang]) return null;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"caption-text-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `language-tag ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`,\n                  children: getLanguageName(lang)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1132,\n                  columnNumber: 23\n                }, this), activeCaptions[lang] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"caption-text\",\n                  children: formatCaptionText(activeCaptions[lang].text, lang)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1137,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"no-caption\",\n                  children: \"No caption at current timestamp\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1141,\n                  columnNumber: 25\n                }, this)]\n              }, `active-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1128,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1114,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: captionsResizeHandleRef,\n            className: \"resize-handle resize-handle-vertical\",\n            title: \"Drag to resize captions height\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1149,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transcripts-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"section-subtitle\",\n              children: \"Full Transcripts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1157,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _captions$lang;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"language-title\",\n                  children: [getLanguageName(lang), lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1161,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"captions-content\",\n                  children: (_captions$lang = captions[lang]) === null || _captions$lang === void 0 ? void 0 : _captions$lang.map((caption, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`,\n                    onClick: () => jumpToTime(caption.start),\n                    tabIndex: \"0\",\n                    role: \"button\",\n                    \"aria-label\": `Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`,\n                    onKeyDown: e => {\n                      if (e.key === 'Enter' || e.key === ' ') {\n                        jumpToTime(caption.start);\n                      }\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"timestamp\",\n                      children: [Math.floor(caption.start / 60), \":\", (caption.start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(caption.end / 60), \":\", (caption.end % 60).toFixed(1).padStart(4, '0')]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1182,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"caption-text\",\n                      children: formatCaptionText(caption.text, lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1186,\n                      columnNumber: 29\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1170,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1168,\n                  columnNumber: 23\n                }, this)]\n              }, `transcript-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1160,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1156,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1111,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1008,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"settings-toggle\",\n          onClick: toggleSettingsPanel,\n          title: settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\",\n          \"aria-expanded\": !settingsPanelCollapsed,\n          \"aria-controls\": \"settings-content\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"settings-toggle-icon\",\n            children: settingsPanelCollapsed ? '»' : '«'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1208,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1201,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"settings-content\",\n          style: {\n            display: settingsPanelCollapsed ? 'none' : 'block',\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Customize Display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1214,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Select Languages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1218,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"primary-language\",\n                children: \"Primary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1222,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"primary-language\",\n                  value: selectedLanguages.primary,\n                  onChange: e => setLanguageRank(e.target.value, 'primary'),\n                  className: \"settings-select language-dropdown\",\n                  children: availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, transcript.language_code, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1231,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1224,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1223,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1221,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"secondary-language\",\n                children: \"Secondary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1241,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"secondary-language\",\n                  value: selectedLanguages.secondary,\n                  onChange: e => setLanguageRank(e.target.value, 'secondary'),\n                  className: \"settings-select language-dropdown\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1249,\n                    columnNumber: 23\n                  }, this), availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, transcript.language_code, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1251,\n                    columnNumber: 25\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1243,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1242,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1240,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1217,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Language Customizations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1262,\n              columnNumber: 17\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _languageCustomizatio, _languageCustomizatio2, _languageCustomizatio3, _languageCustomizatio4, _languageCustomizatio5;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-customization-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-header\",\n                  onClick: () => toggleLanguageCollapse(lang),\n                  style: {\n                    cursor: 'pointer'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"language-header-content\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-name\",\n                      children: getLanguageName(lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1271,\n                      columnNumber: 25\n                    }, this), lang === selectedLanguages.primary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag primary\",\n                      children: \"Primary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1272,\n                      columnNumber: 64\n                    }, this), lang === selectedLanguages.secondary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag secondary\",\n                      children: \"Secondary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1273,\n                      columnNumber: 66\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1270,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"collapse-icon\",\n                    children: collapsedLanguages[lang] ? '▶' : '▼'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1276,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1266,\n                  columnNumber: 21\n                }, this), !collapsedLanguages[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-content\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"settings-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      children: \"Visibility\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1285,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: `visibility-toggle ${hiddenLanguages[lang] ? 'hidden' : 'visible'}`,\n                      onClick: () => toggleLanguageVisibility(lang),\n                      children: hiddenLanguages[lang] ? 'Show language' : 'Hide language'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1286,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      htmlFor: `font-family-${lang}`,\n                      children: \"Font\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1292,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      id: `font-family-${lang}`,\n                      value: ((_languageCustomizatio = languageCustomizations[lang]) === null || _languageCustomizatio === void 0 ? void 0 : _languageCustomizatio.fontFamily) || 'Arial / Helvetica',\n                      onChange: e => updateLanguageCustomization(lang, 'fontFamily', e.target.value),\n                      className: \"settings-select\",\n                      children: [/*#__PURE__*/_jsxDEV(\"optgroup\", {\n                        label: \"Sans-serif\",\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Arial / Helvetica\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1300,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Roboto\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1301,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Open Sans\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1302,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Noto Sans\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1303,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Verdana\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1304,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1299,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n                        label: \"Monospace\",\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Courier New\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1307,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Consolas\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1308,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Source Code Pro\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1309,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1306,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1293,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1284,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"settings-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      htmlFor: `font-size-${lang}`,\n                      children: \"Size\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1317,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      id: `font-size-${lang}`,\n                      value: ((_languageCustomizatio2 = languageCustomizations[lang]) === null || _languageCustomizatio2 === void 0 ? void 0 : _languageCustomizatio2.fontSize) || 'Large',\n                      onChange: e => updateLanguageCustomization(lang, 'fontSize', e.target.value),\n                      className: \"settings-select\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Small\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1324,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Medium\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1325,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Large\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1326,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"X-Large\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1327,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1318,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1316,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"settings-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      htmlFor: `font-weight-${lang}`,\n                      children: \"Font Weight\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1333,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      id: `font-weight-${lang}`,\n                      value: ((_languageCustomizatio3 = languageCustomizations[lang]) === null || _languageCustomizatio3 === void 0 ? void 0 : _languageCustomizatio3.fontWeight) || 'bold',\n                      onChange: e => updateLanguageCustomization(lang, 'fontWeight', e.target.value),\n                      className: \"settings-select\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"normal\",\n                        children: \"Normal\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1340,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"bold\",\n                        children: \"Bold\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1341,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"600\",\n                        children: \"Semi-Bold\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1342,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"300\",\n                        children: \"Light\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1343,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1334,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1332,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"settings-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      htmlFor: `text-color-${lang}`,\n                      children: \"Color\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1349,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      id: `text-color-${lang}`,\n                      value: ((_languageCustomizatio4 = languageCustomizations[lang]) === null || _languageCustomizatio4 === void 0 ? void 0 : _languageCustomizatio4.textColor) || '#000000',\n                      onChange: e => updateLanguageCustomization(lang, 'textColor', e.target.value),\n                      className: \"settings-select\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"#000000\",\n                        children: \"Black\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1356,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"#FFFFFF\",\n                        children: \"White\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1357,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"#333333\",\n                        children: \"Dark Gray\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1358,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"#1A1AFF\",\n                        children: \"Dark Blue\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1359,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1350,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1348,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"settings-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      htmlFor: `letter-spacing-${lang}`,\n                      children: \"Character Spacing\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1365,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      id: `letter-spacing-${lang}`,\n                      value: ((_languageCustomizatio5 = languageCustomizations[lang]) === null || _languageCustomizatio5 === void 0 ? void 0 : _languageCustomizatio5.letterSpacing) || 'normal',\n                      onChange: e => updateLanguageCustomization(lang, 'letterSpacing', e.target.value),\n                      className: \"settings-select\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"normal\",\n                        children: \"Normal\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1372,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"0.05em\",\n                        children: \"Slightly Expanded\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1373,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"0.1em\",\n                        children: \"Expanded\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1374,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"-0.03em\",\n                        children: \"Condensed\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1375,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1366,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1364,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"reset-button\",\n                    onClick: () => {\n                      // Reset this language's customizations to new defaults with larger, bolder text\n                      setLanguageCustomizations(prev => ({\n                        ...prev,\n                        [lang]: {\n                          fontFamily: 'Arial / Helvetica',\n                          fontSize: 'Large',\n                          // Updated from Medium to Large\n                          fontWeight: 'bold',\n                          // New default\n                          textColor: darkMode ? '#FFFFFF' : '#000000',\n                          letterSpacing: 'normal'\n                        }\n                      }));\n                    },\n                    \"aria-label\": `Reset customization for ${getLanguageName(lang)}`,\n                    children: \"Reset\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1379,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1282,\n                  columnNumber: 21\n                }, this)]\n              }, `customize-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1265,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1261,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Part of Speech Highlighting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1406,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pos-color-controls\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"pos-label\",\n                  htmlFor: \"noun-color\",\n                  children: \"Nouns\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1409,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"noun-color\",\n                  value: nounColor,\n                  onChange: e => setNounColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1416,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1417,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1418,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1419,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1420,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1410,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1408,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"pos-label\",\n                  htmlFor: \"verb-color\",\n                  children: \"Verbs\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1425,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"verb-color\",\n                  value: verbColor,\n                  onChange: e => setVerbColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1432,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1433,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1434,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1435,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1436,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1426,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1424,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"pos-label\",\n                  htmlFor: \"adjective-color\",\n                  children: \"Adjectives\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1441,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"adjective-color\",\n                  value: adjectiveColor,\n                  onChange: e => setAdjectiveColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1448,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1449,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1450,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1451,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1452,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1442,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1440,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1407,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1405,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1213,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1200,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1006,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 953,\n    columnNumber: 5\n  }, this);\n};\n_s2(getFontFamily, \"ewq31d5h+FnD/qJW52w5UqeNMN4=\");\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"StyledCaptionText\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","StyledCaptionText","text","customization","darkMode","getColor","fontStyles","fontFamily","getFontFamily","fontSize","getFontSize","fontWeight","getFontWeight","color","textColor","letterSpacing","processText","segments","remainingText","tagPattern","match","lastIndex","fullPattern","RegExp","exec","index","push","type","content","substring","length","style","children","map","segment","fileName","_jsxFileName","lineNumber","columnNumber","textDecoration","_c","API_BASE_URL","sizeOption","sizeMap","weightOption","fontOption","_s2","_s","$RefreshSig$","fontMap","App","youtubeLink","setYoutubeLink","videoId","setVideoId","captions","setCaptions","selectedLanguages","setSelectedLanguages","primary","secondary","availableLanguages","setAvailableLanguages","availableTranscripts","setAvailableTranscripts","status","setStatus","isLoading","setIsLoading","currentTime","setCurrentTime","activeCaptions","setActiveCaptions","collapsedLanguages","setCollapsedLanguages","hiddenLanguages","setHiddenLanguages","captionPlacement","setCaptionPlacement","overlayPosition","setOverlayPosition","x","y","isDragging","startX","startY","nounColor","setNounColor","verbColor","setVerbColor","adjectiveColor","setAdjectiveColor","languageCustomizations","setLanguageCustomizations","setDarkMode","settingsPanelCollapsed","setSettingsPanelCollapsed","captionsHeight","setCaptionsHeight","overlayRef","videoContainerRef","videoResizeHandleRef","captionsResizeHandleRef","activeResizeRef","extractVideoId","url","regExp","toggleSettingsPanel","toggleCaptionsHeight","getSelectedLanguagesArray","Object","values","filter","lang","initialCollapsedState","forEach","toggleLanguageCollapse","prev","id","window","matchMedia","matches","document","body","classList","add","mediaQuery","handleChange","e","remove","Iconify","script","createElement","src","async","appendChild","addEventListener","removeEventListener","iconifyScript","querySelector","head","contains","removeChild","addListener","removeListener","newLanguageCustomizations","toggleLanguageVisibility","updatedCustomizations","keys","_updatedCustomization","_updatedCustomization2","videoContainer","current","resizeHandle","handleMouseDown","preventDefault","clientX","startWidth","offsetWidth","handleMouseMove","moveEvent","deltaX","newWidth","Math","max","width","videoWrapper","paddingTop","handleMouseUp","captionsSection","clientY","startHeight","offsetHeight","height","maxHeight","handleLinkChange","target","value","handleSubmit","fetchAvailableLanguages","_data$transcripts$fin","_data$transcripts$","console","log","response","fetch","ok","errorText","error","Error","data","json","transcripts","languageCodes","t","language_code","defaultPrimary","find","fetchCaptions","message","languages","captionsData","warn","processedTranscript","transcript","caption","applyPOSTagging","end","start","duration","commonNouns","commonVerbs","commonAdjectives","words","split","taggedText","i","originalWord","word","toLowerCase","replace","includes","setLanguageRank","rank","updatedLanguages","key","updateLanguageCustomization","property","colorMap","formatCaptionText","getCaptionStyle","isRTL","backgroundColor","direction","newActiveCaptions","activeCaption","interval","setInterval","YT","Player","player","getCurrentTime","clearInterval","tag","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","createYouTubePlayer","destroy","events","onPlayerReady","onPlayerStateChange","event","PlayerState","PLAYING","updateTime","getPlayerState","requestAnimationFrame","findTranscriptByLanguageCode","code","getLanguageName","langCode","language","rect","getBoundingClientRect","newX","min","left","newY","top","getSelection","removeAllRanges","handleTouchStart","touch","touches","handleTouchMove","passive","handleTouchEnd","deltaY","toggleDarkMode","jumpToTime","time","seekTo","playVideo","className","checked","onChange","onSubmit","placeholder","disabled","role","ref","onClick","title","position","transform","cursor","onMouseDown","onTouchStart","tabIndex","onKeyDown","step","_captions$lang","floor","toFixed","padStart","display","htmlFor","_languageCustomizatio","_languageCustomizatio2","_languageCustomizatio3","_languageCustomizatio4","_languageCustomizatio5","label","$RefreshReg$"],"sources":["/Users/arunasrivastava/random/cse482/Multilingual/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// StyledCaptionText component for reliable font customization\nconst StyledCaptionText = ({ text, customization, darkMode, getColor }) => {\n  if (!text) return null;\n\n  // Font styles from customization\n  const fontStyles = {\n    fontFamily: getFontFamily(customization.fontFamily),\n    fontSize: getFontSize(customization.fontSize),\n    fontWeight: getFontWeight(customization.fontWeight),\n    color: darkMode ? '#FFFFFF' : customization.textColor,\n    letterSpacing: customization.letterSpacing || 'normal',\n  };\n\n  // Process the text to identify tagged parts\n  const processText = (text) => {\n    const segments = [];\n    let remainingText = text;\n    \n    // Find all tags using a single regex pattern\n    const tagPattern = /<(noun|verb|adjective)>(.*?)<\\/(noun|verb|adjective)>/;\n    \n    let match;\n    let lastIndex = 0;\n    \n    // Use a regex with capturing groups to find all tags\n    const fullPattern = new RegExp(tagPattern, 'g');\n    while ((match = fullPattern.exec(text)) !== null) {\n      // Add text before the tag\n      if (match.index > lastIndex) {\n        segments.push({\n          type: 'text',\n          content: text.substring(lastIndex, match.index)\n        });\n      }\n      \n      // Add the tagged content (ensuring tag types match)\n      if (match[1] === match[3]) {\n        segments.push({\n          type: match[1], // 'noun', 'verb', or 'adjective'\n          content: match[2]\n        });\n      } else {\n        // If tags don't match, treat as plain text\n        segments.push({\n          type: 'text',\n          content: match[0]\n        });\n      }\n      \n      lastIndex = match.index + match[0].length;\n    }\n    \n    // Add any remaining text\n    if (lastIndex < text.length) {\n      segments.push({\n        type: 'text',\n        content: text.substring(lastIndex)\n      });\n    }\n    \n    return segments;\n  };\n  \n  // Parse text into segments\n  const segments = processText(text);\n  \n  // Main render function - completely pure React approach\n  return (\n    <span style={fontStyles}>\n      {segments.map((segment, index) => {\n        if (segment.type === 'text') {\n          return <span key={index}>{segment.content}</span>;\n        } else if (segment.type === 'noun') {\n          return (\n            <span \n              key={index}\n              style={{\n                color: getColor('noun'),\n                textDecoration: 'underline'\n              }}\n            >\n              {segment.content}\n            </span>\n          );\n        } else if (segment.type === 'verb') {\n          return (\n            <span \n              key={index}\n              style={{\n                color: getColor('verb'),\n                textDecoration: 'underline'\n              }}\n            >\n              {segment.content}\n            </span>\n          );\n        } else if (segment.type === 'adjective') {\n          return (\n            <span \n              key={index}\n              style={{\n                color: getColor('adjective'),\n                textDecoration: 'underline'\n              }}\n            >\n              {segment.content}\n            </span>\n          );\n        }\n        return null;\n      })}\n    </span>\n  );\n};\n\n// API base URL - change this if your backend is running on a different port/host\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n// Get font size based on settings\nconst getFontSize = (sizeOption) => {\n  const sizeMap = {\n    'Small': '0.875rem',\n    'Medium': '1rem',\n    'Large': '1.25rem',\n    'X-Large': '1.5rem'\n  };\n  \n  return sizeMap[sizeOption] || '1.25rem'; // Default to Large\n};\n\n// Get font weight based on settings\nconst getFontWeight = (weightOption) => {\n  return weightOption || 'bold'; // Default to bold\n};\n\n// Get font family based on settings\nconst getFontFamily = (fontOption) => {\n  const fontMap = {\n    'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n    'Roboto': 'Roboto, Arial, sans-serif',\n    'Open Sans': 'Open Sans, Arial, sans-serif',\n    'Noto Sans': 'Noto Sans, Arial, sans-serif',\n    'Verdana': 'Verdana, Geneva, sans-serif',\n    'Courier New': 'Courier New, monospace',\n    'Consolas': 'Consolas, monospace',\n    'Source Code Pro': 'Source Code Pro, monospace',\n    'Sans Serif': 'Arial, Helvetica, sans-serif',\n    'Serif': 'Georgia, Times, serif',\n    'Monospace': 'Courier New, monospace',\n    'Handwriting': 'Comic Sans MS, cursive'\n  };\n  \nfunction App() {\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n    // tertiary language removed\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n  \n  // Add missing hiddenLanguages state\n  const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  \n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50, // percentage\n    y: 80, // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0\n  });\n  \n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  \n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n  \n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n  \n  // New state for UI enhancements\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n  const [captionsHeight, setCaptionsHeight] = useState('normal');\n  \n  // Refs\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const videoResizeHandleRef = useRef(null);\n  const captionsResizeHandleRef = useRef(null);\n  const activeResizeRef = useRef(null);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = (url) => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[7].length === 11) ? match[7] : null;\n  };\n\n  // Toggle settings panel collapse\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]); \n  \n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = (lang) => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n    \n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n    \n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e) => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n    \n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    \n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = { ...languageCustomizations };\n    \n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 'Large', // Updated default: larger font\n          fontWeight: 'bold', // Added default: bold text\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 'normal'\n        };\n      }\n    });\n    \n    setLanguageCustomizations(newLanguageCustomizations);\n  }, [selectedLanguages, darkMode, languageCustomizations]);\n\n  // Add this function to toggle language visibility\n  const toggleLanguageVisibility = (lang) => {\n    setHiddenLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = { ...languageCustomizations };\n    \n    Object.keys(updatedCustomizations).forEach(lang => {\n      if (updatedCustomizations[lang]?.textColor === '#000000' || updatedCustomizations[lang]?.textColor === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n      }\n    });\n    \n    setLanguageCustomizations(updatedCustomizations);\n  }, [darkMode, languageCustomizations]);\n\n  // Set up video container resize functionality\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const videoContainer = videoContainerRef.current;\n    const resizeHandle = videoResizeHandleRef.current;\n    \n    if (!videoContainer || !resizeHandle) return;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Save initial position and dimensions\n      const startX = e.clientX;\n      const startWidth = videoContainer.offsetWidth;\n      \n      activeResizeRef.current = 'video';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'video') return;\n        \n        // Calculate new width based on mouse movement\n        const deltaX = moveEvent.clientX - startX;\n        const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n        \n        // Set width\n        videoContainer.style.width = `${newWidth}px`;\n        \n        // Update the video wrapper's padding-top to maintain aspect ratio\n        const videoWrapper = videoContainer.querySelector('.video-wrapper');\n        if (videoWrapper) {\n          // No need to explicitly set height - padding-top maintains ratio\n          videoWrapper.style.paddingTop = `${(9/16) * 100}%`; // Keep 16:9 ratio\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      if (resizeHandle) {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      }\n    };\n  }, [videoId]);\n\n  // Set up captions container resize functionality\n  useEffect(() => {\n    if (!captionsResizeHandleRef.current) return;\n    \n    const resizeHandle = captionsResizeHandleRef.current;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Find the active captions section\n      const captionsSection = document.querySelector('.active-captions-section');\n      if (!captionsSection) return;\n      \n      // Save initial position and dimensions\n      const startY = e.clientY;\n      const startHeight = captionsSection.offsetHeight;\n      \n      activeResizeRef.current = 'captions';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'captions') return;\n        \n        // Calculate new height\n        const height = startHeight + (moveEvent.clientY - startY);\n        \n        // Apply new height with min constraint\n        if (height > 100) {\n          captionsSection.style.height = `${height}px`;\n          captionsSection.style.maxHeight = `${height}px`;\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      resizeHandle.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [availableLanguages.length]);\n\n  // Handle YouTube link input\n  const handleLinkChange = (e) => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async (videoId) => {\n    try {\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Received data:', data);\n      \n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Store the full transcript information\n      setAvailableTranscripts(data.transcripts);\n      \n      // Also keep the language codes for backward compatibility\n      const languageCodes = data.transcripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n      \n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = data.transcripts.find(t => t.language_code === 'en')?.language_code \n        || (data.transcripts[0]?.language_code || '');\n        \n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: ''\n      });\n      \n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n      \n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n      \n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n      \n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          \n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          \n          const data = await response.json();\n          \n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n          \n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          \n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      \n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = (text) => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n    \n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      \n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      \n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = { ...selectedLanguages };\n    \n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => ({\n      ...prev,\n      [lang]: {\n        ...prev[lang],\n        [property]: value\n      }\n    }));\n  };\n\n  // Get color based on settings\n  const getColor = (type) => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    \n    switch(type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return darkMode ? '#FFFFFF' : '#000000';\n    }\n  };\n\n    \n    return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n  };\n\n  // Format caption text using new StyledCaptionText component\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    \n    const customization = languageCustomizations[lang] || {\n      fontFamily: getFontFamily('Arial / Helvetica'),\n      fontSize: getFontSize('Large'),\n      fontWeight: getFontWeight('bold'),\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 'normal'\n    };\n    \n    return (\n      <StyledCaptionText \n        text={text} \n        customization={customization} \n        darkMode={darkMode} \n        getColor={getColor} \n      />\n    );\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = (lang) => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    \n    return {\n      fontFamily: getFontFamily(customization.fontFamily || 'Arial / Helvetica'),\n      fontSize: getFontSize(customization.fontSize || 'Large'),\n      fontWeight: getFontWeight(customization.fontWeight || 'bold'),\n      color: darkMode ? '#FFFFFF' : (customization.textColor || '#000000'),\n      letterSpacing: customization.letterSpacing || 'normal',\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    \n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(\n          caption => currentTime >= caption.start && currentTime <= caption.end\n        );\n        \n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    \n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n    \n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    \n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      \n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    \n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      \n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    \n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    \n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    \n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = (code) => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = (langCode) => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return transcript?.language || langCode;\n  };\n  \n  // Start dragging the caption overlay\n  const handleMouseDown = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n    \n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    \n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n  \n  // Handle mouse move during dragging - Completely redesigned for immediate, direct movement\n  const handleMouseMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate direct position as percentage of container\n    // This immediately places the overlay where the mouse is instead of incremental movement\n    const newX = Math.max(0, Math.min(100, ((e.clientX - rect.left) / rect.width) * 100));\n    const newY = Math.max(0, Math.min(100, ((e.clientY - rect.top) / rect.height) * 100));\n    \n    // Update position with direct placement for more intuitive movement\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX, \n      y: newY,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n    \n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n  \n  // Stop dragging\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({ ...prev, isDragging: false }));\n    \n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n  \n  // Handle touch start for mobile devices\n  const handleTouchStart = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n    \n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, { passive: false });\n    document.addEventListener('touchend', handleTouchEnd);\n    \n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n  \n  // Handle touch move for mobile devices\n  const handleTouchMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate touch movement delta\n    const deltaX = touch.clientX - overlayPosition.startX;\n    const deltaY = touch.clientY - overlayPosition.startY;\n    \n    // Calculate new position in percentage\n    const newX = Math.max(0, Math.min(100, overlayPosition.x + (deltaX / rect.width) * 100));\n    const newY = Math.max(0, Math.min(100, overlayPosition.y + (deltaY / rect.height) * 100));\n    \n    // Update position and starting points for next movement calculation\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX, \n      y: newY,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n    \n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n  \n  // Handle touch end for mobile devices\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({ ...prev, isDragging: false }));\n    \n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n  \n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    \n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = (time) => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n\n  return (\n    <div className={`app-container ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <h1 className=\"app-title\">YouTube Multilingual Captions Extractor</h1>\n      \n      {/* Fancy Dark Mode Toggle */}\n      <div className=\"dark-mode-toggle\">\n        <label>\n          <input \n            className=\"toggle-checkbox\" \n            type=\"checkbox\" \n            checked={darkMode}\n            onChange={toggleDarkMode}\n          />\n          <div className=\"toggle-slot\">\n            <div className=\"sun-icon-wrapper\">\n              <div className=\"iconify sun-icon\" data-icon=\"feather-sun\" data-inline=\"false\"></div>\n            </div>\n            <div className=\"toggle-button\"></div>\n            <div className=\"moon-icon-wrapper\">\n              <div className=\"iconify moon-icon\" data-icon=\"feather-moon\" data-inline=\"false\"></div>\n            </div>\n          </div>\n        </label>\n      </div>\n      \n      {/* Input Box */}\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={youtubeLink}\n            onChange={handleLinkChange}\n            placeholder=\"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\"\n            className=\"input-field\"\n            aria-label=\"YouTube video URL\"\n          />\n          <button \n            type=\"submit\"\n            className=\"submit-button\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load Video'}\n          </button>\n        </div>\n      </form>\n      \n      {/* Status message */}\n      {status && (\n        <div className=\"status-message\" role=\"status\" aria-live=\"polite\">\n          {status}\n        </div>\n      )}\n      \n      {videoId && (\n        <div className=\"main-content\">\n          {/* Main Content Area (Video + Captions) */}\n          <div className=\"content-area\">\n            {/* Video Embed Box */}\n            <div className=\"video-container\" ref={videoContainerRef}>\n              <div className=\"video-header\">\n                <h2 className=\"section-title\">Video</h2>\n                <div className=\"placement-toggle\">\n                  <label className=\"placement-label\">Captions:</label>\n                  <button \n                    className={`placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`}\n                    onClick={() => setCaptionPlacement('Below Video')}\n                  >\n                    Below\n                  </button>\n                  <button \n                    className={`placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`}\n                    onClick={() => setCaptionPlacement('Overlay')}\n                  >\n                    Overlay\n                  </button>\n                </div>\n              </div>\n              <div className=\"video-wrapper\" style={{ paddingTop: '56.25%' }}> {/* 16:9 Aspect Ratio */}\n                {/* YouTube player */}\n                <div id=\"youtube-player\" className=\"video-frame\"></div>\n              </div>\n              \n              {/* Video resize handle */}\n              <div \n                ref={videoResizeHandleRef}\n                className=\"video-resize-handle\" \n                title=\"Drag to resize video\"\n              ></div>\n              \n              {/* Real-time captions overlay - with improved draggable functionality */}\n              {captionPlacement === 'Overlay' && (\n                <div \n                  ref={overlayRef}\n                  className={`captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''}`}\n                  style={{\n                    position: 'absolute',\n                    left: `${overlayPosition.x}%`,\n                    top: `${overlayPosition.y}%`,\n                    transform: 'translate(-50%, -50%)',\n                    cursor: overlayPosition.isDragging ? 'grabbing' : 'grab'\n                  }}\n                  onMouseDown={handleMouseDown}\n                  onTouchStart={handleTouchStart}\n                  tabIndex=\"0\"\n                  role=\"region\"\n                  aria-label=\"Movable captions overlay\"\n                  onKeyDown={(e) => {\n                    // Arrow key navigation for accessibility\n                    const step = 5; // 5% movement steps\n                    if (e.key === 'ArrowLeft') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        x: Math.max(0, prev.x - step)\n                      }));\n                      e.preventDefault();\n                    } else if (e.key === 'ArrowRight') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        x: Math.min(100, prev.x + step)\n                      }));\n                      e.preventDefault();\n                    } else if (e.key === 'ArrowUp') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        y: Math.max(0, prev.y - step)\n                      }));\n                      e.preventDefault();\n                    } else if (e.key === 'ArrowDown') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        y: Math.min(100, prev.y + step)\n                      }));\n                      e.preventDefault();\n                    }\n                  }}\n                >\n                  <div className=\"overlay-drag-instructions\">\n                    Hold and drag to reposition\n                  </div>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    activeCaptions[lang] && (\n                      <div key={lang} className=\"overlay-caption\">\n                        <span className=\"overlay-language\">\n                          {getLanguageName(lang)}:\n                        </span>\n                        <span className=\"overlay-text\">\n                          {formatCaptionText(activeCaptions[lang].text, lang)}\n                        </span>\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Captions Display - for Below Video mode only - with reduced spacing */}\n            {captionPlacement === 'Below Video' && \n             availableLanguages.length > 0 && (\n              <div className=\"captions-container closer-to-video\">\n                \n                {/* Current active captions section - all languages together */}\n                <div className={`active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`}>\n                  <button\n                    className=\"toggle-caption-height\"\n                    onClick={toggleCaptionsHeight}\n                    title={captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions'}\n                  >\n                    {captionsHeight === 'normal' ? '↓' : '↑'}\n                  </button>\n                  \n                  {getSelectedLanguagesArray().map(lang => {\n                  // Skip hidden languages\n                  if (hiddenLanguages[lang]) return null;\n                  \n                  return (\n                    <div \n                      key={`active-${lang}`} \n                      className=\"caption-text-container\"\n                    >\n                      <span className={`language-tag ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`}>\n                        {getLanguageName(lang)}\n                      </span>\n                      \n                      {activeCaptions[lang] ? (\n                        <div className=\"caption-text\">\n                          {formatCaptionText(activeCaptions[lang].text, lang)}\n                        </div>\n                      ) : (\n                        <span className=\"no-caption\">No caption at current timestamp</span>\n                      )}\n                    </div>\n                  );\n                })}\n                </div>\n                \n                {/* Caption resize handle */}\n                <div \n                  ref={captionsResizeHandleRef}\n                  className=\"resize-handle resize-handle-vertical\" \n                  title=\"Drag to resize captions height\"\n                ></div>\n                \n                {/* Transcripts section - all languages */}\n                <div className=\"transcripts-section\">\n                  <h3 className=\"section-subtitle\">Full Transcripts</h3>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    <div key={`transcript-${lang}`} className=\"language-section\">\n                      <h4 className=\"language-title\">\n                        {getLanguageName(lang)} \n                        {lang === selectedLanguages.primary ? ' (Primary)' : \n                         lang === selectedLanguages.secondary ? ' (Secondary)' : ''}\n                      </h4>\n                      \n                      {/* Full transcript with timestamps */}\n                      <div className=\"captions-content\">\n                        {captions[lang]?.map((caption, index) => (\n                          <div key={index} \n                            className={`caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`}\n                            onClick={() => jumpToTime(caption.start)}\n                            tabIndex=\"0\"\n                            role=\"button\"\n                            aria-label={`Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`}\n                            onKeyDown={(e) => {\n                              if (e.key === 'Enter' || e.key === ' ') {\n                                jumpToTime(caption.start);\n                              }\n                            }}\n                          >\n                            <div className=\"timestamp\">\n                              {Math.floor(caption.start / 60)}:{(caption.start % 60).toFixed(1).padStart(4, '0')} - \n                              {Math.floor(caption.end / 60)}:{(caption.end % 60).toFixed(1).padStart(4, '0')}\n                            </div>\n                            <div className=\"caption-text\">\n                              {formatCaptionText(caption.text, lang)}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Settings Panel - Now with improved toggle */}\n          <div className={`settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`}>\n            <button \n              className=\"settings-toggle\" \n              onClick={toggleSettingsPanel}\n              title={settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\"}\n              aria-expanded={!settingsPanelCollapsed}\n              aria-controls=\"settings-content\"\n            >\n              <span className=\"settings-toggle-icon\">\n                {settingsPanelCollapsed ? '»' : '«'}\n              </span>\n            </button>\n            \n            <div id=\"settings-content\" style={{ display: settingsPanelCollapsed ? 'none' : 'block', width: '100%' }}>\n              <h2 className=\"section-title\">Customize Display</h2>\n              \n              {/* Language Selection */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Select Languages</h3>\n                \n                {/* Primary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"primary-language\">Primary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"primary-language\"\n                      value={selectedLanguages.primary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'primary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      {availableTranscripts.map(transcript => (\n                        <option key={transcript.language_code} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n                \n                {/* Secondary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"secondary-language\">Secondary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"secondary-language\"\n                      value={selectedLanguages.secondary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'secondary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      <option value=\"\">None</option>\n                      {availableTranscripts.map(transcript => (\n                        <option key={transcript.language_code} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Language-specific customization */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Language Customizations</h3>\n                \n                {getSelectedLanguagesArray().map(lang => (\n                  <div key={`customize-${lang}`} className=\"language-customization-card\">\n                    <div className=\"language-card-header\"\n                      onClick={() => toggleLanguageCollapse(lang)}\n                      style={{ cursor: 'pointer' }}\n                    >\n                      <div className=\"language-header-content\">\n                        <span className=\"language-name\">{getLanguageName(lang)}</span>\n                        {lang === selectedLanguages.primary && <span className=\"language-tag primary\">Primary</span>}\n                        {lang === selectedLanguages.secondary && <span className=\"language-tag secondary\">Secondary</span>}\n                      </div>\n                      {/* Collapse/Expand icon */}\n                      <span className=\"collapse-icon\">\n                        {collapsedLanguages[lang] ? '▶' : '▼'}\n                      </span>\n                    </div>\n\n                    {!collapsedLanguages[lang] && (   \n                    <div className=\"language-card-content\">\n                      {/* Font Type */}\n                      <div className=\"settings-item\">\n                        <label className=\"settings-label\">Visibility</label>\n                        <button \n                          className={`visibility-toggle ${hiddenLanguages[lang] ? 'hidden' : 'visible'}`}\n                          onClick={() => toggleLanguageVisibility(lang)}\n                        >\n                          {hiddenLanguages[lang] ? 'Show language' : 'Hide language'}\n                        </button>\n                        <label className=\"settings-label\" htmlFor={`font-family-${lang}`}>Font</label>\n                        <select \n                          id={`font-family-${lang}`}\n                          value={languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica'} \n                          onChange={(e) => updateLanguageCustomization(lang, 'fontFamily', e.target.value)}\n                          className=\"settings-select\"\n                        >\n                          <optgroup label=\"Sans-serif\">\n                            <option>Arial / Helvetica</option>\n                            <option>Roboto</option>\n                            <option>Open Sans</option>\n                            <option>Noto Sans</option>\n                            <option>Verdana</option>\n                          </optgroup>\n                          <optgroup label=\"Monospace\">\n                            <option>Courier New</option>\n                            <option>Consolas</option>\n                            <option>Source Code Pro</option>\n                          </optgroup>\n                        </select>\n                      </div>\n\n                      \n                      {/* Font Size */}\n                      <div className=\"settings-item\">\n                        <label className=\"settings-label\" htmlFor={`font-size-${lang}`}>Size</label>\n                        <select \n                          id={`font-size-${lang}`}\n                          value={languageCustomizations[lang]?.fontSize || 'Large'} \n                          onChange={(e) => updateLanguageCustomization(lang, 'fontSize', e.target.value)}\n                          className=\"settings-select\"\n                        >\n                          <option>Small</option>\n                          <option>Medium</option>\n                          <option>Large</option>\n                          <option>X-Large</option>\n                        </select>\n                      </div>\n                      \n                      {/* Font Weight */}\n                      <div className=\"settings-item\">\n                        <label className=\"settings-label\" htmlFor={`font-weight-${lang}`}>Font Weight</label>\n                        <select \n                          id={`font-weight-${lang}`}\n                          value={languageCustomizations[lang]?.fontWeight || 'bold'} \n                          onChange={(e) => updateLanguageCustomization(lang, 'fontWeight', e.target.value)}\n                          className=\"settings-select\"\n                        >\n                          <option value=\"normal\">Normal</option>\n                          <option value=\"bold\">Bold</option>\n                          <option value=\"600\">Semi-Bold</option>\n                          <option value=\"300\">Light</option>\n                        </select>\n                      </div>\n                      \n                      {/* Text Color */}\n                      <div className=\"settings-item\">\n                        <label className=\"settings-label\" htmlFor={`text-color-${lang}`}>Color</label>\n                        <select \n                          id={`text-color-${lang}`}\n                          value={languageCustomizations[lang]?.textColor || '#000000'} \n                          onChange={(e) => updateLanguageCustomization(lang, 'textColor', e.target.value)}\n                          className=\"settings-select\"\n                        >\n                          <option value=\"#000000\">Black</option>\n                          <option value=\"#FFFFFF\">White</option>\n                          <option value=\"#333333\">Dark Gray</option>\n                          <option value=\"#1A1AFF\">Dark Blue</option>\n                        </select>\n                      </div>\n                      \n                      {/* Character Spacing */}\n                      <div className=\"settings-item\">\n                        <label className=\"settings-label\" htmlFor={`letter-spacing-${lang}`}>Character Spacing</label>\n                        <select \n                          id={`letter-spacing-${lang}`}\n                          value={languageCustomizations[lang]?.letterSpacing || 'normal'} \n                          onChange={(e) => updateLanguageCustomization(lang, 'letterSpacing', e.target.value)}\n                          className=\"settings-select\"\n                        >\n                          <option value=\"normal\">Normal</option>\n                          <option value=\"0.05em\">Slightly Expanded</option>\n                          <option value=\"0.1em\">Expanded</option>\n                          <option value=\"-0.03em\">Condensed</option>\n                        </select>\n                      </div>\n                      \n                      <button \n                        className=\"reset-button\"\n                        onClick={() => {\n                          // Reset this language's customizations to new defaults with larger, bolder text\n                          setLanguageCustomizations(prev => ({\n                            ...prev,\n                            [lang]: {\n                              fontFamily: 'Arial / Helvetica',\n                              fontSize: 'Large', // Updated from Medium to Large\n                              fontWeight: 'bold', // New default\n                              textColor: darkMode ? '#FFFFFF' : '#000000',\n                              letterSpacing: 'normal'\n                            }\n                          }));\n                        }}\n                        aria-label={`Reset customization for ${getLanguageName(lang)}`}\n                      >\n                        Reset\n                      </button>\n                    </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n              \n              {/* Part of speech color customization */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Part of Speech Highlighting</h3>\n                <div className=\"pos-color-controls\">\n                  <div className=\"pos-color-item\">\n                    <label className=\"pos-label\" htmlFor=\"noun-color\">Nouns</label>\n                    <select \n                      id=\"noun-color\" \n                      value={nounColor} \n                      onChange={(e) => setNounColor(e.target.value)} \n                      className=\"settings-select pos-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"pos-color-item\">\n                    <label className=\"pos-label\" htmlFor=\"verb-color\">Verbs</label>\n                    <select \n                      id=\"verb-color\" \n                      value={verbColor} \n                      onChange={(e) => setVerbColor(e.target.value)} \n                      className=\"settings-select pos-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"pos-color-item\">\n                    <label className=\"pos-label\" htmlFor=\"adjective-color\">Adjectives</label>\n                    <select \n                      id=\"adjective-color\" \n                      value={adjectiveColor} \n                      onChange={(e) => setAdjectiveColor(e.target.value)} \n                      className=\"settings-select pos-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}