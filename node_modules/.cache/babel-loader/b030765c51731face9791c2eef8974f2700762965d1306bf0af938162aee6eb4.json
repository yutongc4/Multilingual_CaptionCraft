{"ast":null,"code":"var _jsxFileName = \"/Users/arunasrivastava/random/cse482/Multilingual/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: '',\n    tertiary: ''\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // Customization options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  const [fontSize, setFontSize] = useState('Medium');\n  const [fontFamily, setFontFamily] = useState('Sans Serif');\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = url => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[7].length === 11 ? match[7] : null;\n  };\n\n  // Initialize with the default URL\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n  }, []);\n\n  // Handle YouTube link input\n  const handleLinkChange = e => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async videoId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.error) {\n        throw new Error(data.error);\n      }\n\n      // Process the available transcripts data\n      const languages = data.transcripts.map(transcript => transcript.language_code);\n      setAvailableLanguages(languages);\n\n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = languages.includes('en') ? 'en' : languages[0];\n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: '',\n        tertiary: ''\n      });\n      setStatus(`Found captions in ${languages.length} languages. Fetching transcripts...`);\n\n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languages);\n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n\n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          const data = await response.json();\n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n\n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  // In a real implementation, you would use a proper NLP library\n  const applyPOSTagging = text => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n\n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary, tertiary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = {\n      ...selectedLanguages\n    };\n\n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Language names mapping (ISO code to display name)\n  const languageNames = {\n    'af': 'Afrikaans',\n    'sq': 'Albanian',\n    'am': 'Amharic',\n    'ar': 'Arabic',\n    'hy': 'Armenian',\n    'az': 'Azerbaijani',\n    'eu': 'Basque',\n    'be': 'Belarusian',\n    'bn': 'Bengali',\n    'bs': 'Bosnian',\n    'bg': 'Bulgarian',\n    'ca': 'Catalan',\n    'ceb': 'Cebuano',\n    'zh': 'Chinese',\n    'zh-Hans': 'Chinese (Simplified)',\n    'zh-Hant': 'Chinese (Traditional)',\n    'co': 'Corsican',\n    'hr': 'Croatian',\n    'cs': 'Czech',\n    'da': 'Danish',\n    'nl': 'Dutch',\n    'en': 'English',\n    'eo': 'Esperanto',\n    'et': 'Estonian',\n    'fi': 'Finnish',\n    'fr': 'French',\n    'fy': 'Frisian',\n    'gl': 'Galician',\n    'ka': 'Georgian',\n    'de': 'German',\n    'el': 'Greek',\n    'gu': 'Gujarati',\n    'ht': 'Haitian Creole',\n    'ha': 'Hausa',\n    'haw': 'Hawaiian',\n    'he': 'Hebrew',\n    'hi': 'Hindi',\n    'hmn': 'Hmong',\n    'hu': 'Hungarian',\n    'is': 'Icelandic',\n    'ig': 'Igbo',\n    'id': 'Indonesian',\n    'ga': 'Irish',\n    'it': 'Italian',\n    'ja': 'Japanese',\n    'jv': 'Javanese',\n    'kn': 'Kannada',\n    'kk': 'Kazakh',\n    'km': 'Khmer',\n    'ko': 'Korean',\n    'ku': 'Kurdish',\n    'ky': 'Kyrgyz',\n    'lo': 'Lao',\n    'la': 'Latin',\n    'lv': 'Latvian',\n    'lt': 'Lithuanian',\n    'lb': 'Luxembourgish',\n    'mk': 'Macedonian',\n    'mg': 'Malagasy',\n    'ms': 'Malay',\n    'ml': 'Malayalam',\n    'mt': 'Maltese',\n    'mi': 'Maori',\n    'mr': 'Marathi',\n    'mn': 'Mongolian',\n    'my': 'Myanmar (Burmese)',\n    'ne': 'Nepali',\n    'no': 'Norwegian',\n    'ny': 'Nyanja (Chichewa)',\n    'ps': 'Pashto',\n    'fa': 'Persian',\n    'pl': 'Polish',\n    'pt': 'Portuguese',\n    'pa': 'Punjabi',\n    'ro': 'Romanian',\n    'ru': 'Russian',\n    'sm': 'Samoan',\n    'gd': 'Scots Gaelic',\n    'sr': 'Serbian',\n    'st': 'Sesotho',\n    'sn': 'Shona',\n    'sd': 'Sindhi',\n    'si': 'Sinhala (Sinhalese)',\n    'sk': 'Slovak',\n    'sl': 'Slovenian',\n    'so': 'Somali',\n    'es': 'Spanish',\n    'su': 'Sundanese',\n    'sw': 'Swahili',\n    'sv': 'Swedish',\n    'tl': 'Tagalog (Filipino)',\n    'tg': 'Tajik',\n    'ta': 'Tamil',\n    'te': 'Telugu',\n    'th': 'Thai',\n    'tr': 'Turkish',\n    'uk': 'Ukrainian',\n    'ur': 'Urdu',\n    'uz': 'Uzbek',\n    'vi': 'Vietnamese',\n    'cy': 'Welsh',\n    'xh': 'Xhosa',\n    'yi': 'Yiddish',\n    'yo': 'Yoruba',\n    'zu': 'Zulu'\n  };\n\n  // Get language name from code\n  const getLanguageName = code => {\n    return languageNames[code] || code;\n  };\n\n  // Get color based on settings\n  const getColor = type => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    switch (type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return '#000000';\n    }\n  };\n\n  // Get font size based on settings\n  const getFontSize = () => {\n    const sizeMap = {\n      'Small': '0.875rem',\n      'Medium': '1rem',\n      'Large': '1.25rem',\n      'X-Large': '1.5rem'\n    };\n    return sizeMap[fontSize] || '1rem';\n  };\n\n  // Get font family based on settings\n  const getFontFamily = () => {\n    const fontMap = {\n      'Sans Serif': 'Arial, Helvetica, sans-serif',\n      'Serif': 'Georgia, Times, serif',\n      'Monospace': 'Courier New, monospace',\n      'Handwriting': 'Comic Sans MS, cursive'\n    };\n    return fontMap[fontFamily] || 'Arial, Helvetica, sans-serif';\n  };\n\n  // Format caption text with styling for parts of speech\n  const formatCaptionText = text => {\n    // Replace tagged parts of speech with styled spans\n    const formattedText = text.replace(/<noun>(.*?)<\\/noun>/g, (match, content) => `<span style=\"color:${getColor('noun')}; text-decoration:underline;\">${content}</span>`).replace(/<verb>(.*?)<\\/verb>/g, (match, content) => `<span style=\"color:${getColor('verb')}; text-decoration:underline;\">${content}</span>`).replace(/<adjective>(.*?)<\\/adjective>/g, (match, content) => `<span style=\"color:${getColor('adjective')}; text-decoration:underline;\">${content}</span>`);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      dangerouslySetInnerHTML: {\n        __html: formattedText\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 12\n    }, this);\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(caption => currentTime >= caption.start && currentTime <= caption.end);\n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Handle video time update\n  const handleTimeUpdate = event => {\n    setCurrentTime(event.target.currentTime);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"YouTube Multilingual Captions Extractor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: youtubeLink,\n          onChange: handleLinkChange,\n          placeholder: \"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\",\n          className: \"input-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'Load Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-message\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 9\n    }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n              className: \"video-frame\",\n              src: `https://www.youtube.com/embed/${videoId}?enablejsapi=1`,\n              title: \"YouTube video player\",\n              frameBorder: \"0\",\n              allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n              allowFullScreen: true,\n              onTimeUpdate: handleTimeUpdate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 15\n          }, this), captionPlacement === 'Overlay Bottom' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"captions-overlay\",\n            children: getSelectedLanguagesArray().map(lang => activeCaptions[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-caption\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-language\",\n                children: [getLanguageName(lang), \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-text\",\n                style: {\n                  fontFamily: getFontFamily(),\n                  fontSize: getFontSize(),\n                  direction: ['ar', 'fa', 'he', 'ur'].includes(lang) ? 'rtl' : 'ltr'\n                },\n                children: formatCaptionText(activeCaptions[lang].text)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 25\n              }, this)]\n            }, lang, true, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 13\n        }, this), (captionPlacement === 'Below Video' || captionPlacement === 'Side Panel') && availableLanguages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `captions-container ${captionPlacement === 'Side Panel' ? 'side-panel' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Captions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 17\n          }, this), getSelectedLanguagesArray().map(lang => {\n            var _captions$lang;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"language-title\",\n                children: [getLanguageName(lang), lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : lang === selectedLanguages.tertiary ? ' (Tertiary)' : '']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"captions-content\",\n                style: {\n                  fontFamily: getFontFamily(),\n                  fontSize: getFontSize(),\n                  direction: ['ar', 'fa', 'he', 'ur'].includes(lang) ? 'rtl' : 'ltr'\n                },\n                children: (_captions$lang = captions[lang]) === null || _captions$lang === void 0 ? void 0 : _captions$lang.map((caption, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"timestamp\",\n                    style: {\n                      direction: 'ltr'\n                    },\n                    children: [Math.floor(caption.start / 60), \":\", (caption.start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(caption.end / 60), \":\", (caption.end % 60).toFixed(1).padStart(4, '0')]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 506,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"caption-text\",\n                    children: formatCaptionText(caption.text)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 510,\n                    columnNumber: 27\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 502,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 493,\n                columnNumber: 21\n              }, this)]\n            }, lang, true, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: \"Customize Display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"settings-title\",\n            children: \"Select Languages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Primary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedLanguages.primary,\n                onChange: e => setLanguageRank(e.target.value, 'primary'),\n                className: \"settings-select language-dropdown\",\n                children: availableLanguages.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: lang,\n                  children: getLanguageName(lang)\n                }, lang, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 540,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 534,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Secondary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 550,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedLanguages.secondary,\n                onChange: e => setLanguageRank(e.target.value, 'secondary'),\n                className: \"settings-select language-dropdown\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 557,\n                  columnNumber: 21\n                }, this), availableLanguages.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: lang,\n                  children: getLanguageName(lang)\n                }, lang, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 559,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 552,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Tertiary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedLanguages.tertiary,\n                onChange: e => setLanguageRank(e.target.value, 'tertiary'),\n                className: \"settings-select language-dropdown\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 576,\n                  columnNumber: 21\n                }, this), availableLanguages.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: lang,\n                  children: getLanguageName(lang)\n                }, lang, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 578,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 571,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 570,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Caption Placement\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: captionPlacement,\n            onChange: e => setCaptionPlacement(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Below Video\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Overlay Bottom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Side Panel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Noun Underline Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: nounColor,\n            onChange: e => setNounColor(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Electric Blue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Cherry Red\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Forest Green\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 611,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Sunny Yellow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 612,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Royal Purple\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 613,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Verb Underline Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: verbColor,\n            onChange: e => setVerbColor(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Electric Blue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 625,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Cherry Red\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Forest Green\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Sunny Yellow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 628,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Royal Purple\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Adjective Underline Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: adjectiveColor,\n            onChange: e => setAdjectiveColor(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Electric Blue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Cherry Red\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 642,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Forest Green\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 643,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Sunny Yellow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 644,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Royal Purple\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 645,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Font Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: fontSize,\n            onChange: e => setFontSize(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Medium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 658,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 659,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"X-Large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-label\",\n            children: \"Font Family\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: fontFamily,\n            onChange: e => setFontFamily(e.target.value),\n            className: \"settings-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Sans Serif\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 672,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Serif\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Monospace\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Handwriting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 675,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"export-section\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"export-button\",\n            onClick: () => {\n              const captionsData = JSON.stringify(captions, null, 2);\n              const blob = new Blob([captionsData], {\n                type: 'application/json'\n              });\n              const url = URL.createObjectURL(blob);\n              const a = document.createElement('a');\n              a.href = url;\n              a.download = `captions-${videoId}.json`;\n              a.click();\n            },\n            children: \"Export Captions as JSON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .captions-overlay {\n          position: absolute;\n          bottom: 10px;\n          left: 10px;\n          right: 10px;\n          background-color: rgba(0, 0, 0, 0.7);\n          color: white;\n          padding: 10px;\n          border-radius: 5px;\n          z-index: 10;\n        }\n        \n        .overlay-caption {\n          margin-bottom: 5px;\n        }\n        \n        .overlay-language {\n          font-weight: bold;\n          margin-right: 5px;\n        }\n        \n        .side-panel {\n          position: absolute;\n          top: 0;\n          right: 0;\n          width: 300px;\n          height: 100%;\n          overflow-y: auto;\n          background-color: #f8f9fa;\n          padding: 10px;\n          border-left: 1px solid #ddd;\n        }\n        \n        .active-caption {\n          background-color: #f0f8ff;\n          border-left: 3px solid #007bff;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 404,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TfscWUVMa1f14zcHYzGcP9svN1Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","youtubeLink","setYoutubeLink","videoId","setVideoId","captions","setCaptions","selectedLanguages","setSelectedLanguages","primary","secondary","tertiary","availableLanguages","setAvailableLanguages","status","setStatus","isLoading","setIsLoading","currentTime","setCurrentTime","activeCaptions","setActiveCaptions","captionPlacement","setCaptionPlacement","nounColor","setNounColor","verbColor","setVerbColor","adjectiveColor","setAdjectiveColor","fontSize","setFontSize","fontFamily","setFontFamily","extractVideoId","url","regExp","match","length","id","handleLinkChange","e","target","value","handleSubmit","preventDefault","fetchAvailableLanguages","response","fetch","API_BASE_URL","ok","Error","data","json","error","languages","transcripts","map","transcript","language_code","defaultPrimary","includes","fetchCaptions","console","message","captionsData","lang","warn","processedTranscript","caption","text","applyPOSTagging","end","start","duration","Object","keys","commonNouns","commonVerbs","commonAdjectives","words","split","taggedText","i","originalWord","word","toLowerCase","replace","setLanguageRank","rank","updatedLanguages","forEach","key","languageNames","getLanguageName","code","getColor","type","colorMap","getFontSize","sizeMap","getFontFamily","fontMap","formatCaptionText","formattedText","content","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","getSelectedLanguagesArray","values","filter","newActiveCaptions","activeCaption","find","handleTimeUpdate","event","className","children","onSubmit","onChange","placeholder","disabled","src","title","frameBorder","allow","allowFullScreen","onTimeUpdate","style","direction","_captions$lang","index","Math","floor","toFixed","padStart","onClick","JSON","stringify","blob","Blob","URL","createObjectURL","a","document","createElement","href","download","click","jsx","_c","$RefreshReg$"],"sources":["/Users/arunasrivastava/random/cse482/Multilingual/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: '',\n    tertiary: ''\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // Customization options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  const [fontSize, setFontSize] = useState('Medium');\n  const [fontFamily, setFontFamily] = useState('Sans Serif');\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = (url) => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[7].length === 11) ? match[7] : null;\n  };\n\n  // Initialize with the default URL\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n  }, []);\n\n  // Handle YouTube link input\n  const handleLinkChange = (e) => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async (videoId) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      \n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(data.error);\n      }\n      \n      // Process the available transcripts data\n      const languages = data.transcripts.map(transcript => transcript.language_code);\n      setAvailableLanguages(languages);\n      \n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = languages.includes('en') ? 'en' : languages[0];\n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: '',\n        tertiary: ''\n      });\n      \n      setStatus(`Found captions in ${languages.length} languages. Fetching transcripts...`);\n      \n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languages);\n      \n    } catch (error) {\n    console.error('Error fetching transcript languages:', error);\n    setStatus(`Error: ${error.message}`);\n    setIsLoading(false);\n  }\n};\n\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n      \n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          \n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          \n          const data = await response.json();\n          \n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n          \n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          \n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      \n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  // In a real implementation, you would use a proper NLP library\n  const applyPOSTagging = (text) => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n    \n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      \n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      \n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary, tertiary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = { ...selectedLanguages };\n    \n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Language names mapping (ISO code to display name)\n  const languageNames = {\n    'af': 'Afrikaans',\n    'sq': 'Albanian',\n    'am': 'Amharic',\n    'ar': 'Arabic',\n    'hy': 'Armenian',\n    'az': 'Azerbaijani',\n    'eu': 'Basque',\n    'be': 'Belarusian',\n    'bn': 'Bengali',\n    'bs': 'Bosnian',\n    'bg': 'Bulgarian',\n    'ca': 'Catalan',\n    'ceb': 'Cebuano',\n    'zh': 'Chinese',\n    'zh-Hans': 'Chinese (Simplified)',\n    'zh-Hant': 'Chinese (Traditional)',\n    'co': 'Corsican',\n    'hr': 'Croatian',\n    'cs': 'Czech',\n    'da': 'Danish',\n    'nl': 'Dutch',\n    'en': 'English',\n    'eo': 'Esperanto',\n    'et': 'Estonian',\n    'fi': 'Finnish',\n    'fr': 'French',\n    'fy': 'Frisian',\n    'gl': 'Galician',\n    'ka': 'Georgian',\n    'de': 'German',\n    'el': 'Greek',\n    'gu': 'Gujarati',\n    'ht': 'Haitian Creole',\n    'ha': 'Hausa',\n    'haw': 'Hawaiian',\n    'he': 'Hebrew',\n    'hi': 'Hindi',\n    'hmn': 'Hmong',\n    'hu': 'Hungarian',\n    'is': 'Icelandic',\n    'ig': 'Igbo',\n    'id': 'Indonesian',\n    'ga': 'Irish',\n    'it': 'Italian',\n    'ja': 'Japanese',\n    'jv': 'Javanese',\n    'kn': 'Kannada',\n    'kk': 'Kazakh',\n    'km': 'Khmer',\n    'ko': 'Korean',\n    'ku': 'Kurdish',\n    'ky': 'Kyrgyz',\n    'lo': 'Lao',\n    'la': 'Latin',\n    'lv': 'Latvian',\n    'lt': 'Lithuanian',\n    'lb': 'Luxembourgish',\n    'mk': 'Macedonian',\n    'mg': 'Malagasy',\n    'ms': 'Malay',\n    'ml': 'Malayalam',\n    'mt': 'Maltese',\n    'mi': 'Maori',\n    'mr': 'Marathi',\n    'mn': 'Mongolian',\n    'my': 'Myanmar (Burmese)',\n    'ne': 'Nepali',\n    'no': 'Norwegian',\n    'ny': 'Nyanja (Chichewa)',\n    'ps': 'Pashto',\n    'fa': 'Persian',\n    'pl': 'Polish',\n    'pt': 'Portuguese',\n    'pa': 'Punjabi',\n    'ro': 'Romanian',\n    'ru': 'Russian',\n    'sm': 'Samoan',\n    'gd': 'Scots Gaelic',\n    'sr': 'Serbian',\n    'st': 'Sesotho',\n    'sn': 'Shona',\n    'sd': 'Sindhi',\n    'si': 'Sinhala (Sinhalese)',\n    'sk': 'Slovak',\n    'sl': 'Slovenian',\n    'so': 'Somali',\n    'es': 'Spanish',\n    'su': 'Sundanese',\n    'sw': 'Swahili',\n    'sv': 'Swedish',\n    'tl': 'Tagalog (Filipino)',\n    'tg': 'Tajik',\n    'ta': 'Tamil',\n    'te': 'Telugu',\n    'th': 'Thai',\n    'tr': 'Turkish',\n    'uk': 'Ukrainian',\n    'ur': 'Urdu',\n    'uz': 'Uzbek',\n    'vi': 'Vietnamese',\n    'cy': 'Welsh',\n    'xh': 'Xhosa',\n    'yi': 'Yiddish',\n    'yo': 'Yoruba',\n    'zu': 'Zulu'\n  };\n\n  // Get language name from code\n  const getLanguageName = (code) => {\n    return languageNames[code] || code;\n  };\n\n  // Get color based on settings\n  const getColor = (type) => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    \n    switch(type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return '#000000';\n    }\n  };\n\n  // Get font size based on settings\n  const getFontSize = () => {\n    const sizeMap = {\n      'Small': '0.875rem',\n      'Medium': '1rem',\n      'Large': '1.25rem',\n      'X-Large': '1.5rem'\n    };\n    \n    return sizeMap[fontSize] || '1rem';\n  };\n\n  // Get font family based on settings\n  const getFontFamily = () => {\n    const fontMap = {\n      'Sans Serif': 'Arial, Helvetica, sans-serif',\n      'Serif': 'Georgia, Times, serif',\n      'Monospace': 'Courier New, monospace',\n      'Handwriting': 'Comic Sans MS, cursive'\n    };\n    \n    return fontMap[fontFamily] || 'Arial, Helvetica, sans-serif';\n  };\n\n  // Format caption text with styling for parts of speech\n  const formatCaptionText = (text) => {\n    // Replace tagged parts of speech with styled spans\n    const formattedText = text\n      .replace(/<noun>(.*?)<\\/noun>/g, (match, content) => \n        `<span style=\"color:${getColor('noun')}; text-decoration:underline;\">${content}</span>`)\n      .replace(/<verb>(.*?)<\\/verb>/g, (match, content) => \n        `<span style=\"color:${getColor('verb')}; text-decoration:underline;\">${content}</span>`)\n      .replace(/<adjective>(.*?)<\\/adjective>/g, (match, content) => \n        `<span style=\"color:${getColor('adjective')}; text-decoration:underline;\">${content}</span>`);\n    \n    return <span dangerouslySetInnerHTML={{ __html: formattedText }} />;\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    \n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(\n          caption => currentTime >= caption.start && currentTime <= caption.end\n        );\n        \n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    \n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Handle video time update\n  const handleTimeUpdate = (event) => {\n    setCurrentTime(event.target.currentTime);\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"app-title\">YouTube Multilingual Captions Extractor</h1>\n      \n      {/* Input Box */}\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={youtubeLink}\n            onChange={handleLinkChange}\n            placeholder=\"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\"\n            className=\"input-field\"\n          />\n          <button \n            type=\"submit\"\n            className=\"submit-button\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load Video'}\n          </button>\n        </div>\n      </form>\n      \n      {/* Status message */}\n      {status && (\n        <div className=\"status-message\">\n          {status}\n        </div>\n      )}\n      \n      {videoId && (\n        <div className=\"main-content\">\n          {/* Main Content Area (Video + Captions) */}\n          <div className=\"content-area\">\n            {/* Video Embed Box */}\n            <div className=\"video-container\">\n              <h2 className=\"section-title\">Video</h2>\n              <div className=\"video-wrapper\">\n                <iframe\n                  className=\"video-frame\"\n                  src={`https://www.youtube.com/embed/${videoId}?enablejsapi=1`}\n                  title=\"YouTube video player\"\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                  onTimeUpdate={handleTimeUpdate}\n                ></iframe>\n              </div>\n              \n              {/* Real-time captions overlay */}\n              {captionPlacement === 'Overlay Bottom' && (\n                <div className=\"captions-overlay\">\n                  {getSelectedLanguagesArray().map(lang => (\n                    activeCaptions[lang] && (\n                      <div key={lang} className=\"overlay-caption\">\n                        <span className=\"overlay-language\">\n                          {getLanguageName(lang)}:\n                        </span>\n                        <span \n                          className=\"overlay-text\"\n                          style={{\n                            fontFamily: getFontFamily(),\n                            fontSize: getFontSize(),\n                            direction: ['ar', 'fa', 'he', 'ur'].includes(lang) ? 'rtl' : 'ltr'\n                          }}\n                        >\n                          {formatCaptionText(activeCaptions[lang].text)}\n                        </span>\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Captions Display - for Below Video or Side Panel modes */}\n            {(captionPlacement === 'Below Video' || captionPlacement === 'Side Panel') && \n             availableLanguages.length > 0 && (\n              <div className={`captions-container ${captionPlacement === 'Side Panel' ? 'side-panel' : ''}`}>\n                <h2 className=\"section-title\">Captions</h2>\n                \n                {getSelectedLanguagesArray().map(lang => (\n                  <div key={lang} className=\"language-section\">\n                    <h3 className=\"language-title\">\n                      {getLanguageName(lang)} \n                      {lang === selectedLanguages.primary ? ' (Primary)' : \n                       lang === selectedLanguages.secondary ? ' (Secondary)' : \n                       lang === selectedLanguages.tertiary ? ' (Tertiary)' : ''}\n                    </h3>\n                    <div \n                      className=\"captions-content\"\n                      style={{\n                        fontFamily: getFontFamily(),\n                        fontSize: getFontSize(),\n                        direction: ['ar', 'fa', 'he', 'ur'].includes(lang) ? 'rtl' : 'ltr'\n                      }}\n                    >\n                      {captions[lang]?.map((caption, index) => (\n                        <div \n                          key={index} \n                          className={`caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`}\n                        >\n                          <div className=\"timestamp\" style={{ direction: 'ltr' }}>\n                            {Math.floor(caption.start / 60)}:{(caption.start % 60).toFixed(1).padStart(4, '0')} - \n                            {Math.floor(caption.end / 60)}:{(caption.end % 60).toFixed(1).padStart(4, '0')}\n                          </div>\n                          <div className=\"caption-text\">\n                            {formatCaptionText(caption.text)}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          \n          {/* Customization Panel */}\n          <div className=\"settings-panel\">\n            <h2 className=\"section-title\">Customize Display</h2>\n            \n            {/* Language Selection - Updated with ranked dropdowns */}\n            <div className=\"settings-section\">\n              <h3 className=\"settings-title\">Select Languages</h3>\n              \n              {/* Primary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\">Primary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    value={selectedLanguages.primary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'primary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    {availableLanguages.map(lang => (\n                      <option key={lang} value={lang}>\n                        {getLanguageName(lang)}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              \n              {/* Secondary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\">Secondary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    value={selectedLanguages.secondary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'secondary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    <option value=\"\">None</option>\n                    {availableLanguages.map(lang => (\n                      <option key={lang} value={lang}>\n                        {getLanguageName(lang)}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              \n              {/* Tertiary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\">Tertiary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    value={selectedLanguages.tertiary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'tertiary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    <option value=\"\">None</option>\n                    {availableLanguages.map(lang => (\n                      <option key={lang} value={lang}>\n                        {getLanguageName(lang)}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n            \n            {/* Caption Placement */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Caption Placement</label>\n              <select \n                value={captionPlacement} \n                onChange={(e) => setCaptionPlacement(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Below Video</option>\n                <option>Overlay Bottom</option>\n                <option>Side Panel</option>\n              </select>\n            </div>\n            \n            {/* Noun Underline Color */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Noun Underline Color</label>\n              <select \n                value={nounColor} \n                onChange={(e) => setNounColor(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Electric Blue</option>\n                <option>Cherry Red</option>\n                <option>Forest Green</option>\n                <option>Sunny Yellow</option>\n                <option>Royal Purple</option>\n              </select>\n            </div>\n            \n            {/* Verb Underline Color */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Verb Underline Color</label>\n              <select \n                value={verbColor} \n                onChange={(e) => setVerbColor(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Electric Blue</option>\n                <option>Cherry Red</option>\n                <option>Forest Green</option>\n                <option>Sunny Yellow</option>\n                <option>Royal Purple</option>\n              </select>\n            </div>\n            \n            {/* Adjective Underline Color */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Adjective Underline Color</label>\n              <select \n                value={adjectiveColor} \n                onChange={(e) => setAdjectiveColor(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Electric Blue</option>\n                <option>Cherry Red</option>\n                <option>Forest Green</option>\n                <option>Sunny Yellow</option>\n                <option>Royal Purple</option>\n              </select>\n            </div>\n            \n            {/* Font Size */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Font Size</label>\n              <select \n                value={fontSize} \n                onChange={(e) => setFontSize(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Small</option>\n                <option>Medium</option>\n                <option>Large</option>\n                <option>X-Large</option>\n              </select>\n            </div>\n            \n            {/* Font Family */}\n            <div className=\"settings-item\">\n              <label className=\"settings-label\">Font Family</label>\n              <select \n                value={fontFamily} \n                onChange={(e) => setFontFamily(e.target.value)}\n                className=\"settings-select\"\n              >\n                <option>Sans Serif</option>\n                <option>Serif</option>\n                <option>Monospace</option>\n                <option>Handwriting</option>\n              </select>\n            </div>\n            \n            {/* Export button */}\n            <div className=\"export-section\">\n              <button \n                className=\"export-button\"\n                onClick={() => {\n                  const captionsData = JSON.stringify(captions, null, 2);\n                  const blob = new Blob([captionsData], { type: 'application/json' });\n                  const url = URL.createObjectURL(blob);\n                  const a = document.createElement('a');\n                  a.href = url;\n                  a.download = `captions-${videoId}.json`;\n                  a.click();\n                }}\n              >\n                Export Captions as JSON\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Additional CSS for new features */}\n      <style jsx>{`\n        .captions-overlay {\n          position: absolute;\n          bottom: 10px;\n          left: 10px;\n          right: 10px;\n          background-color: rgba(0, 0, 0, 0.7);\n          color: white;\n          padding: 10px;\n          border-radius: 5px;\n          z-index: 10;\n        }\n        \n        .overlay-caption {\n          margin-bottom: 5px;\n        }\n        \n        .overlay-language {\n          font-weight: bold;\n          margin-right: 5px;\n        }\n        \n        .side-panel {\n          position: absolute;\n          top: 0;\n          right: 0;\n          width: 300px;\n          height: 100%;\n          overflow-y: auto;\n          background-color: #f8f9fa;\n          padding: 10px;\n          border-left: 1px solid #ddd;\n        }\n        \n        .active-caption {\n          background-color: #f0f8ff;\n          border-left: 3px solid #007bff;\n        }\n      `}</style>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}