{"ast":null,"code":"var _jsxFileName = \"/Users/arunasrivastava/random/cse482/Multilingual/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// API base URL - change this if your backend is running on a different port/host\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nfunction App() {\n  _s();\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: '',\n    tertiary: ''\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // Global customization options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  const [fontSize, setFontSize] = useState('Medium');\n  const [fontFamily, setFontFamily] = useState('Sans Serif');\n\n  // New per-language customization settings\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n  const [highContrastMode, setHighContrastMode] = useState(false);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = url => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[7].length === 11 ? match[7] : null;\n  };\n\n  // Initialize with the default URL\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = {\n      ...languageCustomizations\n    };\n\n    // Initialize customizations for any new languages\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial, Helvetica, sans-serif',\n          fontSize: 'Medium',\n          textColor: '#000000',\n          backgroundColor: 'transparent',\n          highlightColor: 'transparent',\n          isBold: false,\n          isItalic: false,\n          isUnderlined: false,\n          lineHeight: 1.5,\n          letterSpacing: 'normal',\n          hasTextShadow: false\n        };\n      }\n    });\n    setLanguageCustomizations(newLanguageCustomizations);\n  }, [selectedLanguages]);\n\n  // Handle YouTube link input\n  const handleLinkChange = e => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async videoId => {\n    try {\n      var _data$transcripts$fin, _data$transcripts$;\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Received data:', data);\n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n\n      // Store the full transcript information\n      setAvailableTranscripts(data.transcripts);\n\n      // Also keep the language codes for backward compatibility\n      const languageCodes = data.transcripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n\n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = ((_data$transcripts$fin = data.transcripts.find(t => t.language_code === 'en')) === null || _data$transcripts$fin === void 0 ? void 0 : _data$transcripts$fin.language_code) || ((_data$transcripts$ = data.transcripts[0]) === null || _data$transcripts$ === void 0 ? void 0 : _data$transcripts$.language_code) || '';\n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: '',\n        tertiary: ''\n      });\n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n\n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n\n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          const data = await response.json();\n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n\n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = text => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n\n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary, tertiary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = {\n      ...selectedLanguages\n    };\n\n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => ({\n      ...prev,\n      [lang]: {\n        ...prev[lang],\n        [property]: value\n      }\n    }));\n  };\n\n  // Get color based on settings\n  const getColor = type => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    switch (type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return '#000000';\n    }\n  };\n\n  // Get font size based on settings\n  const getFontSize = sizeOption => {\n    const sizeMap = {\n      'Small': '0.875rem',\n      'Medium': '1rem',\n      'Large': '1.25rem',\n      'X-Large': '1.5rem'\n    };\n    return sizeMap[sizeOption] || '1rem';\n  };\n\n  // Get font family based on settings\n  const getFontFamily = fontOption => {\n    const fontMap = {\n      'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n      'Roboto': 'Roboto, Arial, sans-serif',\n      'Open Sans': 'Open Sans, Arial, sans-serif',\n      'Noto Sans': 'Noto Sans, Arial, sans-serif',\n      'Verdana': 'Verdana, Geneva, sans-serif',\n      'Courier New': 'Courier New, monospace',\n      'Consolas': 'Consolas, monospace',\n      'Source Code Pro': 'Source Code Pro, monospace',\n      'Sans Serif': 'Arial, Helvetica, sans-serif',\n      'Serif': 'Georgia, Times, serif',\n      'Monospace': 'Courier New, monospace',\n      'Handwriting': 'Comic Sans MS, cursive'\n    };\n    return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n  };\n\n  // Format caption text with styling for parts of speech\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial, Helvetica, sans-serif',\n      fontSize: 'Medium',\n      textColor: '#000000',\n      backgroundColor: 'transparent',\n      highlightColor: 'transparent',\n      isBold: false,\n      isItalic: false,\n      isUnderlined: false,\n      lineHeight: 1.5,\n      letterSpacing: 'normal',\n      hasTextShadow: false\n    };\n\n    // Define base style for the caption\n    let baseStyle = `\n      color: ${highContrastMode ? '#FFFFFF' : customization.textColor};\n      background-color: ${highContrastMode ? '#000000' : customization.backgroundColor};\n      font-family: ${getFontFamily(customization.fontFamily)};\n      font-size: ${getFontSize(customization.fontSize)};\n      font-weight: ${customization.isBold ? 'bold' : 'normal'};\n      font-style: ${customization.isItalic ? 'italic' : 'normal'};\n      text-decoration: ${customization.isUnderlined ? 'underline' : 'none'};\n      line-height: ${customization.lineHeight};\n      letter-spacing: ${customization.letterSpacing};\n      text-shadow: ${customization.hasTextShadow ? '1px 1px 2px rgba(0,0,0,0.3)' : 'none'};\n      display: inline-block;\n      padding: ${customization.backgroundColor !== 'transparent' ? '2px 4px' : '0'};\n      border-radius: 3px;\n    `;\n\n    // Replace tagged parts of speech with styled spans\n    const formattedText = text.replace(/<noun>(.*?)<\\/noun>/g, (match, content) => `<span style=\"${baseStyle}; color:${getColor('noun')}; text-decoration:underline;\">${content}</span>`).replace(/<verb>(.*?)<\\/verb>/g, (match, content) => `<span style=\"${baseStyle}; color:${getColor('verb')}; text-decoration:underline;\">${content}</span>`).replace(/<adjective>(.*?)<\\/adjective>/g, (match, content) => `<span style=\"${baseStyle}; color:${getColor('adjective')}; text-decoration:underline;\">${content}</span>`);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      dangerouslySetInnerHTML: {\n        __html: formattedText\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 12\n    }, this);\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(caption => currentTime >= caption.start && currentTime <= caption.end);\n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n\n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n\n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = code => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Get caption style for a specific language\n  const getCaptionStyle = lang => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    return {\n      fontFamily: getFontFamily(customization.fontFamily),\n      fontSize: getFontSize(customization.fontSize),\n      color: highContrastMode ? '#FFFFFF' : customization.textColor,\n      backgroundColor: highContrastMode ? '#000000' : customization.backgroundColor,\n      fontWeight: customization.isBold ? 'bold' : 'normal',\n      fontStyle: customization.isItalic ? 'italic' : 'normal',\n      textDecoration: customization.isUnderlined ? 'underline' : 'none',\n      lineHeight: customization.lineHeight,\n      letterSpacing: customization.letterSpacing,\n      textShadow: customization.hasTextShadow ? '1px 1px 2px rgba(0,0,0,0.3)' : 'none',\n      direction: isRTL ? 'rtl' : 'ltr',\n      padding: customization.backgroundColor !== 'transparent' ? '4px 8px' : '0',\n      borderRadius: '3px'\n    };\n  };\n\n  // Helper function to get language name\n  const getLanguageName = langCode => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return (transcript === null || transcript === void 0 ? void 0 : transcript.language) || langCode;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"YouTube Multilingual Captions Extractor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: youtubeLink,\n          onChange: handleLinkChange,\n          placeholder: \"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\",\n          className: \"input-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'Load Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-message\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 9\n    }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"youtube-player\",\n              className: \"video-frame\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 15\n          }, this), captionPlacement === 'Overlay Bottom' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"captions-overlay\",\n            children: getSelectedLanguagesArray().map(lang => activeCaptions[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-caption\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-language\",\n                children: [getLanguageName(lang), \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 541,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-text\",\n                style: getCaptionStyle(lang),\n                children: formatCaptionText(activeCaptions[lang].text, lang)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 544,\n                columnNumber: 25\n              }, this)]\n            }, lang, true, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 13\n        }, this), (captionPlacement === 'Below Video' || captionPlacement === 'Side Panel') && availableLanguages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `captions-container ${captionPlacement === 'Side Panel' ? 'side-panel' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"active-captions-section\",\n            children: getSelectedLanguagesArray().map(lang => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"active-caption-display\",\n              style: {\n                padding: '10px',\n                marginBottom: '15px',\n                backgroundColor: '#f0f8ff',\n                border: '1px solid #007bff',\n                borderRadius: '5px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"language-title\",\n                style: {\n                  margin: '0 0 5px 0'\n                },\n                children: [getLanguageName(lang), lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : lang === selectedLanguages.tertiary ? ' (Tertiary)' : '']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 577,\n                columnNumber: 23\n              }, this), activeCaptions[lang] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"timestamp\",\n                  style: {\n                    direction: 'ltr',\n                    fontWeight: 'bold'\n                  },\n                  children: [Math.floor(activeCaptions[lang].start / 60), \":\", (activeCaptions[lang].start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(activeCaptions[lang].end / 60), \":\", (activeCaptions[lang].end % 60).toFixed(1).padStart(4, '0')]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 586,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"caption-text\",\n                  style: getCaptionStyle(lang),\n                  children: formatCaptionText(activeCaptions[lang].text, lang)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 592,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"no-caption\",\n                children: \"No caption at current timestamp\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 597,\n                columnNumber: 25\n              }, this)]\n            }, `active-${lang}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transcripts-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"section-subtitle\",\n              children: \"Full Transcripts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _captions$lang;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"language-title\",\n                  children: [getLanguageName(lang), lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : lang === selectedLanguages.tertiary ? ' (Tertiary)' : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 609,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"captions-content\",\n                  style: {\n                    ...getCaptionStyle(lang),\n                    maxHeight: '300px',\n                    overflowY: 'auto',\n                    marginBottom: '20px'\n                  },\n                  children: (_captions$lang = captions[lang]) === null || _captions$lang === void 0 ? void 0 : _captions$lang.map((caption, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`,\n                    onClick: () => {\n                      if (window.player && window.player.seekTo) {\n                        window.player.seekTo(caption.start);\n                      }\n                    },\n                    style: {\n                      cursor: 'pointer'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"timestamp\",\n                      style: {\n                        direction: 'ltr'\n                      },\n                      children: [Math.floor(caption.start / 60), \":\", (caption.start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(caption.end / 60), \":\", (caption.end % 60).toFixed(1).padStart(4, '0')]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 637,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"caption-text\",\n                      children: formatCaptionText(caption.text, lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 641,\n                      columnNumber: 29\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 627,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 617,\n                  columnNumber: 23\n                }, this)]\n              }, `transcript-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 608,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: \"Customize Display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"settings-title\",\n            children: \"Select Languages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Primary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedLanguages.primary,\n                onChange: e => setLanguageRank(e.target.value, 'primary'),\n                className: \"settings-select language-dropdown\",\n                children: availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: transcript.language_code,\n                  children: transcript.language\n                }, transcript.language_code, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 672,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 666,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 663,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Secondary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 682,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedLanguages.secondary,\n                onChange: e => setLanguageRank(e.target.value, 'secondary'),\n                className: \"settings-select language-dropdown\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 689,\n                  columnNumber: 21\n                }, this), availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: transcript.language_code,\n                  children: transcript.language\n                }, transcript.language_code, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 691,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 684,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 683,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Tertiary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 701,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedLanguages.tertiary,\n                onChange: e => setLanguageRank(e.target.value, 'tertiary'),\n                className: \"settings-select language-dropdown\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 708,\n                  columnNumber: 21\n                }, this), availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: transcript.language_code,\n                  children: transcript.language\n                }, transcript.language_code, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 710,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 703,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"settings-title\",\n            children: \"Global Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 721,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Caption Placement\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: captionPlacement,\n              onChange: e => setCaptionPlacement(e.target.value),\n              className: \"settings-select\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Below Video\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 730,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Overlay Bottom\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 731,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Side Panel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 732,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-item\",\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label accessibility-toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: highContrastMode,\n                onChange: () => setHighContrastMode(!highContrastMode),\n                className: \"settings-checkbox\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 739,\n                columnNumber: 19\n              }, this), \"High Contrast Mode\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 738,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Noun Color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 751,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: nounColor,\n              onChange: e => setNounColor(e.target.value),\n              className: \"settings-select\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Electric Blue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 757,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Cherry Red\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 758,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Forest Green\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 759,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Sunny Yellow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 760,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Royal Purple\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 761,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 752,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 750,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Verb Color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 766,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: verbColor,\n              onChange: e => setVerbColor(e.target.value),\n              className: \"settings-select\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Electric Blue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 772,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Cherry Red\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 773,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Forest Green\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 774,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Sunny Yellow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 775,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Royal Purple\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 776,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 767,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              children: \"Adjective Color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 781,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: adjectiveColor,\n              onChange: e => setAdjectiveColor(e.target.value),\n              className: \"settings-select\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Electric Blue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 787,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Cherry Red\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 788,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Forest Green\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 789,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Sunny Yellow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 790,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Royal Purple\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 791,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 782,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 780,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 13\n        }, this), getSelectedLanguagesArray().map(lang => {\n          var _languageCustomizatio, _languageCustomizatio2, _languageCustomizatio3, _languageCustomizatio4, _languageCustomizatio5, _languageCustomizatio6, _languageCustomizatio8, _languageCustomizatio10, _languageCustomizatio12, _languageCustomizatio13, _languageCustomizatio14;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"customization-accordion\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: [\"Customize \", getLanguageName(lang)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 799,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"settings-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                children: \"Font Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 805,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: ((_languageCustomizatio = languageCustomizations[lang]) === null || _languageCustomizatio === void 0 ? void 0 : _languageCustomizatio.fontFamily) || 'Arial / Helvetica',\n                onChange: e => updateLanguageCustomization(lang, 'fontFamily', e.target.value),\n                className: \"settings-select\",\n                children: [/*#__PURE__*/_jsxDEV(\"optgroup\", {\n                  label: \"Sans-serif\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Arial / Helvetica\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 812,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Roboto\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 813,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Open Sans\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 814,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Noto Sans\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 815,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Verdana\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 816,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 811,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n                  label: \"Monospace\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Courier New\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 819,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Consolas\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 820,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Source Code Pro\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 821,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 818,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 806,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 804,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"settings-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                children: \"Font Size\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 828,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: ((_languageCustomizatio2 = languageCustomizations[lang]) === null || _languageCustomizatio2 === void 0 ? void 0 : _languageCustomizatio2.fontSize) || 'Medium',\n                onChange: e => updateLanguageCustomization(lang, 'fontSize', e.target.value),\n                className: \"settings-select\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  children: \"Small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 834,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  children: \"Medium\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 835,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  children: \"Large\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 836,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  children: \"X-Large\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 837,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 829,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 827,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"settings-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                children: \"Text Color\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 843,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: ((_languageCustomizatio3 = languageCustomizations[lang]) === null || _languageCustomizatio3 === void 0 ? void 0 : _languageCustomizatio3.textColor) || '#000000',\n                onChange: e => updateLanguageCustomization(lang, 'textColor', e.target.value),\n                className: \"settings-select\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"#000000\",\n                  children: \"Black\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 849,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"#FFFFFF\",\n                  children: \"White\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 850,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"#333333\",\n                  children: \"Dark Gray\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 851,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"#1A1AFF\",\n                  children: \"Dark Blue\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 852,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 844,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 842,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"settings-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                children: \"Background Color\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 858,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: ((_languageCustomizatio4 = languageCustomizations[lang]) === null || _languageCustomizatio4 === void 0 ? void 0 : _languageCustomizatio4.backgroundColor) || 'transparent',\n                onChange: e => updateLanguageCustomization(lang, 'backgroundColor', e.target.value),\n                className: \"settings-select\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"transparent\",\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 864,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"#F2F2F2\",\n                  children: \"Light Gray\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 865,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"#FFFFFF\",\n                  children: \"White\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 866,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"#333333\",\n                  children: \"Dark Gray\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 867,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"#000000\",\n                  children: \"Black\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 868,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 859,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 857,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"settings-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                children: \"Highlight Color\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 874,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: ((_languageCustomizatio5 = languageCustomizations[lang]) === null || _languageCustomizatio5 === void 0 ? void 0 : _languageCustomizatio5.highlightColor) || 'transparent',\n                onChange: e => updateLanguageCustomization(lang, 'highlightColor', e.target.value),\n                className: \"settings-select\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"transparent\",\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 880,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"#FFEB3B\",\n                  children: \"Soft Yellow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 881,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"#80D3FF\",\n                  children: \"Light Blue\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 882,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"#A8E6A1\",\n                  children: \"Light Green\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 883,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 875,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 873,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"settings-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label text-style-label\",\n                children: \"Text Style\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 889,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-style-options\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"style-toggle-label\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: ((_languageCustomizatio6 = languageCustomizations[lang]) === null || _languageCustomizatio6 === void 0 ? void 0 : _languageCustomizatio6.isBold) || false,\n                    onChange: () => {\n                      var _languageCustomizatio7;\n                      return updateLanguageCustomization(lang, 'isBold', !((_languageCustomizatio7 = languageCustomizations[lang]) !== null && _languageCustomizatio7 !== void 0 && _languageCustomizatio7.isBold));\n                    },\n                    className: \"settings-checkbox\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 892,\n                    columnNumber: 23\n                  }, this), \"Bold\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 891,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"style-toggle-label\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: ((_languageCustomizatio8 = languageCustomizations[lang]) === null || _languageCustomizatio8 === void 0 ? void 0 : _languageCustomizatio8.isItalic) || false,\n                    onChange: () => {\n                      var _languageCustomizatio9;\n                      return updateLanguageCustomization(lang, 'isItalic', !((_languageCustomizatio9 = languageCustomizations[lang]) !== null && _languageCustomizatio9 !== void 0 && _languageCustomizatio9.isItalic));\n                    },\n                    className: \"settings-checkbox\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 906,\n                    columnNumber: 23\n                  }, this), \"Italic\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 905,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"style-toggle-label\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: ((_languageCustomizatio10 = languageCustomizations[lang]) === null || _languageCustomizatio10 === void 0 ? void 0 : _languageCustomizatio10.isUnderlined) || false,\n                    onChange: () => {\n                      var _languageCustomizatio11;\n                      return updateLanguageCustomization(lang, 'isUnderlined', !((_languageCustomizatio11 = languageCustomizations[lang]) !== null && _languageCustomizatio11 !== void 0 && _languageCustomizatio11.isUnderlined));\n                    },\n                    className: \"settings-checkbox\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 920,\n                    columnNumber: 23\n                  }, this), \"Underline\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 919,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 890,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 888,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"settings-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                children: \"Line Spacing\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 937,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: ((_languageCustomizatio12 = languageCustomizations[lang]) === null || _languageCustomizatio12 === void 0 ? void 0 : _languageCustomizatio12.lineHeight) || 1.5,\n                onChange: e => updateLanguageCustomization(lang, 'lineHeight', parseFloat(e.target.value)),\n                className: \"settings-select\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"1\",\n                  children: \"Tight\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 943,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"1.5\",\n                  children: \"Normal\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 944,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"2\",\n                  children: \"Relaxed\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 945,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"2.5\",\n                  children: \"Very Relaxed\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 946,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 938,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 936,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"settings-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                children: \"Character Spacing\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 952,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: ((_languageCustomizatio13 = languageCustomizations[lang]) === null || _languageCustomizatio13 === void 0 ? void 0 : _languageCustomizatio13.letterSpacing) || 'normal',\n                onChange: e => updateLanguageCustomization(lang, 'letterSpacing', e.target.value),\n                className: \"settings-select\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"normal\",\n                  children: \"Normal\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 958,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"0.05em\",\n                  children: \"Slightly Expanded\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 959,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"0.1em\",\n                  children: \"Expanded\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 960,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"0.15em\",\n                  children: \"Very Expanded\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 961,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"-0.03em\",\n                  children: \"Slightly Condensed\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 962,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 953,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 951,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"settings-item\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label accessibility-toggle\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: ((_languageCustomizatio14 = languageCustomizations[lang]) === null || _languageCustomizatio14 === void 0 ? void 0 : _languageCustomizatio14.hasTextShadow) || false,\n                  onChange: () => {\n                    var _languageCustomizatio15;\n                    return updateLanguageCustomization(lang, 'hasTextShadow', !((_languageCustomizatio15 = languageCustomizations[lang]) !== null && _languageCustomizatio15 !== void 0 && _languageCustomizatio15.hasTextShadow));\n                  },\n                  className: \"settings-checkbox\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 969,\n                  columnNumber: 21\n                }, this), \"Enable Text Shadow\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 968,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 967,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"settings-item\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"reset-button\",\n                onClick: () => {\n                  // Reset this language's customizations to defaults\n                  setLanguageCustomizations(prev => ({\n                    ...prev,\n                    [lang]: {\n                      fontFamily: 'Arial / Helvetica',\n                      fontSize: 'Medium',\n                      textColor: '#000000',\n                      backgroundColor: 'transparent',\n                      highlightColor: 'transparent',\n                      isBold: false,\n                      isItalic: false,\n                      isUnderlined: false,\n                      lineHeight: 1.5,\n                      letterSpacing: 'normal',\n                      hasTextShadow: false\n                    }\n                  }));\n                },\n                children: \"Reset to Default\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 985,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 984,\n              columnNumber: 17\n            }, this)]\n          }, `customize-${lang}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 798,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"export-section\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"export-button\",\n            onClick: () => {\n              // Export captions with customization settings\n              const exportData = {\n                captions,\n                customizations: languageCustomizations,\n                selectedLanguages,\n                videoId\n              };\n              const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n                type: 'application/json'\n              });\n              const url = URL.createObjectURL(blob);\n              const a = document.createElement('a');\n              a.href = url;\n              a.download = `captions-${videoId}.json`;\n              a.click();\n            },\n            children: \"Export Captions as JSON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1015,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1014,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .captions-overlay {\n          position: absolute;\n          bottom: 10px;\n          left: 10px;\n          right: 10px;\n          background-color: rgba(0, 0, 0, 0.7);\n          color: white;\n          padding: 10px;\n          border-radius: 5px;\n          z-index: 10;\n        }\n        \n        .overlay-caption {\n          margin-bottom: 5px;\n        }\n        \n        .overlay-language {\n          font-weight: bold;\n          margin-right: 5px;\n        }\n        \n        .side-panel {\n          position: absolute;\n          top: 0;\n          right: 0;\n          width: 300px;\n          height: 100%;\n          overflow-y: auto;\n          background-color: #f8f9fa;\n          padding: 10px;\n          border-left: 1px solid #ddd;\n        }\n        \n        .active-caption {\n          background-color: #f0f8ff;\n          border-left: 3px solid #007bff;\n          padding-left: 10px;\n        }\n        \n        .caption-item {\n          padding: 8px;\n          border-bottom: 1px solid #eee;\n          transition: background-color 0.3s;\n        }\n        \n        .caption-item:hover {\n          background-color: #f5f5f5;\n        }\n        \n        .timestamp {\n          font-size: 0.8em;\n          color: #666;\n          margin-bottom: 3px;\n        }\n        \n        .caption-text {\n          line-height: 1.4;\n        }\n        \n        .no-caption {\n          color: #999;\n          font-style: italic;\n        }\n        \n        .active-caption-display {\n          position: relative;\n        }\n        \n        .video-frame {\n          width: 100%;\n          height: 400px;\n        }\n        \n        .active-captions-section {\n          margin-bottom: 30px;\n          padding-bottom: 20px;\n          border-bottom: 2px solid #eee;\n        }\n        \n        .section-subtitle {\n          font-size: 1.2rem;\n          margin-bottom: 15px;\n          color: #333;\n          border-bottom: 1px solid #ddd;\n          padding-bottom: 5px;\n        }\n        \n        .transcripts-section {\n          margin-top: 10px;\n        }\n        \n        /* New styles for accessibility features */\n        .accessibility-toggle {\n          display: flex;\n          align-items: center;\n          cursor: pointer;\n        }\n        \n        .settings-checkbox {\n          margin-right: 8px;\n        }\n        \n        .customization-accordion {\n          margin: 15px 0;\n          border: 1px solid #ddd;\n          border-radius: 5px;\n          overflow: hidden;\n          background-color: #fff;\n          padding: 10px;\n        }\n        \n        .text-style-options {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 15px;\n          margin-top: 5px;\n        }\n        \n        .style-toggle-label {\n          display: flex;\n          align-items: center;\n          cursor: pointer;\n        }\n        \n        .reset-button {\n          margin-top: 10px;\n          padding: 8px;\n          background-color: #f8f9fa;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n          cursor: pointer;\n          width: 100%;\n        }\n        \n        .reset-button:hover {\n          background-color: #e9ecef;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1042,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 493,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OdSj+nDADWjqWxzqrZCCuH0beB8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","App","_s","youtubeLink","setYoutubeLink","videoId","setVideoId","captions","setCaptions","selectedLanguages","setSelectedLanguages","primary","secondary","tertiary","availableLanguages","setAvailableLanguages","availableTranscripts","setAvailableTranscripts","status","setStatus","isLoading","setIsLoading","currentTime","setCurrentTime","activeCaptions","setActiveCaptions","captionPlacement","setCaptionPlacement","nounColor","setNounColor","verbColor","setVerbColor","adjectiveColor","setAdjectiveColor","fontSize","setFontSize","fontFamily","setFontFamily","languageCustomizations","setLanguageCustomizations","highContrastMode","setHighContrastMode","extractVideoId","url","regExp","match","length","id","newLanguageCustomizations","Object","values","forEach","lang","textColor","backgroundColor","highlightColor","isBold","isItalic","isUnderlined","lineHeight","letterSpacing","hasTextShadow","handleLinkChange","e","target","value","handleSubmit","preventDefault","fetchAvailableLanguages","_data$transcripts$fin","_data$transcripts$","console","log","response","fetch","ok","errorText","text","error","Error","data","json","transcripts","languageCodes","map","t","language_code","defaultPrimary","find","fetchCaptions","message","languages","captionsData","warn","processedTranscript","transcript","caption","applyPOSTagging","end","start","duration","keys","commonNouns","commonVerbs","commonAdjectives","words","split","taggedText","i","originalWord","word","toLowerCase","replace","includes","setLanguageRank","rank","updatedLanguages","key","updateLanguageCustomization","property","prev","getColor","type","colorMap","getFontSize","sizeOption","sizeMap","getFontFamily","fontOption","fontMap","formatCaptionText","customization","baseStyle","formattedText","content","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","getSelectedLanguagesArray","filter","newActiveCaptions","activeCaption","interval","setInterval","window","YT","Player","player","getCurrentTime","clearInterval","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","createYouTubePlayer","destroy","events","onPlayerReady","onPlayerStateChange","event","PlayerState","PLAYING","updateTime","getPlayerState","requestAnimationFrame","findTranscriptByLanguageCode","code","getCaptionStyle","isRTL","color","fontWeight","fontStyle","textDecoration","textShadow","direction","padding","borderRadius","getLanguageName","langCode","language","className","children","onSubmit","onChange","placeholder","disabled","style","marginBottom","border","margin","Math","floor","toFixed","padStart","_captions$lang","maxHeight","overflowY","index","onClick","seekTo","cursor","checked","_languageCustomizatio","_languageCustomizatio2","_languageCustomizatio3","_languageCustomizatio4","_languageCustomizatio5","_languageCustomizatio6","_languageCustomizatio8","_languageCustomizatio10","_languageCustomizatio12","_languageCustomizatio13","_languageCustomizatio14","label","_languageCustomizatio7","_languageCustomizatio9","_languageCustomizatio11","parseFloat","_languageCustomizatio15","exportData","customizations","blob","Blob","JSON","stringify","URL","createObjectURL","a","href","download","click","jsx","_c","$RefreshReg$"],"sources":["/Users/arunasrivastava/random/cse482/Multilingual/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// API base URL - change this if your backend is running on a different port/host\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n\nfunction App() {\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: '',\n    tertiary: ''\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // Global customization options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  const [fontSize, setFontSize] = useState('Medium');\n  const [fontFamily, setFontFamily] = useState('Sans Serif');\n  \n  // New per-language customization settings\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n  const [highContrastMode, setHighContrastMode] = useState(false);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = (url) => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[7].length === 11) ? match[7] : null;\n  };\n\n  // Initialize with the default URL\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = { ...languageCustomizations };\n    \n    // Initialize customizations for any new languages\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial, Helvetica, sans-serif',\n          fontSize: 'Medium',\n          textColor: '#000000',\n          backgroundColor: 'transparent',\n          highlightColor: 'transparent',\n          isBold: false,\n          isItalic: false,\n          isUnderlined: false,\n          lineHeight: 1.5,\n          letterSpacing: 'normal',\n          hasTextShadow: false\n        };\n      }\n    });\n    \n    setLanguageCustomizations(newLanguageCustomizations);\n  }, [selectedLanguages]);\n\n  // Handle YouTube link input\n  const handleLinkChange = (e) => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async (videoId) => {\n    try {\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Received data:', data);\n      \n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Store the full transcript information\n      setAvailableTranscripts(data.transcripts);\n      \n      // Also keep the language codes for backward compatibility\n      const languageCodes = data.transcripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n      \n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = data.transcripts.find(t => t.language_code === 'en')?.language_code \n        || (data.transcripts[0]?.language_code || '');\n        \n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: '',\n        tertiary: ''\n      });\n      \n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n      \n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n      \n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n      \n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          \n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          \n          const data = await response.json();\n          \n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n          \n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          \n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      \n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = (text) => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n    \n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      \n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      \n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary, tertiary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = { ...selectedLanguages };\n    \n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => ({\n      ...prev,\n      [lang]: {\n        ...prev[lang],\n        [property]: value\n      }\n    }));\n  };\n\n  // Get color based on settings\n  const getColor = (type) => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    \n    switch(type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return '#000000';\n    }\n  };\n\n  // Get font size based on settings\n  const getFontSize = (sizeOption) => {\n    const sizeMap = {\n      'Small': '0.875rem',\n      'Medium': '1rem',\n      'Large': '1.25rem',\n      'X-Large': '1.5rem'\n    };\n    \n    return sizeMap[sizeOption] || '1rem';\n  };\n\n  // Get font family based on settings\n  const getFontFamily = (fontOption) => {\n    const fontMap = {\n      'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n      'Roboto': 'Roboto, Arial, sans-serif',\n      'Open Sans': 'Open Sans, Arial, sans-serif',\n      'Noto Sans': 'Noto Sans, Arial, sans-serif',\n      'Verdana': 'Verdana, Geneva, sans-serif',\n      'Courier New': 'Courier New, monospace',\n      'Consolas': 'Consolas, monospace',\n      'Source Code Pro': 'Source Code Pro, monospace',\n      'Sans Serif': 'Arial, Helvetica, sans-serif',\n      'Serif': 'Georgia, Times, serif',\n      'Monospace': 'Courier New, monospace',\n      'Handwriting': 'Comic Sans MS, cursive'\n    };\n    \n    return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n  };\n\n  // Format caption text with styling for parts of speech\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    \n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial, Helvetica, sans-serif',\n      fontSize: 'Medium',\n      textColor: '#000000',\n      backgroundColor: 'transparent',\n      highlightColor: 'transparent',\n      isBold: false,\n      isItalic: false,\n      isUnderlined: false,\n      lineHeight: 1.5,\n      letterSpacing: 'normal',\n      hasTextShadow: false\n    };\n\n    // Define base style for the caption\n    let baseStyle = `\n      color: ${highContrastMode ? '#FFFFFF' : customization.textColor};\n      background-color: ${highContrastMode ? '#000000' : customization.backgroundColor};\n      font-family: ${getFontFamily(customization.fontFamily)};\n      font-size: ${getFontSize(customization.fontSize)};\n      font-weight: ${customization.isBold ? 'bold' : 'normal'};\n      font-style: ${customization.isItalic ? 'italic' : 'normal'};\n      text-decoration: ${customization.isUnderlined ? 'underline' : 'none'};\n      line-height: ${customization.lineHeight};\n      letter-spacing: ${customization.letterSpacing};\n      text-shadow: ${customization.hasTextShadow ? '1px 1px 2px rgba(0,0,0,0.3)' : 'none'};\n      display: inline-block;\n      padding: ${customization.backgroundColor !== 'transparent' ? '2px 4px' : '0'};\n      border-radius: 3px;\n    `;\n    \n    // Replace tagged parts of speech with styled spans\n    const formattedText = text\n      .replace(/<noun>(.*?)<\\/noun>/g, (match, content) => \n        `<span style=\"${baseStyle}; color:${getColor('noun')}; text-decoration:underline;\">${content}</span>`)\n      .replace(/<verb>(.*?)<\\/verb>/g, (match, content) => \n        `<span style=\"${baseStyle}; color:${getColor('verb')}; text-decoration:underline;\">${content}</span>`)\n      .replace(/<adjective>(.*?)<\\/adjective>/g, (match, content) => \n        `<span style=\"${baseStyle}; color:${getColor('adjective')}; text-decoration:underline;\">${content}</span>`);\n    \n    return <span dangerouslySetInnerHTML={{ __html: formattedText }} />;\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    \n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(\n          caption => currentTime >= caption.start && currentTime <= caption.end\n        );\n        \n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    \n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n    \n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    \n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      \n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    \n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      \n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    \n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    \n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    \n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = (code) => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Get caption style for a specific language\n  const getCaptionStyle = (lang) => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    \n    return {\n      fontFamily: getFontFamily(customization.fontFamily),\n      fontSize: getFontSize(customization.fontSize),\n      color: highContrastMode ? '#FFFFFF' : customization.textColor,\n      backgroundColor: highContrastMode ? '#000000' : customization.backgroundColor,\n      fontWeight: customization.isBold ? 'bold' : 'normal',\n      fontStyle: customization.isItalic ? 'italic' : 'normal',\n      textDecoration: customization.isUnderlined ? 'underline' : 'none',\n      lineHeight: customization.lineHeight,\n      letterSpacing: customization.letterSpacing,\n      textShadow: customization.hasTextShadow ? '1px 1px 2px rgba(0,0,0,0.3)' : 'none',\n      direction: isRTL ? 'rtl' : 'ltr',\n      padding: customization.backgroundColor !== 'transparent' ? '4px 8px' : '0',\n      borderRadius: '3px'\n    };\n  };\n\n  // Helper function to get language name\n  const getLanguageName = (langCode) => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return transcript?.language || langCode;\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"app-title\">YouTube Multilingual Captions Extractor</h1>\n      \n      {/* Input Box */}\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={youtubeLink}\n            onChange={handleLinkChange}\n            placeholder=\"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\"\n            className=\"input-field\"\n          />\n          <button \n            type=\"submit\"\n            className=\"submit-button\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load Video'}\n          </button>\n        </div>\n      </form>\n      \n      {/* Status message */}\n      {status && (\n        <div className=\"status-message\">\n          {status}\n        </div>\n      )}\n      \n      {videoId && (\n        <div className=\"main-content\">\n          {/* Main Content Area (Video + Captions) */}\n          <div className=\"content-area\">\n            {/* Video Embed Box */}\n            <div className=\"video-container\">\n              <h2 className=\"section-title\">Video</h2>\n              <div className=\"video-wrapper\">\n                {/* Changed to use YouTube API for better time synchronization */}\n                <div id=\"youtube-player\" className=\"video-frame\"></div>\n              </div>\n              \n              {/* Real-time captions overlay */}\n              {captionPlacement === 'Overlay Bottom' && (\n                <div className=\"captions-overlay\">\n                  {getSelectedLanguagesArray().map(lang => (\n                    activeCaptions[lang] && (\n                      <div key={lang} className=\"overlay-caption\">\n                        <span className=\"overlay-language\">\n                          {getLanguageName(lang)}:\n                        </span>\n                        <span \n                          className=\"overlay-text\"\n                          style={getCaptionStyle(lang)}\n                        >\n                          {formatCaptionText(activeCaptions[lang].text, lang)}\n                        </span>\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Captions Display - for Below Video or Side Panel modes */}\n            {(captionPlacement === 'Below Video' || captionPlacement === 'Side Panel') && \n             availableLanguages.length > 0 && (\n              <div className={`captions-container ${captionPlacement === 'Side Panel' ? 'side-panel' : ''}`}>\n                \n                {/* Current active captions section - all languages together */}\n                <div className=\"active-captions-section\">\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    <div \n                      key={`active-${lang}`} \n                      className=\"active-caption-display\"\n                      style={{\n                        padding: '10px',\n                        marginBottom: '15px',\n                        backgroundColor: '#f0f8ff',\n                        border: '1px solid #007bff',\n                        borderRadius: '5px'\n                      }}\n                    >\n                      <h4 className=\"language-title\" style={{ margin: '0 0 5px 0' }}>\n                        {getLanguageName(lang)} \n                        {lang === selectedLanguages.primary ? ' (Primary)' : \n                         lang === selectedLanguages.secondary ? ' (Secondary)' : \n                         lang === selectedLanguages.tertiary ? ' (Tertiary)' : ''}\n                      </h4>\n                      \n                      {activeCaptions[lang] ? (\n                        <>\n                          <div className=\"timestamp\" style={{ direction: 'ltr', fontWeight: 'bold' }}>\n                            {Math.floor(activeCaptions[lang].start / 60)}:\n                            {(activeCaptions[lang].start % 60).toFixed(1).padStart(4, '0')} - \n                            {Math.floor(activeCaptions[lang].end / 60)}:\n                            {(activeCaptions[lang].end % 60).toFixed(1).padStart(4, '0')}\n                          </div>\n                          <div className=\"caption-text\" style={getCaptionStyle(lang)}>\n                            {formatCaptionText(activeCaptions[lang].text, lang)}\n                          </div>\n                        </>\n                      ) : (\n                        <span className=\"no-caption\">No caption at current timestamp</span>\n                      )}\n                    </div>\n                  ))}\n                </div>\n                \n                {/* Transcripts section - all languages */}\n                <div className=\"transcripts-section\">\n                  <h3 className=\"section-subtitle\">Full Transcripts</h3>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    <div key={`transcript-${lang}`} className=\"language-section\">\n                      <h4 className=\"language-title\">\n                        {getLanguageName(lang)} \n                        {lang === selectedLanguages.primary ? ' (Primary)' : \n                         lang === selectedLanguages.secondary ? ' (Secondary)' : \n                         lang === selectedLanguages.tertiary ? ' (Tertiary)' : ''}\n                      </h4>\n                      \n                      {/* Full transcript */}\n                      <div \n                        className=\"captions-content\"\n                        style={{\n                          ...getCaptionStyle(lang),\n                          maxHeight: '300px',\n                          overflowY: 'auto',\n                          marginBottom: '20px'\n                        }}\n                      >\n                        {captions[lang]?.map((caption, index) => (\n                          <div \n                            key={index} \n                            className={`caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`}\n                            onClick={() => {\n                              if (window.player && window.player.seekTo) {\n                                window.player.seekTo(caption.start);\n                              }\n                            }}\n                            style={{ cursor: 'pointer' }}\n                          >\n                            <div className=\"timestamp\" style={{ direction: 'ltr' }}>\n                              {Math.floor(caption.start / 60)}:{(caption.start % 60).toFixed(1).padStart(4, '0')} - \n                              {Math.floor(caption.end / 60)}:{(caption.end % 60).toFixed(1).padStart(4, '0')}\n                            </div>\n                            <div className=\"caption-text\">\n                              {formatCaptionText(caption.text, lang)}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Settings Panel with new accessibility features */}\n          <div className=\"settings-panel\">\n            <h2 className=\"section-title\">Customize Display</h2>\n            \n            {/* Language Selection - Updated with ranked dropdowns */}\n            <div className=\"settings-section\">\n              <h3 className=\"settings-title\">Select Languages</h3>\n              \n              {/* Primary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\">Primary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    value={selectedLanguages.primary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'primary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    {availableTranscripts.map(transcript => (\n                      <option key={transcript.language_code} value={transcript.language_code}>\n                        {transcript.language}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              \n              {/* Secondary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\">Secondary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    value={selectedLanguages.secondary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'secondary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    <option value=\"\">None</option>\n                    {availableTranscripts.map(transcript => (\n                      <option key={transcript.language_code} value={transcript.language_code}>\n                        {transcript.language}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              \n              {/* Tertiary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\">Tertiary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    value={selectedLanguages.tertiary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'tertiary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    <option value=\"\">None</option>\n                    {availableTranscripts.map(transcript => (\n                      <option key={transcript.language_code} value={transcript.language_code}>\n                        {transcript.language}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n            \n            {/* Caption Placement */}\n            <div className=\"settings-section\">\n              <h3 className=\"settings-title\">Global Settings</h3>\n              \n              <div className=\"settings-item\">\n                <label className=\"settings-label\">Caption Placement</label>\n                <select \n                  value={captionPlacement} \n                  onChange={(e) => setCaptionPlacement(e.target.value)}\n                  className=\"settings-select\"\n                >\n                  <option>Below Video</option>\n                  <option>Overlay Bottom</option>\n                  <option>Side Panel</option>\n                </select>\n              </div>\n              \n              {/* High Contrast Mode Toggle */}\n              <div className=\"settings-item\">\n                <label className=\"settings-label accessibility-toggle\">\n                  <input\n                    type=\"checkbox\"\n                    checked={highContrastMode}\n                    onChange={() => setHighContrastMode(!highContrastMode)}\n                    className=\"settings-checkbox\"\n                  />\n                  High Contrast Mode\n                </label>\n              </div>\n              \n              {/* Parts of Speech Highlighting */}\n              <div className=\"settings-item\">\n                <label className=\"settings-label\">Noun Color</label>\n                <select \n                  value={nounColor} \n                  onChange={(e) => setNounColor(e.target.value)}\n                  className=\"settings-select\"\n                >\n                  <option>Electric Blue</option>\n                  <option>Cherry Red</option>\n                  <option>Forest Green</option>\n                  <option>Sunny Yellow</option>\n                  <option>Royal Purple</option>\n                </select>\n              </div>\n              \n              <div className=\"settings-item\">\n                <label className=\"settings-label\">Verb Color</label>\n                <select \n                  value={verbColor} \n                  onChange={(e) => setVerbColor(e.target.value)}\n                  className=\"settings-select\"\n                >\n                  <option>Electric Blue</option>\n                  <option>Cherry Red</option>\n                  <option>Forest Green</option>\n                  <option>Sunny Yellow</option>\n                  <option>Royal Purple</option>\n                </select>\n              </div>\n              \n              <div className=\"settings-item\">\n                <label className=\"settings-label\">Adjective Color</label>\n                <select \n                  value={adjectiveColor} \n                  onChange={(e) => setAdjectiveColor(e.target.value)}\n                  className=\"settings-select\"\n                >\n                  <option>Electric Blue</option>\n                  <option>Cherry Red</option>\n                  <option>Forest Green</option>\n                  <option>Sunny Yellow</option>\n                  <option>Royal Purple</option>\n                </select>\n              </div>\n            </div>\n            \n            {/* Language-specific customization */}\n            {getSelectedLanguagesArray().map(lang => (\n              <div key={`customize-${lang}`} className=\"customization-accordion\">\n                <h3 className=\"settings-title\">\n                  Customize {getLanguageName(lang)}\n                </h3>\n                \n                {/* Font Type */}\n                <div className=\"settings-item\">\n                  <label className=\"settings-label\">Font Type</label>\n                  <select \n                    value={languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica'} \n                    onChange={(e) => updateLanguageCustomization(lang, 'fontFamily', e.target.value)}\n                    className=\"settings-select\"\n                  >\n                    <optgroup label=\"Sans-serif\">\n                      <option>Arial / Helvetica</option>\n                      <option>Roboto</option>\n                      <option>Open Sans</option>\n                      <option>Noto Sans</option>\n                      <option>Verdana</option>\n                    </optgroup>\n                    <optgroup label=\"Monospace\">\n                      <option>Courier New</option>\n                      <option>Consolas</option>\n                      <option>Source Code Pro</option>\n                    </optgroup>\n                  </select>\n                </div>\n                \n                {/* Font Size */}\n                <div className=\"settings-item\">\n                  <label className=\"settings-label\">Font Size</label>\n                  <select \n                    value={languageCustomizations[lang]?.fontSize || 'Medium'} \n                    onChange={(e) => updateLanguageCustomization(lang, 'fontSize', e.target.value)}\n                    className=\"settings-select\"\n                  >\n                    <option>Small</option>\n                    <option>Medium</option>\n                    <option>Large</option>\n                    <option>X-Large</option>\n                  </select>\n                </div>\n                \n                {/* Text Color */}\n                <div className=\"settings-item\">\n                  <label className=\"settings-label\">Text Color</label>\n                  <select \n                    value={languageCustomizations[lang]?.textColor || '#000000'} \n                    onChange={(e) => updateLanguageCustomization(lang, 'textColor', e.target.value)}\n                    className=\"settings-select\"\n                  >\n                    <option value=\"#000000\">Black</option>\n                    <option value=\"#FFFFFF\">White</option>\n                    <option value=\"#333333\">Dark Gray</option>\n                    <option value=\"#1A1AFF\">Dark Blue</option>\n                  </select>\n                </div>\n                \n                {/* Background Color */}\n                <div className=\"settings-item\">\n                  <label className=\"settings-label\">Background Color</label>\n                  <select \n                    value={languageCustomizations[lang]?.backgroundColor || 'transparent'} \n                    onChange={(e) => updateLanguageCustomization(lang, 'backgroundColor', e.target.value)}\n                    className=\"settings-select\"\n                  >\n                    <option value=\"transparent\">None</option>\n                    <option value=\"#F2F2F2\">Light Gray</option>\n                    <option value=\"#FFFFFF\">White</option>\n                    <option value=\"#333333\">Dark Gray</option>\n                    <option value=\"#000000\">Black</option>\n                  </select>\n                </div>\n                \n                {/* Highlight Color */}\n                <div className=\"settings-item\">\n                  <label className=\"settings-label\">Highlight Color</label>\n                  <select \n                    value={languageCustomizations[lang]?.highlightColor || 'transparent'} \n                    onChange={(e) => updateLanguageCustomization(lang, 'highlightColor', e.target.value)}\n                    className=\"settings-select\"\n                  >\n                    <option value=\"transparent\">None</option>\n                    <option value=\"#FFEB3B\">Soft Yellow</option>\n                    <option value=\"#80D3FF\">Light Blue</option>\n                    <option value=\"#A8E6A1\">Light Green</option>\n                  </select>\n                </div>\n                \n                {/* Text Style */}\n                <div className=\"settings-item\">\n                  <label className=\"settings-label text-style-label\">Text Style</label>\n                  <div className=\"text-style-options\">\n                    <label className=\"style-toggle-label\">\n                      <input\n                        type=\"checkbox\"\n                        checked={languageCustomizations[lang]?.isBold || false}\n                        onChange={() => updateLanguageCustomization(\n                          lang, \n                          'isBold', \n                          !languageCustomizations[lang]?.isBold\n                        )}\n                        className=\"settings-checkbox\"\n                      />\n                      Bold\n                    </label>\n                    \n                    <label className=\"style-toggle-label\">\n                      <input\n                        type=\"checkbox\"\n                        checked={languageCustomizations[lang]?.isItalic || false}\n                        onChange={() => updateLanguageCustomization(\n                          lang, \n                          'isItalic', \n                          !languageCustomizations[lang]?.isItalic\n                        )}\n                        className=\"settings-checkbox\"\n                      />\n                      Italic\n                    </label>\n                    \n                    <label className=\"style-toggle-label\">\n                      <input\n                        type=\"checkbox\"\n                        checked={languageCustomizations[lang]?.isUnderlined || false}\n                        onChange={() => updateLanguageCustomization(\n                          lang, \n                          'isUnderlined', \n                          !languageCustomizations[lang]?.isUnderlined\n                        )}\n                        className=\"settings-checkbox\"\n                      />\n                      Underline\n                    </label>\n                  </div>\n                </div>\n                \n                {/* Line Height */}\n                <div className=\"settings-item\">\n                  <label className=\"settings-label\">Line Spacing</label>\n                  <select \n                    value={languageCustomizations[lang]?.lineHeight || 1.5} \n                    onChange={(e) => updateLanguageCustomization(lang, 'lineHeight', parseFloat(e.target.value))}\n                    className=\"settings-select\"\n                  >\n                    <option value=\"1\">Tight</option>\n                    <option value=\"1.5\">Normal</option>\n                    <option value=\"2\">Relaxed</option>\n                    <option value=\"2.5\">Very Relaxed</option>\n                  </select>\n                </div>\n                \n                {/* Letter Spacing */}\n                <div className=\"settings-item\">\n                  <label className=\"settings-label\">Character Spacing</label>\n                  <select \n                    value={languageCustomizations[lang]?.letterSpacing || 'normal'} \n                    onChange={(e) => updateLanguageCustomization(lang, 'letterSpacing', e.target.value)}\n                    className=\"settings-select\"\n                  >\n                    <option value=\"normal\">Normal</option>\n                    <option value=\"0.05em\">Slightly Expanded</option>\n                    <option value=\"0.1em\">Expanded</option>\n                    <option value=\"0.15em\">Very Expanded</option>\n                    <option value=\"-0.03em\">Slightly Condensed</option>\n                  </select>\n                </div>\n                \n                {/* Text Shadow */}\n                <div className=\"settings-item\">\n                  <label className=\"settings-label accessibility-toggle\">\n                    <input\n                      type=\"checkbox\"\n                      checked={languageCustomizations[lang]?.hasTextShadow || false}\n                      onChange={() => updateLanguageCustomization(\n                        lang, \n                        'hasTextShadow', \n                        !languageCustomizations[lang]?.hasTextShadow\n                      )}\n                      className=\"settings-checkbox\"\n                    />\n                    Enable Text Shadow\n                  </label>\n                </div>\n                \n                {/* Reset Button */}\n                <div className=\"settings-item\">\n                  <button \n                    className=\"reset-button\"\n                    onClick={() => {\n                      // Reset this language's customizations to defaults\n                      setLanguageCustomizations(prev => ({\n                        ...prev,\n                        [lang]: {\n                          fontFamily: 'Arial / Helvetica',\n                          fontSize: 'Medium',\n                          textColor: '#000000',\n                          backgroundColor: 'transparent',\n                          highlightColor: 'transparent',\n                          isBold: false,\n                          isItalic: false,\n                          isUnderlined: false,\n                          lineHeight: 1.5,\n                          letterSpacing: 'normal',\n                          hasTextShadow: false\n                        }\n                      }));\n                    }}\n                  >\n                    Reset to Default\n                  </button>\n                </div>\n              </div>\n            ))}\n            \n            {/* Export button */}\n            <div className=\"export-section\">\n              <button \n                className=\"export-button\"\n                onClick={() => {\n                  // Export captions with customization settings\n                  const exportData = {\n                    captions,\n                    customizations: languageCustomizations,\n                    selectedLanguages,\n                    videoId\n                  };\n                  \n                  const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n                  const url = URL.createObjectURL(blob);\n                  const a = document.createElement('a');\n                  a.href = url;\n                  a.download = `captions-${videoId}.json`;\n                  a.click();\n                }}\n              >\n                Export Captions as JSON\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Additional CSS for new features */}\n      <style jsx>{`\n        .captions-overlay {\n          position: absolute;\n          bottom: 10px;\n          left: 10px;\n          right: 10px;\n          background-color: rgba(0, 0, 0, 0.7);\n          color: white;\n          padding: 10px;\n          border-radius: 5px;\n          z-index: 10;\n        }\n        \n        .overlay-caption {\n          margin-bottom: 5px;\n        }\n        \n        .overlay-language {\n          font-weight: bold;\n          margin-right: 5px;\n        }\n        \n        .side-panel {\n          position: absolute;\n          top: 0;\n          right: 0;\n          width: 300px;\n          height: 100%;\n          overflow-y: auto;\n          background-color: #f8f9fa;\n          padding: 10px;\n          border-left: 1px solid #ddd;\n        }\n        \n        .active-caption {\n          background-color: #f0f8ff;\n          border-left: 3px solid #007bff;\n          padding-left: 10px;\n        }\n        \n        .caption-item {\n          padding: 8px;\n          border-bottom: 1px solid #eee;\n          transition: background-color 0.3s;\n        }\n        \n        .caption-item:hover {\n          background-color: #f5f5f5;\n        }\n        \n        .timestamp {\n          font-size: 0.8em;\n          color: #666;\n          margin-bottom: 3px;\n        }\n        \n        .caption-text {\n          line-height: 1.4;\n        }\n        \n        .no-caption {\n          color: #999;\n          font-style: italic;\n        }\n        \n        .active-caption-display {\n          position: relative;\n        }\n        \n        .video-frame {\n          width: 100%;\n          height: 400px;\n        }\n        \n        .active-captions-section {\n          margin-bottom: 30px;\n          padding-bottom: 20px;\n          border-bottom: 2px solid #eee;\n        }\n        \n        .section-subtitle {\n          font-size: 1.2rem;\n          margin-bottom: 15px;\n          color: #333;\n          border-bottom: 1px solid #ddd;\n          padding-bottom: 5px;\n        }\n        \n        .transcripts-section {\n          margin-top: 10px;\n        }\n        \n        /* New styles for accessibility features */\n        .accessibility-toggle {\n          display: flex;\n          align-items: center;\n          cursor: pointer;\n        }\n        \n        .settings-checkbox {\n          margin-right: 8px;\n        }\n        \n        .customization-accordion {\n          margin: 15px 0;\n          border: 1px solid #ddd;\n          border-radius: 5px;\n          overflow: hidden;\n          background-color: #fff;\n          padding: 10px;\n        }\n        \n        .text-style-options {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 15px;\n          margin-top: 5px;\n        }\n        \n        .style-toggle-label {\n          display: flex;\n          align-items: center;\n          cursor: pointer;\n        }\n        \n        .reset-button {\n          margin-top: 10px;\n          padding: 8px;\n          background-color: #f8f9fa;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n          cursor: pointer;\n          width: 100%;\n        }\n        \n        .reset-button:hover {\n          background-color: #e9ecef;\n        }\n      `}</style>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}