{"ast":null,"code":"var _jsxFileName = \"/Users/arunasrivastava/random/cse482/Multilingual/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// Update this component (around line 5-89 in your code)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCaptionText = ({\n  text,\n  customization,\n  darkMode,\n  getColor\n}) => {\n  // Font styles from customization\n  const fontStyles = {\n    fontFamily: getFontFamily(customization.fontFamily),\n    fontSize: getFontSize(customization.fontSize),\n    fontWeight: getFontWeight(customization.fontWeight),\n    color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n    letterSpacing: getLetterSpacing(customization.letterSpacing),\n    lineHeight: '1.4',\n    display: 'inline-block'\n  };\n\n  // Process the text to identify highlighted keywords\n  const processText = input => {\n    if (!input) return [];\n    const segments = [];\n    let currentIndex = 0;\n\n    // Regular expression to find highlighted keywords\n    const keywordRegex = /<highlight>(.*?)<\\/highlight>/g;\n    let match;\n\n    // Find all keyword matches\n    while ((match = keywordRegex.exec(input)) !== null) {\n      // If there's text before the match, add it as plain text\n      if (match.index > currentIndex) {\n        segments.push({\n          type: 'text',\n          content: input.substring(currentIndex, match.index)\n        });\n      }\n\n      // Add the highlighted content\n      segments.push({\n        type: 'highlight',\n        content: match[1]\n      });\n\n      // Update the current index\n      currentIndex = match.index + match[0].length;\n    }\n\n    // Add any remaining text after the last match\n    if (currentIndex < input.length) {\n      segments.push({\n        type: 'text',\n        content: input.substring(currentIndex)\n      });\n    }\n    return segments;\n  };\n\n  // Parse text into segments\n  const segments = processText(text);\n\n  // Main render function\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: fontStyles,\n    children: segments.map((segment, index) => {\n      if (segment.type === 'text') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 18\n        }, this);\n      } else if (segment.type === 'highlight') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: getColor('highlight'),\n            textDecoration: 'underline',\n            textDecorationColor: getColor('highlight'),\n            textDecorationThickness: '2px',\n            textUnderlineOffset: '2px'\n          },\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this);\n      }\n      return null;\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n// API base URL - change this if your backend is running on a different port/host\n_c = StyledCaptionText;\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n\n// Add LibreTranslate API base URL\nconst LIBRE_TRANSLATE_API = 'https://libretranslate.de';\n\n// Add translation cache to avoid repeated API calls\nconst translationCache = new Map();\n\n// Get font size based on settings - now supports numeric values\nconst getFontSize = sizeValue => {\n  if (typeof sizeValue === 'number') {\n    return `${sizeValue}px`;\n  }\n  const sizeMap = {\n    'Small': '14px',\n    'Medium': '16px',\n    'Large': '20px',\n    'X-Large': '24px'\n  };\n  return sizeMap[sizeValue] || '16px';\n};\n\n// Get font weight based on settings - now supports numeric values\nconst getFontWeight = weightValue => {\n  if (typeof weightValue === 'number') {\n    return weightValue.toString();\n  }\n  const weightMap = {\n    'Light': '300',\n    'Regular': '400',\n    'Bold': '700'\n  };\n  return weightMap[weightValue] || '400';\n};\n\n// Get letter spacing based on settings - now supports numeric values\nconst getLetterSpacing = spacingValue => {\n  if (typeof spacingValue === 'number') {\n    return `${spacingValue}px`;\n  }\n  return spacingValue || 'normal';\n};\n\n// Get font family based on settings\nconst getFontFamily = fontOption => {\n  const fontMap = {\n    'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n    'Roboto': 'Roboto, Arial, sans-serif',\n    'Open Sans': 'Open Sans, Arial, sans-serif',\n    'Verdana': 'Verdana, Geneva, sans-serif'\n  };\n  return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n};\nfunction App() {\n  _s();\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=zy2Zj8yIe6c');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n    // tertiary language removed\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n\n  // Add missing hiddenLanguages state\n  const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n\n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50,\n    // percentage\n    y: 80,\n    // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0,\n    lastX: 0,\n    lastY: 0,\n    width: 40 // percentage\n  });\n\n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n\n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n\n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n\n  // New state for UI enhancements\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n  const [captionsHeight, setCaptionsHeight] = useState('normal');\n\n  // New state for caption spacing\n  const [captionSpacing, setCaptionSpacing] = useState(10); // Default 10px spacing\n\n  // Refs\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const videoResizeHandleRef = useRef(null);\n  const captionsResizeHandleRef = useRef(null);\n  const activeResizeRef = useRef(null);\n\n  // Add new state for resize handling\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeDirection, setResizeDirection] = useState(null);\n  const resizeStartRef = useRef(null);\n\n  // Replace POS color states with highlight color\n  const [highlightColor, setHighlightColor] = useState('Electric Blue');\n\n  // Add new state for highlighted captions\n  const [highlightedCaptions, setHighlightedCaptions] = useState({});\n  const [isProcessingKeywords, setIsProcessingKeywords] = useState(false);\n  const [keywordProcessingProgress, setKeywordProcessingProgress] = useState(0);\n  const [keywordsEnabled, setKeywordsEnabled] = useState(false);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = url => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[7].length === 11 ? match[7] : null;\n  };\n\n  // Toggle settings panel collapse\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]);\n\n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = lang => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n\n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n\n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n\n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = {\n      ...languageCustomizations\n    };\n    let hasChanges = false;\n\n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 16,\n          fontWeight: 400,\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 0\n        };\n        hasChanges = true;\n      }\n    });\n\n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(newLanguageCustomizations);\n    }\n  }, [selectedLanguages]);\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = {\n      ...languageCustomizations\n    };\n    let hasChanges = false;\n    Object.keys(updatedCustomizations).forEach(lang => {\n      var _updatedCustomization, _updatedCustomization2;\n      if (((_updatedCustomization = updatedCustomizations[lang]) === null || _updatedCustomization === void 0 ? void 0 : _updatedCustomization.textColor) === '#000000' || ((_updatedCustomization2 = updatedCustomizations[lang]) === null || _updatedCustomization2 === void 0 ? void 0 : _updatedCustomization2.textColor) === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n        hasChanges = true;\n      }\n    });\n\n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(updatedCustomizations);\n    }\n  }, [darkMode]);\n\n  // Add this function to toggle language visibility\n  const toggleLanguageVisibility = lang => {\n    setHiddenLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Set up video container resize functionality\n  useEffect(() => {\n    if (!videoId) return;\n    const videoContainer = videoContainerRef.current;\n    const resizeHandle = videoResizeHandleRef.current;\n    if (!videoContainer || !resizeHandle) return;\n    const handleMouseDown = e => {\n      e.preventDefault();\n\n      // Save initial position and dimensions\n      const startX = e.clientX;\n      const startWidth = videoContainer.offsetWidth;\n      activeResizeRef.current = 'video';\n      const handleMouseMove = moveEvent => {\n        if (activeResizeRef.current !== 'video') return;\n\n        // Calculate new width based on mouse movement\n        const deltaX = moveEvent.clientX - startX;\n        const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n\n        // Set width\n        videoContainer.style.width = `${newWidth}px`;\n\n        // Update the video wrapper's padding-top to maintain aspect ratio\n        const videoWrapper = videoContainer.querySelector('.video-wrapper');\n        if (videoWrapper) {\n          // No need to explicitly set height - padding-top maintains ratio\n          videoWrapper.style.paddingTop = `${9 / 16 * 100}%`; // Keep 16:9 ratio\n        }\n        moveEvent.preventDefault();\n      };\n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    return () => {\n      if (resizeHandle) {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      }\n    };\n  }, [videoId]);\n\n  // Set up captions container resize functionality\n  useEffect(() => {\n    if (!captionsResizeHandleRef.current) return;\n    const resizeHandle = captionsResizeHandleRef.current;\n    const handleMouseDown = e => {\n      e.preventDefault();\n\n      // Find the active captions section\n      const captionsSection = document.querySelector('.active-captions-section');\n      if (!captionsSection) return;\n\n      // Save initial position and dimensions\n      const startY = e.clientY;\n      const startHeight = captionsSection.offsetHeight;\n      activeResizeRef.current = 'captions';\n      const handleMouseMove = moveEvent => {\n        if (activeResizeRef.current !== 'captions') return;\n\n        // Calculate new height\n        const height = startHeight + (moveEvent.clientY - startY);\n\n        // Apply new height with min constraint\n        if (height > 100) {\n          captionsSection.style.height = `${height}px`;\n          captionsSection.style.maxHeight = `${height}px`;\n        }\n        moveEvent.preventDefault();\n      };\n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    return () => {\n      resizeHandle.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [availableLanguages.length]);\n\n  // Handle YouTube link input\n  const handleLinkChange = e => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async videoId => {\n    try {\n      var _uniqueTranscripts$fi, _uniqueTranscripts$;\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Received data:', data);\n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n\n      // Filter out duplicate transcripts based on language_code\n      const uniqueTranscripts = data.transcripts.filter((transcript, index, self) => index === self.findIndex(t => t.language_code === transcript.language_code));\n\n      // Store the filtered transcript information\n      setAvailableTranscripts(uniqueTranscripts);\n\n      // Also keep the unique language codes for backward compatibility\n      const languageCodes = uniqueTranscripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} unique languages:`, languageCodes);\n\n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = ((_uniqueTranscripts$fi = uniqueTranscripts.find(t => t.language_code === 'en')) === null || _uniqueTranscripts$fi === void 0 ? void 0 : _uniqueTranscripts$fi.language_code) || ((_uniqueTranscripts$ = uniqueTranscripts[0]) === null || _uniqueTranscripts$ === void 0 ? void 0 : _uniqueTranscripts$.language_code) || '';\n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: ''\n      });\n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n\n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      setStatus(`Loading transcripts (0/${languages.length})...`);\n      const fetchPromises = languages.map(async lang => {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            return {\n              lang,\n              error: true\n            };\n          }\n          const data = await response.json();\n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            return {\n              lang,\n              error: true\n            };\n          }\n\n          // Process the transcript data with keyword highlighting\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: caption.text,\n            end: caption.start + caption.duration\n          }));\n\n          // Update captions immediately as each one loads\n          setCaptions(prev => ({\n            ...prev,\n            [lang]: processedTranscript\n          }));\n          setStatus(prevStatus => {\n            var _prevStatus$match;\n            const loadedCount = ((_prevStatus$match = prevStatus.match(/\\d+/)) === null || _prevStatus$match === void 0 ? void 0 : _prevStatus$match[0]) || 0;\n            return `Loading transcripts (${Number(loadedCount) + 1}/${languages.length})...`;\n          });\n          return {\n            lang,\n            transcript: processedTranscript\n          };\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n          return {\n            lang,\n            error: true\n          };\n        }\n      });\n      const results = await Promise.all(fetchPromises);\n      const successfulLoads = results.filter(result => !result.error).length;\n      setStatus(`Successfully loaded captions in ${successfulLoads} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = text => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n\n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = {\n      ...selectedLanguages\n    };\n\n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => {\n      // Get existing customization or create new one with defaults\n      const existingCustomization = prev[lang] || {\n        fontFamily: 'Arial / Helvetica',\n        fontSize: 16,\n        fontWeight: 400,\n        textColor: darkMode ? '#FFFFFF' : '#000000',\n        letterSpacing: 0\n      };\n\n      // Create new customization object with updated property\n      const updatedCustomization = {\n        ...existingCustomization,\n        [property]: value\n      };\n\n      // Return new state with updated customization\n      return {\n        ...prev,\n        [lang]: updatedCustomization\n      };\n    });\n  };\n\n  // Get color based on settings\n  const getColor = type => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    if (type === 'highlight') {\n      return colorMap[highlightColor] || colorMap['Electric Blue'];\n    }\n    return darkMode ? '#FFFFFF' : '#000000';\n  };\n\n  // Function to get translation for a word\n  const translateWord = (word, sourceLang, targetLang) => {\n    return new Promise((resolve, reject) => {\n      console.log(`Attempting to translate: \"${word}\" from ${sourceLang} to ${targetLang}`);\n\n      // Create a cache key\n      const cacheKey = `${word}|${sourceLang}|${targetLang}`;\n\n      // Check cache first\n      if (translationCache.has(cacheKey)) {\n        console.log(`Found cached translation for: ${word}`);\n        resolve(translationCache.get(cacheKey));\n        return;\n      }\n      console.log(`Making API request to LibreTranslate for: ${word}`);\n      fetch(`${LIBRE_TRANSLATE_API}/translate`, {\n        method: 'POST',\n        body: JSON.stringify({\n          q: word,\n          source: sourceLang,\n          target: targetLang,\n          format: \"text\"\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      }).then(response => {\n        console.log(`Received response status: ${response.status}`);\n        if (!response.ok) {\n          throw new Error(`Translation failed with status: ${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        console.log(`Translation result for \"${word}\":`, data);\n        if (data.error) {\n          throw new Error(`Translation API error: ${data.error}`);\n        }\n        const translation = data.translatedText;\n        translationCache.set(cacheKey, translation);\n        resolve(translation);\n      }).catch(error => {\n        console.warn(`Translation failed for word \"${word}\":`, error);\n        // Instead of resolving with null, let's try a simpler approach\n        // Just resolve with the original word if translation fails\n        resolve(word);\n      });\n    });\n  };\n\n  // Function to identify keywords in a pair of captions\n  const identifyKeywords = (primaryText, secondaryText, primaryLang, secondaryLang) => {\n    return new Promise(async resolve => {\n      console.log(`Identifying keywords between:\\nPrimary (${primaryLang}): ${primaryText}\\nSecondary (${secondaryLang}): ${secondaryText}`);\n      if (!primaryText || !secondaryText || primaryText.length < 10 || secondaryText.length < 10) {\n        console.log(\"Texts too short, skipping keyword identification\");\n        resolve({\n          text1: primaryText,\n          text2: secondaryText\n        });\n        return;\n      }\n\n      // Common stop words and short words to filter out\n      const stopWords = new Set(['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'i', 'it', 'for', 'not', 'on', 'with', 'he', 'as', 'you', 'do', 'at', 'this', 'but', 'his', 'by', 'from', 'they', 'we', 'say', 'her', 'she', 'or', 'an', 'will', 'my', 'one', 'all', 'would', 'there', 'their', 'what', 'so', 'up', 'out', 'if', 'about', 'who', 'get', 'which', 'go', 'me', 'when', 'make', 'can', 'like', 'no', 'just', 'him', 'know', 'take', 'into', 'your', 'some', 'could', 'them', 'see', 'other', 'than', 'then', 'now', 'look', 'only', 'come', 'its', 'over', 'think', 'also', 'back', 'after', 'use', 'two', 'how', 'our', 'work', 'first', 'well', 'way', 'even', 'new', 'want', 'because', 'any', 'these', 'give', 'day', 'most', 'us', 'is', 'was', 'are', 'were', 'been', 'has', 'had', 'did', 'doing', 'does', 'done']);\n      try {\n        // Split into words and clean them\n        const primaryWords = primaryText.toLowerCase().split(/\\s+/).map(w => w.replace(/[^\\w\\s]/g, '')).filter(w => w.length > 2 && !stopWords.has(w) && /^[a-z]+$/.test(w));\n        console.log(\"Filtered primary words:\", primaryWords);\n\n        // Process each meaningful primary word\n        const translationResults = await Promise.all(primaryWords.map(async primaryWord => {\n          const translation = await translateWord(primaryWord, primaryLang, secondaryLang);\n          return {\n            primaryWord,\n            translation\n          };\n        }));\n        console.log(\"Translation results:\", translationResults);\n        let text1 = primaryText;\n        let text2 = secondaryText;\n        const matches = [];\n\n        // Find matches in secondary text\n        translationResults.forEach(({\n          primaryWord,\n          translation\n        }) => {\n          if (translation) {\n            const translatedWords = translation.toLowerCase().split(/\\s+/);\n            const secondaryWords = secondaryText.toLowerCase().split(/\\s+/);\n            translatedWords.forEach(translatedWord => {\n              secondaryWords.forEach((secondaryWord, index) => {\n                if (secondaryWord.includes(translatedWord) || translatedWord.includes(secondaryWord)) {\n                  matches.push({\n                    primary: primaryWord,\n                    secondary: secondaryWords[index]\n                  });\n                }\n              });\n            });\n          }\n        });\n        console.log(\"Found matches:\", matches);\n\n        // Take top 2 unique matches\n        const uniqueMatches = matches.filter((match, index, self) => index === self.findIndex(m => m.primary === match.primary && m.secondary === match.secondary)).slice(0, 2);\n        console.log(\"Selected unique matches:\", uniqueMatches);\n\n        // Apply highlights\n        uniqueMatches.forEach(match => {\n          const primaryRegex = new RegExp(`\\\\b${match.primary}\\\\b`, 'gi');\n          const secondaryRegex = new RegExp(`\\\\b${match.secondary}\\\\b`, 'gi');\n          text1 = text1.replace(primaryRegex, word => `<highlight>${word}</highlight>`);\n          text2 = text2.replace(secondaryRegex, word => `<highlight>${word}</highlight>`);\n        });\n        console.log(\"Final highlighted texts:\", {\n          text1,\n          text2\n        });\n        resolve({\n          text1,\n          text2\n        });\n      } catch (error) {\n        console.error(\"Error in keyword identification:\", error);\n        resolve({\n          text1: primaryText,\n          text2: secondaryText\n        });\n      }\n    });\n  };\n\n  // Add useEffect to process captions when they change\n  useEffect(() => {\n    if (activeCaptions[selectedLanguages.primary] && activeCaptions[selectedLanguages.secondary]) {\n      identifyKeywords(activeCaptions[selectedLanguages.primary].text, activeCaptions[selectedLanguages.secondary].text, selectedLanguages.primary, selectedLanguages.secondary).then(({\n        text1,\n        text2\n      }) => {\n        setHighlightedCaptions({\n          [selectedLanguages.primary]: text1,\n          [selectedLanguages.secondary]: text2\n        });\n      });\n    }\n  }, [activeCaptions, selectedLanguages.primary, selectedLanguages.secondary]);\n\n  // Function to process entire transcript for keywords\n  const processEntireTranscriptForKeywords = async () => {\n    console.log(\"Starting keyword processing...\");\n    console.log(\"Primary language:\", selectedLanguages.primary);\n    console.log(\"Secondary language:\", selectedLanguages.secondary);\n    console.log(\"Captions available:\", Object.keys(captions));\n    if (!selectedLanguages.primary || !selectedLanguages.secondary || !captions[selectedLanguages.primary] || !captions[selectedLanguages.secondary]) {\n      console.log(\"Missing required languages or captions\");\n      setStatus('Please select both primary and secondary languages first');\n      return;\n    }\n    setIsProcessingKeywords(true);\n    setKeywordProcessingProgress(0);\n    setKeywordsEnabled(true);\n    const primaryTranscript = captions[selectedLanguages.primary];\n    const secondaryTranscript = captions[selectedLanguages.secondary];\n    const totalCaptions = primaryTranscript.length;\n    console.log(\"Total captions to process:\", totalCaptions);\n    const processedHighlights = {\n      [selectedLanguages.primary]: {},\n      [selectedLanguages.secondary]: {}\n    };\n    try {\n      for (let i = 0; i < totalCaptions; i++) {\n        const primaryCaption = primaryTranscript[i];\n        const secondaryCaption = secondaryTranscript[i];\n        console.log(`Processing caption pair ${i + 1}/${totalCaptions}`);\n        console.log(\"Primary text:\", primaryCaption.text);\n        console.log(\"Secondary text:\", secondaryCaption.text);\n        if (primaryCaption && secondaryCaption) {\n          const result = await identifyKeywords(primaryCaption.text, secondaryCaption.text, selectedLanguages.primary, selectedLanguages.secondary);\n          console.log(\"Processed result:\", result);\n          processedHighlights[selectedLanguages.primary][primaryCaption.start] = result.text1;\n          processedHighlights[selectedLanguages.secondary][secondaryCaption.start] = result.text2;\n        }\n        setKeywordProcessingProgress((i + 1) / totalCaptions * 100);\n      }\n      console.log(\"Final processed highlights:\", processedHighlights);\n      setHighlightedCaptions(processedHighlights);\n      setIsProcessingKeywords(false);\n      setStatus('Keyword highlighting completed');\n    } catch (error) {\n      console.error(\"Error during keyword processing:\", error);\n      setStatus('Error during keyword processing');\n      setIsProcessingKeywords(false);\n    }\n  };\n\n  // Update formatCaptionText to use processed highlights\n  const formatCaptionText = (text, lang, startTime) => {\n    if (!text) return '';\n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial / Helvetica',\n      fontSize: 16,\n      fontWeight: 400,\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 0\n    };\n\n    // Use the processed highlights if keywords are enabled\n    const highlightedText = keywordsEnabled && highlightedCaptions[lang] ? highlightedCaptions[lang][startTime] || text : text;\n    return /*#__PURE__*/_jsxDEV(StyledCaptionText, {\n      text: highlightedText,\n      customization: customization,\n      darkMode: darkMode,\n      getColor: getColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 950,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = lang => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    return {\n      fontFamily: getFontFamily(customization.fontFamily || 'Arial / Helvetica'),\n      fontSize: getFontSize(customization.fontSize || 16),\n      fontWeight: getFontWeight(customization.fontWeight || 400),\n      color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: getLetterSpacing(customization.letterSpacing || 0),\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(caption => currentTime >= caption.start && currentTime <= caption.end);\n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    let player = null;\n\n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        playerVars: {\n          enablejsapi: 1,\n          origin: window.location.origin,\n          widget_referrer: window.location.origin,\n          disablekb: 0,\n          fs: 1,\n          rel: 0,\n          modestbranding: 1,\n          // Disable ads to prevent CORS errors\n          iv_load_policy: 3,\n          hl: 'en'\n        },\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange,\n          'onError': event => {\n            console.log('YouTube player error:', event);\n            setStatus('Error loading video. Please check the URL and try again.');\n          }\n        }\n      });\n    }\n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n      player = event.target;\n\n      // Add error event listener to window to catch and suppress CORS errors\n      window.addEventListener('error', e => {\n        if (e.message.includes('googleads') || e.message.includes('doubleclick')) {\n          e.preventDefault();\n          e.stopPropagation();\n          return false;\n        }\n      }, true);\n    }\n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (player && player.getCurrentTime) {\n            setCurrentTime(player.getCurrentTime());\n          }\n          if (player && player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n      // Remove error event listener\n      window.removeEventListener('error', () => {});\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = code => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = langCode => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return (transcript === null || transcript === void 0 ? void 0 : transcript.language) || langCode;\n  };\n\n  // Start dragging the caption overlay\n  const handleMouseDown = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n    const overlayElement = overlayRef.current;\n    if (!overlayElement) return;\n\n    // Calculate initial position relative to the container\n    const initialX = (e.clientX - rect.left) / rect.width * 100;\n    const initialY = (e.clientY - rect.top) / rect.height * 100;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n\n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n\n  // Handle mouse move during dragging - Improved for smoother movement\n  const handleMouseMove = e => {\n    if (!overlayPosition.isDragging) return;\n\n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate current position as percentage of container\n    const currentX = (e.clientX - rect.left) / rect.width * 100;\n    const currentY = (e.clientY - rect.top) / rect.height * 100;\n\n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n\n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n\n    // Update position with smooth transition\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY\n    }));\n\n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n\n  // Stop dragging with smooth finish\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle touch start for mobile devices - improved for smoother touch interaction\n  const handleTouchStart = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate initial touch position relative to container\n    const initialX = (touch.clientX - rect.left) / rect.width * 100;\n    const initialY = (touch.clientY - rect.top) / rect.height * 100;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', handleTouchEnd);\n\n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n\n  // Handle touch move for mobile devices - improved for smoother movement\n  const handleTouchMove = e => {\n    if (!overlayPosition.isDragging) return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate current position as percentage of container\n    const currentX = (touch.clientX - rect.left) / rect.width * 100;\n    const currentY = (touch.clientY - rect.top) / rect.height * 100;\n\n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n\n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n\n    // Update position with smooth transition\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY\n    }));\n\n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n\n  // Handle touch end for mobile devices - with smooth finish\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n\n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n\n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = time => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n\n  // Handle resize start\n  const handleResizeStart = (e, direction) => {\n    e.stopPropagation(); // Prevent drag event from firing\n    const videoContainer = videoContainerRef.current;\n    const overlay = overlayRef.current;\n    if (!videoContainer || !overlay) return;\n    setIsResizing(true);\n    setResizeDirection(direction);\n\n    // Store initial values\n    resizeStartRef.current = {\n      x: e.clientX,\n      width: overlayPosition.width,\n      containerWidth: videoContainer.getBoundingClientRect().width,\n      direction: direction,\n      initialX: overlayPosition.x // Store initial X position\n    };\n\n    // Add event listeners to document to ensure smooth dragging\n    document.addEventListener('mousemove', handleResize);\n    document.addEventListener('mouseup', handleResizeEnd);\n\n    // Prevent text selection and default behaviors\n    e.preventDefault();\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize\n  const handleResize = e => {\n    if (!isResizing || !resizeStartRef.current) return;\n    const {\n      x: startX,\n      width: startWidth,\n      containerWidth,\n      direction,\n      initialX\n    } = resizeStartRef.current;\n    const deltaX = e.clientX - startX;\n\n    // Calculate width change as percentage\n    const deltaWidth = deltaX / containerWidth * 100;\n\n    // Calculate new width based on resize direction\n    let newWidth;\n    if (direction === 'right') {\n      newWidth = Math.max(20, Math.min(90, startWidth + deltaWidth));\n    } else {\n      newWidth = Math.max(20, Math.min(90, startWidth - deltaWidth));\n    }\n\n    // If resizing from left, adjust position to maintain right edge position\n    if (direction === 'left') {\n      const currentRight = initialX + startWidth / 2;\n      const newX = currentRight - newWidth / 2;\n      setOverlayPosition(prev => ({\n        ...prev,\n        x: Math.max(newWidth / 2, Math.min(100 - newWidth / 2, newX)),\n        width: newWidth\n      }));\n    } else {\n      // Update width only for right resize\n      setOverlayPosition(prev => ({\n        ...prev,\n        width: newWidth\n      }));\n    }\n\n    // Prevent text selection during resize\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize end\n  const handleResizeEnd = () => {\n    if (!isResizing) return;\n    setIsResizing(false);\n    setResizeDirection(null);\n    resizeStartRef.current = null;\n\n    // Remove event listeners\n    document.removeEventListener('mousemove', handleResize);\n    document.removeEventListener('mouseup', handleResizeEnd);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"YouTube Multilingual Captions Extractor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1357,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dark-mode-toggle\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"toggle-checkbox\",\n          type: \"checkbox\",\n          checked: darkMode,\n          onChange: toggleDarkMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1362,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-slot\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sun-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify sun-icon\",\n              \"data-icon\": \"feather-sun\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1370,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1369,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"toggle-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1372,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"moon-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify moon-icon\",\n              \"data-icon\": \"feather-moon\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1374,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1373,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1368,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1361,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1360,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: youtubeLink,\n          onChange: handleLinkChange,\n          placeholder: \"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\",\n          className: \"input-field\",\n          \"aria-label\": \"YouTube video URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1383,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'Load Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1391,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1382,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1381,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-message\",\n      role: \"status\",\n      \"aria-live\": \"polite\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1403,\n      columnNumber: 9\n    }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          ref: videoContainerRef,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-header\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"placement-toggle\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"placement-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`,\n                  onClick: () => setCaptionPlacement('Below Video'),\n                  children: \"Below\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1417,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`,\n                  onClick: () => setCaptionPlacement('Overlay'),\n                  children: \"Overlay\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1423,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1416,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1415,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1414,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-wrapper\",\n            style: {\n              paddingTop: '56.25%'\n            },\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"youtube-player\",\n              className: \"video-frame\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1434,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1432,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: videoResizeHandleRef,\n            className: \"video-resize-handle\",\n            title: \"Drag to resize video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1438,\n            columnNumber: 15\n          }, this), captionPlacement === 'Overlay' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''} ${isResizing ? 'resizing' : ''}`,\n            style: {\n              position: 'absolute',\n              left: `${overlayPosition.x}%`,\n              top: `${overlayPosition.y}%`,\n              transform: 'translate(-50%, -50%)',\n              cursor: overlayPosition.isDragging ? 'grabbing' : 'grab',\n              transition: overlayPosition.isDragging || isResizing ? 'none' : 'all 0.1s ease-out',\n              width: `${overlayPosition.width}%`,\n              minWidth: '200px',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              backgroundColor: darkMode ? 'rgba(0, 0, 0, 0.7)' : 'rgba(255, 255, 255, 0.7)',\n              backdropFilter: 'blur(8px)',\n              borderRadius: '8px',\n              padding: '8px',\n              boxSizing: 'border-box',\n              border: '1px solid rgba(255, 255, 255, 0.1)'\n            },\n            ref: overlayRef,\n            onMouseDown: handleMouseDown,\n            onTouchStart: handleTouchStart,\n            tabIndex: \"0\",\n            role: \"region\",\n            \"aria-label\": \"Movable captions overlay\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"resize-handle resize-handle-left\",\n              style: {\n                position: 'absolute',\n                left: '-8px',\n                top: 0,\n                width: '16px',\n                height: '100%',\n                cursor: 'ew-resize',\n                backgroundColor: isResizing && resizeDirection === 'left' ? 'rgba(255, 255, 255, 0.2)' : 'transparent',\n                borderRadius: '4px 0 0 4px',\n                zIndex: 10\n              },\n              onMouseDown: e => handleResizeStart(e, 'left')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1475,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"resize-handle resize-handle-right\",\n              style: {\n                position: 'absolute',\n                right: '-8px',\n                top: 0,\n                width: '16px',\n                height: '100%',\n                cursor: 'ew-resize',\n                backgroundColor: isResizing && resizeDirection === 'right' ? 'rgba(255, 255, 255, 0.2)' : 'transparent',\n                borderRadius: '0 4px 4px 0',\n                zIndex: 10\n              },\n              onMouseDown: e => handleResizeStart(e, 'right')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1493,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: 'absolute',\n                left: '-4px',\n                top: '50%',\n                transform: 'translateY(-50%)',\n                width: '4px',\n                height: '24px',\n                backgroundColor: isResizing && resizeDirection === 'left' ? 'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                borderRadius: '2px',\n                pointerEvents: 'none',\n                transition: 'background-color 0.1s ease'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1511,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: 'absolute',\n                right: '-4px',\n                top: '50%',\n                transform: 'translateY(-50%)',\n                width: '4px',\n                height: '24px',\n                backgroundColor: isResizing && resizeDirection === 'right' ? 'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                borderRadius: '2px',\n                pointerEvents: 'none',\n                transition: 'background-color 0.1s ease'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1526,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-drag-instructions\",\n              children: \"Hold to move \\u2022 Drag edges to resize\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1542,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => activeCaptions[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-caption\",\n              style: {\n                ...getCaptionStyle(lang),\n                width: '100%',\n                textAlign: 'center',\n                padding: '4px 8px',\n                whiteSpace: 'pre-wrap',\n                overflowWrap: 'break-word',\n                wordWrap: 'break-word',\n                maxWidth: '100%',\n                display: 'block',\n                userSelect: 'none' // Prevent text selection while dragging\n              },\n              children: formatCaptionText(activeCaptions[lang].text, lang, activeCaptions[lang].start)\n            }, lang, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1548,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1446,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1413,\n          columnNumber: 13\n        }, this), captionPlacement === 'Below Video' && availableLanguages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"captions-container closer-to-video\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"toggle-caption-height\",\n              onClick: toggleCaptionsHeight,\n              title: captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions',\n              children: captionsHeight === 'normal' ? '↓' : '↑'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1579,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              // Skip hidden languages\n              if (hiddenLanguages[lang]) return null;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"caption-text-container\",\n                style: {\n                  marginBottom: `${captionSpacing}px`\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"caption-content-wrapper\",\n                  children: [activeCaptions[lang] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"caption-text\",\n                    children: formatCaptionText(activeCaptions[lang].text, lang, activeCaptions[lang].start)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1599,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"no-caption\",\n                    children: \"   ...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1603,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `language-tag-right ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`,\n                    children: getLanguageName(lang)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1605,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1597,\n                  columnNumber: 23\n                }, this)\n              }, `active-${lang}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1592,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1578,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"caption-spacing-control-below\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              id: \"caption-spacing-below\",\n              min: \"-20\",\n              max: \"40\",\n              step: \"0.25\",\n              value: captionSpacing,\n              onChange: e => setCaptionSpacing(Number(e.target.value)),\n              className: \"spacing-slider-below\",\n              \"aria-label\": \"Adjust caption spacing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1616,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1615,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: captionsResizeHandleRef,\n            className: \"resize-handle resize-handle-vertical\",\n            title: \"Drag to resize captions height\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1630,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transcripts-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"section-subtitle\",\n              children: \"Full Transcripts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1638,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _captions$lang;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"language-title\",\n                  children: [getLanguageName(lang), lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1642,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"captions-content\",\n                  children: (_captions$lang = captions[lang]) === null || _captions$lang === void 0 ? void 0 : _captions$lang.map((caption, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`,\n                    onClick: () => jumpToTime(caption.start),\n                    tabIndex: \"0\",\n                    role: \"button\",\n                    \"aria-label\": `Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`,\n                    onKeyDown: e => {\n                      if (e.key === 'Enter' || e.key === ' ') {\n                        jumpToTime(caption.start);\n                      }\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"timestamp\",\n                      children: [Math.floor(caption.start / 60), \":\", (caption.start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(caption.end / 60), \":\", (caption.end % 60).toFixed(1).padStart(4, '0')]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1663,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"caption-text\",\n                      children: formatCaptionText(caption.text, lang, caption.start)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1667,\n                      columnNumber: 29\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1651,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1649,\n                  columnNumber: 23\n                }, this)]\n              }, `transcript-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1641,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1637,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1575,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1411,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"settings-toggle\",\n          onClick: toggleSettingsPanel,\n          title: settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\",\n          \"aria-expanded\": !settingsPanelCollapsed,\n          \"aria-controls\": \"settings-content\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"settings-toggle-icon\",\n            children: settingsPanelCollapsed ? '»' : '«'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1689,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1682,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"settings-content\",\n          style: {\n            display: settingsPanelCollapsed ? 'none' : 'block',\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Customize Display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1695,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Select Languages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1699,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"primary-language\",\n                children: \"Primary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1703,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"primary-language\",\n                  value: selectedLanguages.primary,\n                  onChange: e => setLanguageRank(e.target.value, 'primary'),\n                  className: \"settings-select language-dropdown\",\n                  children: availableTranscripts.map((transcript, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, `primary-${transcript.language_code}-${index}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1712,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1705,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1704,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1702,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"secondary-language\",\n                children: \"Secondary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1722,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"secondary-language\",\n                  value: selectedLanguages.secondary,\n                  onChange: e => setLanguageRank(e.target.value, 'secondary'),\n                  className: \"settings-select language-dropdown\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"None\"\n                  }, \"none\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1730,\n                    columnNumber: 23\n                  }, this), availableTranscripts.map((transcript, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, `secondary-${transcript.language_code}-${index}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1732,\n                    columnNumber: 25\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1724,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1723,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1721,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1698,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Language Customizations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1743,\n              columnNumber: 17\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _languageCustomizatio, _languageCustomizatio2;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `language-customization-card ${collapsedLanguages[lang] ? 'collapsed' : ''}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-header\",\n                  onClick: () => toggleLanguageCollapse(lang),\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"language-header-content\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-name\",\n                      children: getLanguageName(lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1752,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: `visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`,\n                      onClick: e => {\n                        e.stopPropagation();\n                        toggleLanguageVisibility(lang);\n                      },\n                      title: hiddenLanguages[lang] ? 'Show Language' : 'Hide Language',\n                      \"aria-label\": hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1753,\n                      columnNumber: 25\n                    }, this), lang === selectedLanguages.primary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag primary\",\n                      children: \"Primary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1762,\n                      columnNumber: 64\n                    }, this), lang === selectedLanguages.secondary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag secondary\",\n                      children: \"Secondary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1763,\n                      columnNumber: 66\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1751,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"collapse-toggle\",\n                    onClick: e => {\n                      e.stopPropagation();\n                      toggleLanguageCollapse(lang);\n                    },\n                    \"aria-label\": collapsedLanguages[lang] ? \"Expand language settings\" : \"Collapse language settings\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1765,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1747,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-content\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: `visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`,\n                    onClick: () => toggleLanguageVisibility(lang),\n                    title: hiddenLanguages[lang] ? 'Show Language' : 'Hide Language',\n                    \"aria-label\": hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1777,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Font\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1786,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      className: \"font-select\",\n                      value: ((_languageCustomizatio = languageCustomizations[lang]) === null || _languageCustomizatio === void 0 ? void 0 : _languageCustomizatio.fontFamily) || 'Arial / Helvetica',\n                      onChange: e => updateLanguageCustomization(lang, 'fontFamily', e.target.value),\n                      style: {\n                        fontFamily: getFontFamily(((_languageCustomizatio2 = languageCustomizations[lang]) === null || _languageCustomizatio2 === void 0 ? void 0 : _languageCustomizatio2.fontFamily) || 'Arial / Helvetica')\n                      },\n                      children: ['Arial / Helvetica', 'Roboto', 'Open Sans', 'Verdana'].map(font => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: font,\n                        style: {\n                          fontFamily: getFontFamily(font)\n                        },\n                        children: font\n                      }, font, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1794,\n                        columnNumber: 29\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1787,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1785,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Size\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1807,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"button-group\",\n                      children: [{\n                        value: 14,\n                        label: 'Small'\n                      }, {\n                        value: 18,\n                        label: 'Medium'\n                      }, {\n                        value: 24,\n                        label: 'Large'\n                      }].map(size => {\n                        var _languageCustomizatio3;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: `option-button ${((_languageCustomizatio3 = languageCustomizations[lang]) === null || _languageCustomizatio3 === void 0 ? void 0 : _languageCustomizatio3.fontSize) === size.value ? 'active' : ''}`,\n                          onClick: () => {\n                            const updatedCustomization = {\n                              ...languageCustomizations[lang],\n                              fontSize: size.value\n                            };\n                            setLanguageCustomizations(prev => ({\n                              ...prev,\n                              [lang]: updatedCustomization\n                            }));\n                          },\n                          children: size.label\n                        }, size.value, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1814,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1808,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1806,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Font Weight\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1836,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"button-group\",\n                      children: [{\n                        value: 300,\n                        label: 'Light'\n                      }, {\n                        value: 400,\n                        label: 'Regular'\n                      }, {\n                        value: 700,\n                        label: 'Bold'\n                      }].map(weight => {\n                        var _languageCustomizatio4;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: `option-button ${((_languageCustomizatio4 = languageCustomizations[lang]) === null || _languageCustomizatio4 === void 0 ? void 0 : _languageCustomizatio4.fontWeight) === weight.value ? 'active' : ''}`,\n                          onClick: () => {\n                            const updatedCustomization = {\n                              ...languageCustomizations[lang],\n                              fontWeight: weight.value\n                            };\n                            setLanguageCustomizations(prev => ({\n                              ...prev,\n                              [lang]: updatedCustomization\n                            }));\n                          },\n                          children: weight.label\n                        }, weight.value, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1843,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1837,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1835,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Color\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1865,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"color-options\",\n                      children: ['#000000',\n                      // Black - for light mode\n                      '#FFFFFF',\n                      // White - for dark mode\n                      '#0052CC',\n                      // Accessible blue\n                      '#2E7D32' // Accessible green\n                      ].map(color => {\n                        var _languageCustomizatio5;\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: `color-option ${((_languageCustomizatio5 = languageCustomizations[lang]) === null || _languageCustomizatio5 === void 0 ? void 0 : _languageCustomizatio5.textColor) === color ? 'active' : ''}`,\n                          style: {\n                            backgroundColor: color\n                          },\n                          onClick: () => updateLanguageCustomization(lang, 'textColor', color)\n                        }, color, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1873,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1866,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1864,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Character Spacing\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1885,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"button-group\",\n                      children: [{\n                        value: -1,\n                        label: 'Tight'\n                      }, {\n                        value: 0,\n                        label: 'Normal'\n                      }, {\n                        value: 2,\n                        label: 'Wide'\n                      }].map(spacing => {\n                        var _languageCustomizatio6;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: `option-button ${((_languageCustomizatio6 = languageCustomizations[lang]) === null || _languageCustomizatio6 === void 0 ? void 0 : _languageCustomizatio6.letterSpacing) === spacing.value ? 'active' : ''}`,\n                          onClick: () => updateLanguageCustomization(lang, 'letterSpacing', spacing.value),\n                          children: spacing.label\n                        }, spacing.value, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1892,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1886,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1884,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"preview-text\",\n                    style: getCaptionStyle(lang),\n                    children: \"The quick brown fox jumps over the lazy dog.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1904,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"button-row\",\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"action-button secondary\",\n                      onClick: () => {\n                        setLanguageCustomizations(prev => ({\n                          ...prev,\n                          [lang]: {\n                            fontFamily: 'Arial / Helvetica',\n                            fontSize: 16,\n                            fontWeight: 400,\n                            textColor: darkMode ? '#FFFFFF' : '#000000',\n                            letterSpacing: 0\n                          }\n                        }));\n                      },\n                      children: \"Reset\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1913,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1912,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1775,\n                  columnNumber: 21\n                }, this)]\n              }, `customize-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1746,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1742,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Keyword Highlighting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1938,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"highlight-color-controls\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"highlight-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"highlight-label\",\n                  htmlFor: \"highlight-color\",\n                  children: \"Highlight Color\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1941,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"highlight-color\",\n                  value: highlightColor,\n                  onChange: e => setHighlightColor(e.target.value),\n                  className: \"settings-select highlight-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1948,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1949,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1950,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1951,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1952,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1942,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1940,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"keyword-controls\",\n                style: {\n                  marginTop: '1rem'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"process-keywords-button\",\n                  onClick: processEntireTranscriptForKeywords,\n                  disabled: isProcessingKeywords || !selectedLanguages.primary || !selectedLanguages.secondary,\n                  style: {\n                    padding: '8px 16px',\n                    borderRadius: '4px',\n                    backgroundColor: '#007bff',\n                    color: 'white',\n                    border: 'none',\n                    cursor: isProcessingKeywords ? 'not-allowed' : 'pointer',\n                    opacity: isProcessingKeywords ? 0.7 : 1\n                  },\n                  children: isProcessingKeywords ? 'Processing...' : 'Load Keywords'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1958,\n                  columnNumber: 21\n                }, this), isProcessingKeywords && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"progress-bar\",\n                  style: {\n                    marginTop: '0.5rem'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"progress-fill\",\n                    style: {\n                      width: `${keywordProcessingProgress}%`,\n                      height: '4px',\n                      backgroundColor: '#007bff',\n                      borderRadius: '2px',\n                      transition: 'width 0.3s ease'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1977,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      fontSize: '0.8rem',\n                      marginTop: '0.25rem'\n                    },\n                    children: [Math.round(keywordProcessingProgress), \"%\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1987,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1976,\n                  columnNumber: 23\n                }, this), keywordsEnabled && !isProcessingKeywords && /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"toggle-keywords-button\",\n                  onClick: () => setKeywordsEnabled(false),\n                  style: {\n                    padding: '8px 16px',\n                    borderRadius: '4px',\n                    backgroundColor: '#dc3545',\n                    color: 'white',\n                    border: 'none',\n                    cursor: 'pointer',\n                    marginTop: '0.5rem'\n                  },\n                  children: \"Disable Keywords\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1994,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1957,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1939,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1937,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1694,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1681,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1409,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1356,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gYrs+nAGDELsCd1PZe0PRo8f+YA=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledCaptionText\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","StyledCaptionText","text","customization","darkMode","getColor","fontStyles","fontFamily","getFontFamily","fontSize","getFontSize","fontWeight","getFontWeight","color","textColor","letterSpacing","getLetterSpacing","lineHeight","display","processText","input","segments","currentIndex","keywordRegex","match","exec","index","push","type","content","substring","length","style","children","map","segment","fileName","_jsxFileName","lineNumber","columnNumber","textDecoration","textDecorationColor","textDecorationThickness","textUnderlineOffset","_c","API_BASE_URL","LIBRE_TRANSLATE_API","translationCache","Map","sizeValue","sizeMap","weightValue","toString","weightMap","spacingValue","fontOption","fontMap","App","_s","youtubeLink","setYoutubeLink","videoId","setVideoId","captions","setCaptions","selectedLanguages","setSelectedLanguages","primary","secondary","availableLanguages","setAvailableLanguages","availableTranscripts","setAvailableTranscripts","status","setStatus","isLoading","setIsLoading","currentTime","setCurrentTime","activeCaptions","setActiveCaptions","collapsedLanguages","setCollapsedLanguages","hiddenLanguages","setHiddenLanguages","captionPlacement","setCaptionPlacement","overlayPosition","setOverlayPosition","x","y","isDragging","startX","startY","lastX","lastY","width","nounColor","setNounColor","verbColor","setVerbColor","adjectiveColor","setAdjectiveColor","languageCustomizations","setLanguageCustomizations","setDarkMode","settingsPanelCollapsed","setSettingsPanelCollapsed","captionsHeight","setCaptionsHeight","captionSpacing","setCaptionSpacing","overlayRef","videoContainerRef","videoResizeHandleRef","captionsResizeHandleRef","activeResizeRef","isResizing","setIsResizing","resizeDirection","setResizeDirection","resizeStartRef","highlightColor","setHighlightColor","highlightedCaptions","setHighlightedCaptions","isProcessingKeywords","setIsProcessingKeywords","keywordProcessingProgress","setKeywordProcessingProgress","keywordsEnabled","setKeywordsEnabled","extractVideoId","url","regExp","toggleSettingsPanel","toggleCaptionsHeight","getSelectedLanguagesArray","Object","values","filter","lang","initialCollapsedState","forEach","toggleLanguageCollapse","prev","id","window","matchMedia","matches","document","body","classList","add","mediaQuery","handleChange","e","remove","Iconify","script","createElement","src","async","appendChild","addEventListener","removeEventListener","iconifyScript","querySelector","head","contains","removeChild","addListener","removeListener","newLanguageCustomizations","hasChanges","updatedCustomizations","keys","_updatedCustomization","_updatedCustomization2","toggleLanguageVisibility","videoContainer","current","resizeHandle","handleMouseDown","preventDefault","clientX","startWidth","offsetWidth","handleMouseMove","moveEvent","deltaX","newWidth","Math","max","videoWrapper","paddingTop","handleMouseUp","captionsSection","clientY","startHeight","offsetHeight","height","maxHeight","handleLinkChange","target","value","handleSubmit","fetchAvailableLanguages","_uniqueTranscripts$fi","_uniqueTranscripts$","console","log","response","fetch","ok","errorText","error","Error","data","json","uniqueTranscripts","transcripts","transcript","self","findIndex","t","language_code","languageCodes","defaultPrimary","find","fetchCaptions","message","languages","fetchPromises","warn","processedTranscript","caption","end","start","duration","prevStatus","_prevStatus$match","loadedCount","Number","results","Promise","all","successfulLoads","result","applyPOSTagging","commonNouns","commonVerbs","commonAdjectives","words","split","taggedText","i","originalWord","word","toLowerCase","replace","includes","setLanguageRank","rank","updatedLanguages","key","updateLanguageCustomization","property","existingCustomization","updatedCustomization","colorMap","translateWord","sourceLang","targetLang","resolve","reject","cacheKey","has","get","method","JSON","stringify","q","source","format","headers","then","translation","translatedText","set","catch","identifyKeywords","primaryText","secondaryText","primaryLang","secondaryLang","text1","text2","stopWords","Set","primaryWords","w","test","translationResults","primaryWord","translatedWords","secondaryWords","translatedWord","secondaryWord","uniqueMatches","m","slice","primaryRegex","RegExp","secondaryRegex","processEntireTranscriptForKeywords","primaryTranscript","secondaryTranscript","totalCaptions","processedHighlights","primaryCaption","secondaryCaption","formatCaptionText","startTime","highlightedText","getCaptionStyle","isRTL","backgroundColor","direction","newActiveCaptions","activeCaption","player","YT","tag","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","createYouTubePlayer","destroy","Player","playerVars","enablejsapi","origin","location","widget_referrer","disablekb","fs","rel","modestbranding","iv_load_policy","hl","events","onPlayerReady","onPlayerStateChange","event","stopPropagation","PlayerState","PLAYING","updateTime","getCurrentTime","getPlayerState","requestAnimationFrame","findTranscriptByLanguageCode","code","getLanguageName","langCode","language","rect","getBoundingClientRect","overlayElement","initialX","left","initialY","top","currentX","currentY","deltaY","newX","min","newY","getSelection","removeAllRanges","handleTouchStart","touch","touches","handleTouchMove","passive","handleTouchEnd","toggleDarkMode","jumpToTime","time","seekTo","playVideo","handleResizeStart","overlay","containerWidth","handleResize","handleResizeEnd","deltaWidth","currentRight","className","checked","onChange","onSubmit","placeholder","disabled","role","ref","onClick","title","position","transform","cursor","transition","minWidth","flexDirection","alignItems","backdropFilter","borderRadius","padding","boxSizing","border","onMouseDown","onTouchStart","tabIndex","zIndex","right","pointerEvents","textAlign","whiteSpace","overflowWrap","wordWrap","maxWidth","userSelect","marginBottom","step","_captions$lang","floor","toFixed","padStart","onKeyDown","htmlFor","_languageCustomizatio","_languageCustomizatio2","font","label","size","_languageCustomizatio3","weight","_languageCustomizatio4","_languageCustomizatio5","spacing","_languageCustomizatio6","marginTop","opacity","round","_c2","$RefreshReg$"],"sources":["/Users/arunasrivastava/random/cse482/Multilingual/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// Update this component (around line 5-89 in your code)\nconst StyledCaptionText = ({ text, customization, darkMode, getColor }) => {\n  // Font styles from customization\n  const fontStyles = {\n    fontFamily: getFontFamily(customization.fontFamily),\n    fontSize: getFontSize(customization.fontSize),\n    fontWeight: getFontWeight(customization.fontWeight),\n    color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n    letterSpacing: getLetterSpacing(customization.letterSpacing),\n    lineHeight: '1.4',\n    display: 'inline-block'\n  };\n\n  // Process the text to identify highlighted keywords\n  const processText = (input) => {\n    if (!input) return [];\n    \n    const segments = [];\n    let currentIndex = 0;\n    \n    // Regular expression to find highlighted keywords\n    const keywordRegex = /<highlight>(.*?)<\\/highlight>/g;\n    let match;\n    \n    // Find all keyword matches\n    while ((match = keywordRegex.exec(input)) !== null) {\n      // If there's text before the match, add it as plain text\n      if (match.index > currentIndex) {\n        segments.push({\n          type: 'text',\n          content: input.substring(currentIndex, match.index)\n        });\n      }\n      \n      // Add the highlighted content\n      segments.push({\n        type: 'highlight',\n        content: match[1]\n      });\n      \n      // Update the current index\n      currentIndex = match.index + match[0].length;\n    }\n    \n    // Add any remaining text after the last match\n    if (currentIndex < input.length) {\n      segments.push({\n        type: 'text',\n        content: input.substring(currentIndex)\n      });\n    }\n    \n    return segments;\n  };\n  \n  // Parse text into segments\n  const segments = processText(text);\n  \n  // Main render function\n  return (\n    <span style={fontStyles}>\n      {segments.map((segment, index) => {\n        if (segment.type === 'text') {\n          return <span key={index}>{segment.content}</span>;\n        } else if (segment.type === 'highlight') {\n          return (\n            <span \n              key={index}\n              style={{\n                color: getColor('highlight'),\n                textDecoration: 'underline',\n                textDecorationColor: getColor('highlight'),\n                textDecorationThickness: '2px',\n                textUnderlineOffset: '2px'\n              }}\n            >\n              {segment.content}\n            </span>\n          );\n        }\n        return null;\n      })}\n    </span>\n  );\n};\n\n// API base URL - change this if your backend is running on a different port/host\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n\n// Add LibreTranslate API base URL\nconst LIBRE_TRANSLATE_API = 'https://libretranslate.de';\n\n// Add translation cache to avoid repeated API calls\nconst translationCache = new Map();\n\n// Get font size based on settings - now supports numeric values\nconst getFontSize = (sizeValue) => {\n  if (typeof sizeValue === 'number') {\n    return `${sizeValue}px`;\n  }\n  const sizeMap = {\n    'Small': '14px',\n    'Medium': '16px',\n    'Large': '20px',\n    'X-Large': '24px'\n  };\n  return sizeMap[sizeValue] || '16px';\n};\n\n// Get font weight based on settings - now supports numeric values\nconst getFontWeight = (weightValue) => {\n  if (typeof weightValue === 'number') {\n    return weightValue.toString();\n  }\n  const weightMap = {\n    'Light': '300',\n    'Regular': '400',\n    'Bold': '700'\n  };\n  return weightMap[weightValue] || '400';\n};\n\n// Get letter spacing based on settings - now supports numeric values\nconst getLetterSpacing = (spacingValue) => {\n  if (typeof spacingValue === 'number') {\n    return `${spacingValue}px`;\n  }\n  return spacingValue || 'normal';\n};\n\n// Get font family based on settings\nconst getFontFamily = (fontOption) => {\n  const fontMap = {\n    'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n    'Roboto': 'Roboto, Arial, sans-serif',\n    'Open Sans': 'Open Sans, Arial, sans-serif',\n    'Verdana': 'Verdana, Geneva, sans-serif'\n  };\n  \n  return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n};\n\nfunction App() {\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=zy2Zj8yIe6c');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n    // tertiary language removed\n  }); \n  \n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n  \n  // Add missing hiddenLanguages state\n  const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  \n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50, // percentage\n    y: 80, // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0,\n    lastX: 0,\n    lastY: 0,\n    width: 40 // percentage\n  });\n  \n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  \n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n  \n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n  \n  // New state for UI enhancements\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n  const [captionsHeight, setCaptionsHeight] = useState('normal');\n  \n  // New state for caption spacing\n  const [captionSpacing, setCaptionSpacing] = useState(10); // Default 10px spacing\n  \n  // Refs\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const videoResizeHandleRef = useRef(null);\n  const captionsResizeHandleRef = useRef(null);\n  const activeResizeRef = useRef(null);\n\n  // Add new state for resize handling\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeDirection, setResizeDirection] = useState(null);\n  const resizeStartRef = useRef(null);\n\n  // Replace POS color states with highlight color\n  const [highlightColor, setHighlightColor] = useState('Electric Blue');\n  \n  // Add new state for highlighted captions\n  const [highlightedCaptions, setHighlightedCaptions] = useState({});\n  const [isProcessingKeywords, setIsProcessingKeywords] = useState(false);\n  const [keywordProcessingProgress, setKeywordProcessingProgress] = useState(0);\n  const [keywordsEnabled, setKeywordsEnabled] = useState(false);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = (url) => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[7].length === 11) ? match[7] : null;\n  };\n\n  // Toggle settings panel collapse\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]); \n  \n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = (lang) => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n    \n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n    \n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e) => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n    \n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    \n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = { ...languageCustomizations };\n    let hasChanges = false;\n    \n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 16,\n          fontWeight: 400,\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 0\n        };\n        hasChanges = true;\n      }\n    });\n    \n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(newLanguageCustomizations);\n    }\n  }, [selectedLanguages]);\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = { ...languageCustomizations };\n    let hasChanges = false;\n    \n    Object.keys(updatedCustomizations).forEach(lang => {\n      if (updatedCustomizations[lang]?.textColor === '#000000' || updatedCustomizations[lang]?.textColor === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n        hasChanges = true;\n      }\n    });\n    \n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(updatedCustomizations);\n    }\n  }, [darkMode]);\n\n  // Add this function to toggle language visibility\n  const toggleLanguageVisibility = (lang) => {\n    setHiddenLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Set up video container resize functionality\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const videoContainer = videoContainerRef.current;\n    const resizeHandle = videoResizeHandleRef.current;\n    \n    if (!videoContainer || !resizeHandle) return;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Save initial position and dimensions\n      const startX = e.clientX;\n      const startWidth = videoContainer.offsetWidth;\n      \n      activeResizeRef.current = 'video';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'video') return;\n        \n        // Calculate new width based on mouse movement\n        const deltaX = moveEvent.clientX - startX;\n        const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n        \n        // Set width\n        videoContainer.style.width = `${newWidth}px`;\n        \n        // Update the video wrapper's padding-top to maintain aspect ratio\n        const videoWrapper = videoContainer.querySelector('.video-wrapper');\n        if (videoWrapper) {\n          // No need to explicitly set height - padding-top maintains ratio\n          videoWrapper.style.paddingTop = `${(9/16) * 100}%`; // Keep 16:9 ratio\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      if (resizeHandle) {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      }\n    };\n  }, [videoId]);\n\n  // Set up captions container resize functionality\n  useEffect(() => {\n    if (!captionsResizeHandleRef.current) return;\n    \n    const resizeHandle = captionsResizeHandleRef.current;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Find the active captions section\n      const captionsSection = document.querySelector('.active-captions-section');\n      if (!captionsSection) return;\n      \n      // Save initial position and dimensions\n      const startY = e.clientY;\n      const startHeight = captionsSection.offsetHeight;\n      \n      activeResizeRef.current = 'captions';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'captions') return;\n        \n        // Calculate new height\n        const height = startHeight + (moveEvent.clientY - startY);\n        \n        // Apply new height with min constraint\n        if (height > 100) {\n          captionsSection.style.height = `${height}px`;\n          captionsSection.style.maxHeight = `${height}px`;\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      resizeHandle.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [availableLanguages.length]);\n\n  // Handle YouTube link input\n  const handleLinkChange = (e) => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async (videoId) => {\n    try {\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Received data:', data);\n      \n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Filter out duplicate transcripts based on language_code\n      const uniqueTranscripts = data.transcripts.filter((transcript, index, self) =>\n        index === self.findIndex(t => t.language_code === transcript.language_code)\n      );\n      \n      // Store the filtered transcript information\n      setAvailableTranscripts(uniqueTranscripts);\n      \n      // Also keep the unique language codes for backward compatibility\n      const languageCodes = uniqueTranscripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} unique languages:`, languageCodes);\n      \n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = uniqueTranscripts.find(t => t.language_code === 'en')?.language_code \n        || (uniqueTranscripts[0]?.language_code || '');\n        \n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: ''\n      });\n      \n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n      \n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n      \n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      setStatus(`Loading transcripts (0/${languages.length})...`);\n      \n      const fetchPromises = languages.map(async (lang) => {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          \n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            return { lang, error: true };\n          }\n          \n          const data = await response.json();\n          \n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            return { lang, error: true };\n          }\n          \n          // Process the transcript data with keyword highlighting\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: caption.text,\n            end: caption.start + caption.duration\n          }));\n          \n          // Update captions immediately as each one loads\n          setCaptions(prev => ({\n            ...prev,\n            [lang]: processedTranscript\n          }));\n\n          setStatus(prevStatus => {\n            const loadedCount = (prevStatus.match(/\\d+/)?.[0] || 0);\n            return `Loading transcripts (${Number(loadedCount) + 1}/${languages.length})...`;\n          });\n          \n          return { lang, transcript: processedTranscript };\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n          return { lang, error: true };\n        }\n      });\n      \n      const results = await Promise.all(fetchPromises);\n      const successfulLoads = results.filter(result => !result.error).length;\n      setStatus(`Successfully loaded captions in ${successfulLoads} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = (text) => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n    \n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      \n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      \n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = { ...selectedLanguages };\n    \n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => {\n      // Get existing customization or create new one with defaults\n      const existingCustomization = prev[lang] || {\n        fontFamily: 'Arial / Helvetica',\n        fontSize: 16,\n        fontWeight: 400,\n        textColor: darkMode ? '#FFFFFF' : '#000000',\n        letterSpacing: 0\n      };\n\n      // Create new customization object with updated property\n      const updatedCustomization = {\n        ...existingCustomization,\n        [property]: value\n      };\n\n      // Return new state with updated customization\n      return {\n        ...prev,\n        [lang]: updatedCustomization\n      };\n    });\n  };\n\n  // Get color based on settings\n  const getColor = (type) => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    \n    if (type === 'highlight') {\n      return colorMap[highlightColor] || colorMap['Electric Blue'];\n    }\n    return darkMode ? '#FFFFFF' : '#000000';\n  };\n\n  // Function to get translation for a word\n  const translateWord = (word, sourceLang, targetLang) => {\n    return new Promise((resolve, reject) => {\n      console.log(`Attempting to translate: \"${word}\" from ${sourceLang} to ${targetLang}`);\n      \n      // Create a cache key\n      const cacheKey = `${word}|${sourceLang}|${targetLang}`;\n      \n      // Check cache first\n      if (translationCache.has(cacheKey)) {\n        console.log(`Found cached translation for: ${word}`);\n        resolve(translationCache.get(cacheKey));\n        return;\n      }\n      \n      console.log(`Making API request to LibreTranslate for: ${word}`);\n      fetch(`${LIBRE_TRANSLATE_API}/translate`, {\n        method: 'POST',\n        body: JSON.stringify({\n          q: word,\n          source: sourceLang,\n          target: targetLang,\n          format: \"text\"\n        }),\n        headers: { \n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      })\n      .then(response => {\n        console.log(`Received response status: ${response.status}`);\n        if (!response.ok) {\n          throw new Error(`Translation failed with status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log(`Translation result for \"${word}\":`, data);\n        if (data.error) {\n          throw new Error(`Translation API error: ${data.error}`);\n        }\n        const translation = data.translatedText;\n        translationCache.set(cacheKey, translation);\n        resolve(translation);\n      })\n      .catch(error => {\n        console.warn(`Translation failed for word \"${word}\":`, error);\n        // Instead of resolving with null, let's try a simpler approach\n        // Just resolve with the original word if translation fails\n        resolve(word);\n      });\n    });\n  };\n\n  // Function to identify keywords in a pair of captions\n  const identifyKeywords = (primaryText, secondaryText, primaryLang, secondaryLang) => {\n    return new Promise(async (resolve) => {\n      console.log(`Identifying keywords between:\\nPrimary (${primaryLang}): ${primaryText}\\nSecondary (${secondaryLang}): ${secondaryText}`);\n\n      if (!primaryText || !secondaryText || primaryText.length < 10 || secondaryText.length < 10) {\n        console.log(\"Texts too short, skipping keyword identification\");\n        resolve({ text1: primaryText, text2: secondaryText });\n        return;\n      }\n\n      // Common stop words and short words to filter out\n      const stopWords = new Set([\n        'the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'i',\n        'it', 'for', 'not', 'on', 'with', 'he', 'as', 'you', 'do', 'at',\n        'this', 'but', 'his', 'by', 'from', 'they', 'we', 'say', 'her', 'she',\n        'or', 'an', 'will', 'my', 'one', 'all', 'would', 'there', 'their',\n        'what', 'so', 'up', 'out', 'if', 'about', 'who', 'get', 'which',\n        'go', 'me', 'when', 'make', 'can', 'like', 'no', 'just', 'him',\n        'know', 'take', 'into', 'your', 'some', 'could', 'them', 'see',\n        'other', 'than', 'then', 'now', 'look', 'only', 'come', 'its',\n        'over', 'think', 'also', 'back', 'after', 'use', 'two', 'how',\n        'our', 'work', 'first', 'well', 'way', 'even', 'new', 'want',\n        'because', 'any', 'these', 'give', 'day', 'most', 'us', 'is', 'was',\n        'are', 'were', 'been', 'has', 'had', 'did', 'doing', 'does', 'done'\n      ]);\n\n      try {\n        // Split into words and clean them\n        const primaryWords = primaryText.toLowerCase().split(/\\s+/)\n          .map(w => w.replace(/[^\\w\\s]/g, ''))\n          .filter(w => w.length > 2 && !stopWords.has(w) && /^[a-z]+$/.test(w));\n\n        console.log(\"Filtered primary words:\", primaryWords);\n\n        // Process each meaningful primary word\n        const translationResults = await Promise.all(\n          primaryWords.map(async primaryWord => {\n            const translation = await translateWord(primaryWord, primaryLang, secondaryLang);\n            return { primaryWord, translation };\n          })\n        );\n\n        console.log(\"Translation results:\", translationResults);\n\n        let text1 = primaryText;\n        let text2 = secondaryText;\n        const matches = [];\n\n        // Find matches in secondary text\n        translationResults.forEach(({ primaryWord, translation }) => {\n          if (translation) {\n            const translatedWords = translation.toLowerCase().split(/\\s+/);\n            const secondaryWords = secondaryText.toLowerCase().split(/\\s+/);\n\n            translatedWords.forEach(translatedWord => {\n              secondaryWords.forEach((secondaryWord, index) => {\n                if (secondaryWord.includes(translatedWord) || translatedWord.includes(secondaryWord)) {\n                  matches.push({\n                    primary: primaryWord,\n                    secondary: secondaryWords[index]\n                  });\n                }\n              });\n            });\n          }\n        });\n\n        console.log(\"Found matches:\", matches);\n\n        // Take top 2 unique matches\n        const uniqueMatches = matches.filter((match, index, self) =>\n          index === self.findIndex(m => \n            m.primary === match.primary && m.secondary === match.secondary\n          )\n        ).slice(0, 2);\n\n        console.log(\"Selected unique matches:\", uniqueMatches);\n\n        // Apply highlights\n        uniqueMatches.forEach(match => {\n          const primaryRegex = new RegExp(`\\\\b${match.primary}\\\\b`, 'gi');\n          const secondaryRegex = new RegExp(`\\\\b${match.secondary}\\\\b`, 'gi');\n\n          text1 = text1.replace(primaryRegex, word => `<highlight>${word}</highlight>`);\n          text2 = text2.replace(secondaryRegex, word => `<highlight>${word}</highlight>`);\n        });\n\n        console.log(\"Final highlighted texts:\", { text1, text2 });\n        resolve({ text1, text2 });\n      } catch (error) {\n        console.error(\"Error in keyword identification:\", error);\n        resolve({ text1: primaryText, text2: secondaryText });\n      }\n    });\n  };\n\n  // Add useEffect to process captions when they change\n  useEffect(() => {\n    if (activeCaptions[selectedLanguages.primary] && activeCaptions[selectedLanguages.secondary]) {\n      identifyKeywords(\n        activeCaptions[selectedLanguages.primary].text,\n        activeCaptions[selectedLanguages.secondary].text,\n        selectedLanguages.primary,\n        selectedLanguages.secondary\n      ).then(({ text1, text2 }) => {\n        setHighlightedCaptions({\n          [selectedLanguages.primary]: text1,\n          [selectedLanguages.secondary]: text2\n        });\n      });\n    }\n  }, [activeCaptions, selectedLanguages.primary, selectedLanguages.secondary]);\n\n  // Function to process entire transcript for keywords\n  const processEntireTranscriptForKeywords = async () => {\n    console.log(\"Starting keyword processing...\");\n    console.log(\"Primary language:\", selectedLanguages.primary);\n    console.log(\"Secondary language:\", selectedLanguages.secondary);\n    console.log(\"Captions available:\", Object.keys(captions));\n\n    if (!selectedLanguages.primary || !selectedLanguages.secondary || !captions[selectedLanguages.primary] || !captions[selectedLanguages.secondary]) {\n      console.log(\"Missing required languages or captions\");\n      setStatus('Please select both primary and secondary languages first');\n      return;\n    }\n\n    setIsProcessingKeywords(true);\n    setKeywordProcessingProgress(0);\n    setKeywordsEnabled(true);\n\n    const primaryTranscript = captions[selectedLanguages.primary];\n    const secondaryTranscript = captions[selectedLanguages.secondary];\n    const totalCaptions = primaryTranscript.length;\n    console.log(\"Total captions to process:\", totalCaptions);\n    \n    const processedHighlights = {\n      [selectedLanguages.primary]: {},\n      [selectedLanguages.secondary]: {}\n    };\n\n    try {\n      for (let i = 0; i < totalCaptions; i++) {\n        const primaryCaption = primaryTranscript[i];\n        const secondaryCaption = secondaryTranscript[i];\n        console.log(`Processing caption pair ${i + 1}/${totalCaptions}`);\n        console.log(\"Primary text:\", primaryCaption.text);\n        console.log(\"Secondary text:\", secondaryCaption.text);\n\n        if (primaryCaption && secondaryCaption) {\n          const result = await identifyKeywords(\n            primaryCaption.text,\n            secondaryCaption.text,\n            selectedLanguages.primary,\n            selectedLanguages.secondary\n          );\n          console.log(\"Processed result:\", result);\n\n          processedHighlights[selectedLanguages.primary][primaryCaption.start] = result.text1;\n          processedHighlights[selectedLanguages.secondary][secondaryCaption.start] = result.text2;\n        }\n\n        setKeywordProcessingProgress(((i + 1) / totalCaptions) * 100);\n      }\n\n      console.log(\"Final processed highlights:\", processedHighlights);\n      setHighlightedCaptions(processedHighlights);\n      setIsProcessingKeywords(false);\n      setStatus('Keyword highlighting completed');\n    } catch (error) {\n      console.error(\"Error during keyword processing:\", error);\n      setStatus('Error during keyword processing');\n      setIsProcessingKeywords(false);\n    }\n  };\n\n  // Update formatCaptionText to use processed highlights\n  const formatCaptionText = (text, lang, startTime) => {\n    if (!text) return '';\n    \n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial / Helvetica',\n      fontSize: 16,\n      fontWeight: 400,\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 0\n    };\n\n    // Use the processed highlights if keywords are enabled\n    const highlightedText = keywordsEnabled && highlightedCaptions[lang] ? \n      highlightedCaptions[lang][startTime] || text : \n      text;\n\n    return (\n      <StyledCaptionText \n        text={highlightedText} \n        customization={customization} \n        darkMode={darkMode} \n        getColor={getColor} \n      />\n    );\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = (lang) => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    \n    return {\n      fontFamily: getFontFamily(customization.fontFamily || 'Arial / Helvetica'),\n      fontSize: getFontSize(customization.fontSize || 16),\n      fontWeight: getFontWeight(customization.fontWeight || 400),\n      color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: getLetterSpacing(customization.letterSpacing || 0),\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    \n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(\n          caption => currentTime >= caption.start && currentTime <= caption.end\n        );\n        \n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    \n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    \n    let player = null;\n    \n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      \n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    \n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      \n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        playerVars: {\n          enablejsapi: 1,\n          origin: window.location.origin,\n          widget_referrer: window.location.origin,\n          disablekb: 0,\n          fs: 1,\n          rel: 0,\n          modestbranding: 1,\n          // Disable ads to prevent CORS errors\n          iv_load_policy: 3,\n          hl: 'en',\n        },\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange,\n          'onError': (event) => {\n            console.log('YouTube player error:', event);\n            setStatus('Error loading video. Please check the URL and try again.');\n          }\n        }\n      });\n    }\n    \n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n      player = event.target;\n      \n      // Add error event listener to window to catch and suppress CORS errors\n      window.addEventListener('error', (e) => {\n        if (e.message.includes('googleads') || e.message.includes('doubleclick')) {\n          e.preventDefault();\n          e.stopPropagation();\n          return false;\n        }\n      }, true);\n    }\n    \n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (player && player.getCurrentTime) {\n            setCurrentTime(player.getCurrentTime());\n          }\n          if (player && player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    \n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n      // Remove error event listener\n      window.removeEventListener('error', () => {});\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = (code) => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = (langCode) => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return transcript?.language || langCode;\n  };\n  \n  // Start dragging the caption overlay\n  const handleMouseDown = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    const overlayElement = overlayRef.current;\n    if (!overlayElement) return;\n\n    // Calculate initial position relative to the container\n    const initialX = (e.clientX - rect.left) / rect.width * 100;\n    const initialY = (e.clientY - rect.top) / rect.height * 100;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    \n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n  \n  // Handle mouse move during dragging - Improved for smoother movement\n  const handleMouseMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate current position as percentage of container\n    const currentX = (e.clientX - rect.left) / rect.width * 100;\n    const currentY = (e.clientY - rect.top) / rect.height * 100;\n    \n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n    \n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n    \n    // Update position with smooth transition\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX,\n      y: newY\n    }));\n    \n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n  \n  // Stop dragging with smooth finish\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle touch start for mobile devices - improved for smoother touch interaction\n  const handleTouchStart = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate initial touch position relative to container\n    const initialX = (touch.clientX - rect.left) / rect.width * 100;\n    const initialY = (touch.clientY - rect.top) / rect.height * 100;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, { passive: false });\n    document.addEventListener('touchend', handleTouchEnd);\n    \n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n  \n  // Handle touch move for mobile devices - improved for smoother movement\n  const handleTouchMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate current position as percentage of container\n    const currentX = (touch.clientX - rect.left) / rect.width * 100;\n    const currentY = (touch.clientY - rect.top) / rect.height * 100;\n    \n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n    \n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n    \n    // Update position with smooth transition\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX,\n      y: newY\n    }));\n    \n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n  \n  // Handle touch end for mobile devices - with smooth finish\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n  \n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    \n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = (time) => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n\n  // Handle resize start\n  const handleResizeStart = (e, direction) => {\n    e.stopPropagation(); // Prevent drag event from firing\n    const videoContainer = videoContainerRef.current;\n    const overlay = overlayRef.current;\n    if (!videoContainer || !overlay) return;\n\n    setIsResizing(true);\n    setResizeDirection(direction);\n    \n    // Store initial values\n    resizeStartRef.current = {\n      x: e.clientX,\n      width: overlayPosition.width,\n      containerWidth: videoContainer.getBoundingClientRect().width,\n      direction: direction,\n      initialX: overlayPosition.x // Store initial X position\n    };\n\n    // Add event listeners to document to ensure smooth dragging\n    document.addEventListener('mousemove', handleResize);\n    document.addEventListener('mouseup', handleResizeEnd);\n    \n    // Prevent text selection and default behaviors\n    e.preventDefault();\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize\n  const handleResize = (e) => {\n    if (!isResizing || !resizeStartRef.current) return;\n\n    const { x: startX, width: startWidth, containerWidth, direction, initialX } = resizeStartRef.current;\n    const deltaX = e.clientX - startX;\n    \n    // Calculate width change as percentage\n    const deltaWidth = (deltaX / containerWidth) * 100;\n    \n    // Calculate new width based on resize direction\n    let newWidth;\n    if (direction === 'right') {\n      newWidth = Math.max(20, Math.min(90, startWidth + deltaWidth));\n    } else {\n      newWidth = Math.max(20, Math.min(90, startWidth - deltaWidth));\n    }\n    \n    // If resizing from left, adjust position to maintain right edge position\n    if (direction === 'left') {\n      const currentRight = initialX + (startWidth / 2);\n      const newX = currentRight - (newWidth / 2);\n      setOverlayPosition(prev => ({\n        ...prev,\n        x: Math.max(newWidth / 2, Math.min(100 - newWidth / 2, newX)),\n        width: newWidth\n      }));\n    } else {\n      // Update width only for right resize\n      setOverlayPosition(prev => ({\n        ...prev,\n        width: newWidth\n      }));\n    }\n\n    // Prevent text selection during resize\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize end\n  const handleResizeEnd = () => {\n    if (!isResizing) return;\n    \n    setIsResizing(false);\n    setResizeDirection(null);\n    resizeStartRef.current = null;\n    \n    // Remove event listeners\n    document.removeEventListener('mousemove', handleResize);\n    document.removeEventListener('mouseup', handleResizeEnd);\n  };\n\n  return (\n    <div className={`app-container ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <h1 className=\"app-title\">YouTube Multilingual Captions Extractor</h1>\n      \n      {/* Fancy Dark Mode Toggle */}\n      <div className=\"dark-mode-toggle\">\n        <label>\n          <input \n            className=\"toggle-checkbox\" \n            type=\"checkbox\" \n            checked={darkMode}\n            onChange={toggleDarkMode}\n          />\n          <div className=\"toggle-slot\">\n            <div className=\"sun-icon-wrapper\">\n              <div className=\"iconify sun-icon\" data-icon=\"feather-sun\" data-inline=\"false\"></div>\n            </div>\n            <div className=\"toggle-button\"></div>\n            <div className=\"moon-icon-wrapper\">\n              <div className=\"iconify moon-icon\" data-icon=\"feather-moon\" data-inline=\"false\"></div>\n            </div>\n          </div>\n        </label>\n      </div>\n      \n      {/* Input Box */}\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={youtubeLink}\n            onChange={handleLinkChange}\n            placeholder=\"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\"\n            className=\"input-field\"\n            aria-label=\"YouTube video URL\"\n          />\n          <button \n            type=\"submit\"\n            className=\"submit-button\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load Video'}\n          </button>\n        </div>\n      </form>\n      \n      {/* Status message */}\n      {status && (\n        <div className=\"status-message\" role=\"status\" aria-live=\"polite\">\n          {status}\n        </div>\n      )}\n      \n      {videoId && (\n        <div className=\"main-content\">\n          {/* Main Content Area (Video + Captions) */}\n          <div className=\"content-area\">\n            {/* Video Embed Box */}\n            <div className=\"video-container\" ref={videoContainerRef}>\n              <div className=\"video-header\">\n                <div className=\"placement-toggle\">\n                  <div className=\"placement-buttons\">\n                    <button \n                      className={`placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`}\n                      onClick={() => setCaptionPlacement('Below Video')}\n                    >\n                      Below\n                    </button>\n                    <button \n                      className={`placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`}\n                      onClick={() => setCaptionPlacement('Overlay')}\n                    >\n                      Overlay\n                    </button>\n                  </div>\n                </div>\n              </div>\n              <div className=\"video-wrapper\" style={{ paddingTop: '56.25%' }}> {/* 16:9 Aspect Ratio */}\n                {/* YouTube player */}\n                <div id=\"youtube-player\" className=\"video-frame\"></div>\n              </div>\n              \n              {/* Video resize handle */}\n              <div \n                ref={videoResizeHandleRef}\n                className=\"video-resize-handle\" \n                title=\"Drag to resize video\"\n              ></div>\n              \n              {/* Real-time captions overlay - with improved draggable functionality */}\n              {captionPlacement === 'Overlay' && (\n                <div \n                  className={`captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''} ${isResizing ? 'resizing' : ''}`}\n                  style={{\n                    position: 'absolute',\n                    left: `${overlayPosition.x}%`,\n                    top: `${overlayPosition.y}%`,\n                    transform: 'translate(-50%, -50%)',\n                    cursor: overlayPosition.isDragging ? 'grabbing' : 'grab',\n                    transition: overlayPosition.isDragging || isResizing ? 'none' : 'all 0.1s ease-out',\n                    width: `${overlayPosition.width}%`,\n                    minWidth: '200px',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    backgroundColor: darkMode ? 'rgba(0, 0, 0, 0.7)' : 'rgba(255, 255, 255, 0.7)',\n                    backdropFilter: 'blur(8px)',\n                    borderRadius: '8px',\n                    padding: '8px',\n                    boxSizing: 'border-box',\n                    border: '1px solid rgba(255, 255, 255, 0.1)'\n                  }}\n                  ref={overlayRef}\n                  onMouseDown={handleMouseDown}\n                  onTouchStart={handleTouchStart}\n                  tabIndex=\"0\"\n                  role=\"region\"\n                  aria-label=\"Movable captions overlay\"\n                >\n                  {/* Left resize handle */}\n                  <div\n                    className=\"resize-handle resize-handle-left\"\n                    style={{\n                      position: 'absolute',\n                      left: '-8px',\n                      top: 0,\n                      width: '16px',\n                      height: '100%',\n                      cursor: 'ew-resize',\n                      backgroundColor: isResizing && resizeDirection === 'left' ? \n                        'rgba(255, 255, 255, 0.2)' : 'transparent',\n                      borderRadius: '4px 0 0 4px',\n                      zIndex: 10\n                    }}\n                    onMouseDown={(e) => handleResizeStart(e, 'left')}\n                  />\n\n                  {/* Right resize handle */}\n                  <div\n                    className=\"resize-handle resize-handle-right\"\n                    style={{\n                      position: 'absolute',\n                      right: '-8px',\n                      top: 0,\n                      width: '16px',\n                      height: '100%',\n                      cursor: 'ew-resize',\n                      backgroundColor: isResizing && resizeDirection === 'right' ? \n                        'rgba(255, 255, 255, 0.2)' : 'transparent',\n                      borderRadius: '0 4px 4px 0',\n                      zIndex: 10\n                    }}\n                    onMouseDown={(e) => handleResizeStart(e, 'right')}\n                  />\n\n                  {/* Resize indicators - always visible */}\n                  <div\n                    style={{\n                      position: 'absolute',\n                      left: '-4px',\n                      top: '50%',\n                      transform: 'translateY(-50%)',\n                      width: '4px',\n                      height: '24px',\n                      backgroundColor: isResizing && resizeDirection === 'left' ? \n                        'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                      borderRadius: '2px',\n                      pointerEvents: 'none',\n                      transition: 'background-color 0.1s ease'\n                    }}\n                  />\n                  <div\n                    style={{\n                      position: 'absolute',\n                      right: '-4px',\n                      top: '50%',\n                      transform: 'translateY(-50%)',\n                      width: '4px',\n                      height: '24px',\n                      backgroundColor: isResizing && resizeDirection === 'right' ? \n                        'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                      borderRadius: '2px',\n                      pointerEvents: 'none',\n                      transition: 'background-color 0.1s ease'\n                    }}\n                  />\n                  \n                  <div className=\"overlay-drag-instructions\">\n                    Hold to move • Drag edges to resize\n                  </div>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    activeCaptions[lang] && (\n                      <div \n                        key={lang} \n                        className=\"overlay-caption\" \n                        style={{\n                          ...getCaptionStyle(lang),\n                          width: '100%',\n                          textAlign: 'center',\n                          padding: '4px 8px',\n                          whiteSpace: 'pre-wrap',\n                          overflowWrap: 'break-word',\n                          wordWrap: 'break-word',\n                          maxWidth: '100%',\n                          display: 'block',\n                          userSelect: 'none' // Prevent text selection while dragging\n                        }}\n                      >\n                        {formatCaptionText(activeCaptions[lang].text, lang, activeCaptions[lang].start)}\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Captions Display - for Below Video mode only - with reduced spacing */}\n            {captionPlacement === 'Below Video' && \n             availableLanguages.length > 0 && (\n              <div className=\"captions-container closer-to-video\">\n                \n                {/* Current active captions section - all languages together */}\n                <div className={`active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`}>\n                  <button\n                    className=\"toggle-caption-height\"\n                    onClick={toggleCaptionsHeight}\n                    title={captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions'}\n                  >\n                    {captionsHeight === 'normal' ? '↓' : '↑'}\n                  </button>\n                  \n                  {getSelectedLanguagesArray().map(lang => {\n                  // Skip hidden languages\n                  if (hiddenLanguages[lang]) return null;\n                  \n                  return (\n                    <div \n                      key={`active-${lang}`} \n                      className=\"caption-text-container\"\n                      style={{ marginBottom: `${captionSpacing}px` }}\n                    >\n                      <div className=\"caption-content-wrapper\">\n                        {activeCaptions[lang] ? (\n                          <div className=\"caption-text\">\n                            {formatCaptionText(activeCaptions[lang].text, lang, activeCaptions[lang].start)}\n                          </div>\n                        ) : (\n                          <span className=\"no-caption\">   ...</span>\n                        )}\n                        <span className={`language-tag-right ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`}>\n                          {getLanguageName(lang)}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n                </div>\n\n                {/* Caption spacing control */}\n                <div className=\"caption-spacing-control-below\">\n                  <input\n                    type=\"range\"\n                    id=\"caption-spacing-below\"\n                    min=\"-20\"\n                    max=\"40\"\n                    step=\"0.25\"\n                    value={captionSpacing}\n                    onChange={(e) => setCaptionSpacing(Number(e.target.value))}\n                    className=\"spacing-slider-below\"\n                    aria-label=\"Adjust caption spacing\"\n                  />\n                </div>\n                \n                {/* Caption resize handle */}\n                <div \n                  ref={captionsResizeHandleRef}\n                  className=\"resize-handle resize-handle-vertical\" \n                  title=\"Drag to resize captions height\"\n                ></div>\n                \n                {/* Transcripts section - all languages */}\n                <div className=\"transcripts-section\">\n                  <h3 className=\"section-subtitle\">Full Transcripts</h3>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    <div key={`transcript-${lang}`} className=\"language-section\">\n                      <h4 className=\"language-title\">\n                        {getLanguageName(lang)} \n                        {lang === selectedLanguages.primary ? ' (Primary)' : \n                         lang === selectedLanguages.secondary ? ' (Secondary)' : ''}\n                      </h4>\n                      \n                      {/* Full transcript with timestamps */}\n                      <div className=\"captions-content\">\n                        {captions[lang]?.map((caption, index) => (\n                          <div key={index} \n                            className={`caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`}\n                            onClick={() => jumpToTime(caption.start)}\n                            tabIndex=\"0\"\n                            role=\"button\"\n                            aria-label={`Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`}\n                            onKeyDown={(e) => {\n                              if (e.key === 'Enter' || e.key === ' ') {\n                                jumpToTime(caption.start);\n                              }\n                            }}\n                          >\n                            <div className=\"timestamp\">\n                              {Math.floor(caption.start / 60)}:{(caption.start % 60).toFixed(1).padStart(4, '0')} - \n                              {Math.floor(caption.end / 60)}:{(caption.end % 60).toFixed(1).padStart(4, '0')}\n                            </div>\n                            <div className=\"caption-text\">\n                              {formatCaptionText(caption.text, lang, caption.start)}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Settings Panel - Now with improved toggle */}\n          <div className={`settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`}>\n            <button \n              className=\"settings-toggle\" \n              onClick={toggleSettingsPanel}\n              title={settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\"}\n              aria-expanded={!settingsPanelCollapsed}\n              aria-controls=\"settings-content\"\n            >\n              <span className=\"settings-toggle-icon\">\n                {settingsPanelCollapsed ? '»' : '«'}\n              </span>\n            </button>\n            \n            <div id=\"settings-content\" style={{ display: settingsPanelCollapsed ? 'none' : 'block', width: '100%' }}>\n              <h2 className=\"section-title\">Customize Display</h2>\n              \n              {/* Language Selection */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Select Languages</h3>\n                \n                {/* Primary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"primary-language\">Primary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"primary-language\"\n                      value={selectedLanguages.primary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'primary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      {availableTranscripts.map((transcript, index) => (\n                        <option key={`primary-${transcript.language_code}-${index}`} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n                \n                {/* Secondary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"secondary-language\">Secondary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"secondary-language\"\n                      value={selectedLanguages.secondary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'secondary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      <option value=\"\" key=\"none\">None</option>\n                      {availableTranscripts.map((transcript, index) => (\n                        <option key={`secondary-${transcript.language_code}-${index}`} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Language-specific customization */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Language Customizations</h3>\n                \n                {getSelectedLanguagesArray().map(lang => (\n                  <div key={`customize-${lang}`} className={`language-customization-card ${collapsedLanguages[lang] ? 'collapsed' : ''}`}>\n                    <div \n                      className=\"language-card-header\"\n                      onClick={() => toggleLanguageCollapse(lang)}\n                    >\n                      <div className=\"language-header-content\">\n                        <span className=\"language-name\">{getLanguageName(lang)}</span>\n                        <button\n                          className={`visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`}\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            toggleLanguageVisibility(lang);\n                          }}\n                          title={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                          aria-label={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                        />\n                        {lang === selectedLanguages.primary && <span className=\"language-tag primary\">Primary</span>}\n                        {lang === selectedLanguages.secondary && <span className=\"language-tag secondary\">Secondary</span>}\n                      </div>\n                      <button \n                        className=\"collapse-toggle\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          toggleLanguageCollapse(lang);\n                        }}\n                        aria-label={collapsedLanguages[lang] ? \"Expand language settings\" : \"Collapse language settings\"}\n                      />\n                    </div>\n                    \n                    <div className=\"language-card-content\">\n                      {/* Visibility Toggle */}\n                      <button\n                        className={`visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`}\n                        onClick={() => toggleLanguageVisibility(lang)}\n                        title={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                        aria-label={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                      />\n\n                      {/* Font Selection */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Font</div>\n                        <select \n                          className=\"font-select\"\n                          value={languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica'}\n                          onChange={(e) => updateLanguageCustomization(lang, 'fontFamily', e.target.value)}\n                          style={{ fontFamily: getFontFamily(languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica') }}\n                        >\n                          {['Arial / Helvetica', 'Roboto', 'Open Sans', 'Verdana'].map(font => (\n                            <option \n                              key={font} \n                              value={font}\n                              style={{ fontFamily: getFontFamily(font) }}\n                            >\n                              {font}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n\n                      {/* Font Size */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Size</div>\n                        <div className=\"button-group\">\n                          {[\n                            { value: 14, label: 'Small' },\n                            { value: 18, label: 'Medium' },\n                            { value: 24, label: 'Large' }\n                          ].map(size => (\n                            <button\n                              key={size.value}\n                              className={`option-button ${(languageCustomizations[lang]?.fontSize === size.value) ? 'active' : ''}`}\n                              onClick={() => {\n                                const updatedCustomization = {\n                                  ...languageCustomizations[lang],\n                                  fontSize: size.value\n                                };\n                                setLanguageCustomizations(prev => ({\n                                  ...prev,\n                                  [lang]: updatedCustomization\n                                }));\n                              }}\n                            >\n                              {size.label}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Font Weight */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Font Weight</div>\n                        <div className=\"button-group\">\n                          {[\n                            { value: 300, label: 'Light' },\n                            { value: 400, label: 'Regular' },\n                            { value: 700, label: 'Bold' }\n                          ].map(weight => (\n                            <button\n                              key={weight.value}\n                              className={`option-button ${(languageCustomizations[lang]?.fontWeight === weight.value) ? 'active' : ''}`}\n                              onClick={() => {\n                                const updatedCustomization = {\n                                  ...languageCustomizations[lang],\n                                  fontWeight: weight.value\n                                };\n                                setLanguageCustomizations(prev => ({\n                                  ...prev,\n                                  [lang]: updatedCustomization\n                                }));\n                              }}\n                            >\n                              {weight.label}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Text Color */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Color</div>\n                        <div className=\"color-options\">\n                          {[\n                            '#000000', // Black - for light mode\n                            '#FFFFFF', // White - for dark mode\n                            '#0052CC', // Accessible blue\n                            '#2E7D32'  // Accessible green\n                          ].map(color => (\n                            <div\n                              key={color}\n                              className={`color-option ${languageCustomizations[lang]?.textColor === color ? 'active' : ''}`}\n                              style={{ backgroundColor: color }}\n                              onClick={() => updateLanguageCustomization(lang, 'textColor', color)}\n                            />\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Character Spacing */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Character Spacing</div>\n                        <div className=\"button-group\">\n                          {[\n                            { value: -1, label: 'Tight' },\n                            { value: 0, label: 'Normal' },\n                            { value: 2, label: 'Wide' }\n                          ].map(spacing => (\n                            <button\n                              key={spacing.value}\n                              className={`option-button ${languageCustomizations[lang]?.letterSpacing === spacing.value ? 'active' : ''}`}\n                              onClick={() => updateLanguageCustomization(lang, 'letterSpacing', spacing.value)}\n                            >\n                              {spacing.label}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Preview Text */}\n                      <div \n                        className=\"preview-text\"\n                        style={getCaptionStyle(lang)}\n                      >\n                        The quick brown fox jumps over the lazy dog.\n                      </div>\n\n                      {/* Action Buttons */}\n                      <div className=\"button-row\">\n                        <button \n                          className=\"action-button secondary\"\n                          onClick={() => {\n                            setLanguageCustomizations(prev => ({\n                              ...prev,\n                              [lang]: {\n                                fontFamily: 'Arial / Helvetica',\n                                fontSize: 16,\n                                fontWeight: 400,\n                                textColor: darkMode ? '#FFFFFF' : '#000000',\n                                letterSpacing: 0\n                              }\n                            }));\n                          }}\n                        >\n                          Reset\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              {/* Replace POS color customization with highlight color */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Keyword Highlighting</h3>\n                <div className=\"highlight-color-controls\">\n                  <div className=\"highlight-color-item\">\n                    <label className=\"highlight-label\" htmlFor=\"highlight-color\">Highlight Color</label>\n                    <select \n                      id=\"highlight-color\" \n                      value={highlightColor} \n                      onChange={(e) => setHighlightColor(e.target.value)} \n                      className=\"settings-select highlight-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n\n                  {/* Add keyword processing controls */}\n                  <div className=\"keyword-controls\" style={{ marginTop: '1rem' }}>\n                    <button\n                      className=\"process-keywords-button\"\n                      onClick={processEntireTranscriptForKeywords}\n                      disabled={isProcessingKeywords || !selectedLanguages.primary || !selectedLanguages.secondary}\n                      style={{\n                        padding: '8px 16px',\n                        borderRadius: '4px',\n                        backgroundColor: '#007bff',\n                        color: 'white',\n                        border: 'none',\n                        cursor: isProcessingKeywords ? 'not-allowed' : 'pointer',\n                        opacity: isProcessingKeywords ? 0.7 : 1\n                      }}\n                    >\n                      {isProcessingKeywords ? 'Processing...' : 'Load Keywords'}\n                    </button>\n\n                    {isProcessingKeywords && (\n                      <div className=\"progress-bar\" style={{ marginTop: '0.5rem' }}>\n                        <div \n                          className=\"progress-fill\"\n                          style={{\n                            width: `${keywordProcessingProgress}%`,\n                            height: '4px',\n                            backgroundColor: '#007bff',\n                            borderRadius: '2px',\n                            transition: 'width 0.3s ease'\n                          }}\n                        />\n                        <div style={{ fontSize: '0.8rem', marginTop: '0.25rem' }}>\n                          {Math.round(keywordProcessingProgress)}%\n                        </div>\n                      </div>\n                    )}\n\n                    {keywordsEnabled && !isProcessingKeywords && (\n                      <button\n                        className=\"toggle-keywords-button\"\n                        onClick={() => setKeywordsEnabled(false)}\n                        style={{\n                          padding: '8px 16px',\n                          borderRadius: '4px',\n                          backgroundColor: '#dc3545',\n                          color: 'white',\n                          border: 'none',\n                          cursor: 'pointer',\n                          marginTop: '0.5rem'\n                        }}\n                      >\n                        Disable Keywords\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}