{"ast":null,"code":"var _jsxFileName = \"/Users/arunasrivastava/random/cse482/Multilingual/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// Update this component (around line 5-89 in your code)\n// Fixed StyledCaptionText component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCaptionText = ({\n  text,\n  customization,\n  darkMode,\n  getColor\n}) => {\n  // Font styles from customization\n  const fontStyles = {\n    fontFamily: getFontFamily(customization.fontFamily),\n    fontSize: getFontSize(customization.fontSize),\n    fontWeight: getFontWeight(customization.fontWeight),\n    color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n    letterSpacing: getLetterSpacing(customization.letterSpacing)\n  };\n\n  // Process the text to identify tagged parts\n  const processText = input => {\n    if (!input) return [];\n    const segments = [];\n    let currentIndex = 0;\n\n    // Regular expression to find tags\n    const tagRegex = /<(noun|verb|adjective)>(.*?)<\\/\\1>/g;\n    let match;\n\n    // Find all tag matches\n    while ((match = tagRegex.exec(input)) !== null) {\n      // If there's text before the match, add it as plain text\n      if (match.index > currentIndex) {\n        segments.push({\n          type: 'text',\n          content: input.substring(currentIndex, match.index)\n        });\n      }\n\n      // Add the tagged content\n      segments.push({\n        type: match[1],\n        // noun, verb, or adjective\n        content: match[2] // the content inside the tags\n      });\n\n      // Update the current index\n      currentIndex = match.index + match[0].length;\n    }\n\n    // Add any remaining text after the last match\n    if (currentIndex < input.length) {\n      segments.push({\n        type: 'text',\n        content: input.substring(currentIndex)\n      });\n    }\n    return segments;\n  };\n\n  // Parse text into segments\n  const segments = processText(text);\n\n  // Main render function - completely pure React approach\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: fontStyles,\n    children: segments.map((segment, index) => {\n      if (segment.type === 'text') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 18\n        }, this);\n      }\n\n      // For tagged segments, merge the font styles with the color style\n      const tagStyle = {\n        ...fontStyles,\n        color: getColor(segment.type),\n        textDecoration: 'underline'\n      };\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        style: tagStyle,\n        children: segment.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n// API base URL - change this if your backend is running on a different port/host\n_c = StyledCaptionText;\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n// Get font size based on settings - now supports numeric values\nconst getFontSize = sizeValue => {\n  const sizeMap = {\n    'small': '14px',\n    'medium': '18px',\n    'large': '24px'\n  };\n  return sizeMap[sizeValue] || '18px';\n};\n\n// Get font weight based on settings - now supports numeric values\nconst getFontWeight = weightValue => {\n  const weightMap = {\n    'light': 300,\n    'regular': 400,\n    'bold': 700\n  };\n  return weightMap[weightValue] || 400;\n};\n\n// Get letter spacing based on settings - now supports numeric values\nconst getLetterSpacing = spacingValue => {\n  const spacingMap = {\n    'tight': '-0.5px',\n    'normal': '0px',\n    'wide': '1px'\n  };\n  return spacingMap[spacingValue] || '0px';\n};\n\n// Get font family based on settings\nconst getFontFamily = fontOption => {\n  const fontMap = {\n    'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n    'Roboto': 'Roboto, Arial, sans-serif',\n    'Open Sans': 'Open Sans, Arial, sans-serif',\n    'Noto Sans': 'Noto Sans, Arial, sans-serif',\n    'Verdana': 'Verdana, Geneva, sans-serif',\n    'Courier New': 'Courier New, monospace',\n    'Consolas': 'Consolas, monospace',\n    'Source Code Pro': 'Source Code Pro, monospace',\n    'Sans Serif': 'Arial, Helvetica, sans-serif',\n    'Serif': 'Georgia, Times, serif',\n    'Monospace': 'Courier New, monospace',\n    'Handwriting': 'Comic Sans MS, cursive'\n  };\n  return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n};\nfunction App() {\n  _s();\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=zy2Zj8yIe6c');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n    // tertiary language removed\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n\n  // Add missing hiddenLanguages state\n  const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n\n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50,\n    // percentage\n    y: 80,\n    // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0\n  });\n\n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n\n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n\n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n\n  // New state for UI enhancements\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n  const [captionsHeight, setCaptionsHeight] = useState('normal');\n\n  // Refs\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const videoResizeHandleRef = useRef(null);\n  const captionsResizeHandleRef = useRef(null);\n  const activeResizeRef = useRef(null);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = url => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[7].length === 11 ? match[7] : null;\n  };\n\n  // Toggle settings panel collapse\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]);\n\n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = lang => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n\n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n\n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n\n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = {\n      ...languageCustomizations\n    };\n\n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 'Large',\n          fontWeight: 'bold',\n          // FIX: Set color based on dark mode but preserve it in language customization\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 'normal'\n        };\n      }\n    });\n    setLanguageCustomizations(newLanguageCustomizations);\n  }, [selectedLanguages, darkMode, languageCustomizations]);\n\n  // Add this function to toggle language visibility\n  const toggleLanguageVisibility = lang => {\n    setHiddenLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = {\n      ...languageCustomizations\n    };\n    Object.keys(updatedCustomizations).forEach(lang => {\n      var _updatedCustomization, _updatedCustomization2;\n      if (((_updatedCustomization = updatedCustomizations[lang]) === null || _updatedCustomization === void 0 ? void 0 : _updatedCustomization.textColor) === '#000000' || ((_updatedCustomization2 = updatedCustomizations[lang]) === null || _updatedCustomization2 === void 0 ? void 0 : _updatedCustomization2.textColor) === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n      }\n    });\n    setLanguageCustomizations(updatedCustomizations);\n  }, [darkMode, languageCustomizations]);\n\n  // Set up video container resize functionality\n  useEffect(() => {\n    if (!videoId) return;\n    const videoContainer = videoContainerRef.current;\n    const resizeHandle = videoResizeHandleRef.current;\n    if (!videoContainer || !resizeHandle) return;\n    const handleMouseDown = e => {\n      e.preventDefault();\n\n      // Save initial position and dimensions\n      const startX = e.clientX;\n      const startWidth = videoContainer.offsetWidth;\n      activeResizeRef.current = 'video';\n      const handleMouseMove = moveEvent => {\n        if (activeResizeRef.current !== 'video') return;\n\n        // Calculate new width based on mouse movement\n        const deltaX = moveEvent.clientX - startX;\n        const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n\n        // Set width\n        videoContainer.style.width = `${newWidth}px`;\n\n        // Update the video wrapper's padding-top to maintain aspect ratio\n        const videoWrapper = videoContainer.querySelector('.video-wrapper');\n        if (videoWrapper) {\n          // No need to explicitly set height - padding-top maintains ratio\n          videoWrapper.style.paddingTop = `${9 / 16 * 100}%`; // Keep 16:9 ratio\n        }\n        moveEvent.preventDefault();\n      };\n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    return () => {\n      if (resizeHandle) {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      }\n    };\n  }, [videoId]);\n\n  // Set up captions container resize functionality\n  useEffect(() => {\n    if (!captionsResizeHandleRef.current) return;\n    const resizeHandle = captionsResizeHandleRef.current;\n    const handleMouseDown = e => {\n      e.preventDefault();\n\n      // Find the active captions section\n      const captionsSection = document.querySelector('.active-captions-section');\n      if (!captionsSection) return;\n\n      // Save initial position and dimensions\n      const startY = e.clientY;\n      const startHeight = captionsSection.offsetHeight;\n      activeResizeRef.current = 'captions';\n      const handleMouseMove = moveEvent => {\n        if (activeResizeRef.current !== 'captions') return;\n\n        // Calculate new height\n        const height = startHeight + (moveEvent.clientY - startY);\n\n        // Apply new height with min constraint\n        if (height > 100) {\n          captionsSection.style.height = `${height}px`;\n          captionsSection.style.maxHeight = `${height}px`;\n        }\n        moveEvent.preventDefault();\n      };\n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    return () => {\n      resizeHandle.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [availableLanguages.length]);\n\n  // Handle YouTube link input\n  const handleLinkChange = e => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async videoId => {\n    try {\n      var _data$transcripts$fin, _data$transcripts$;\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Received data:', data);\n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n\n      // Store the full transcript information\n      setAvailableTranscripts(data.transcripts);\n\n      // Also keep the language codes for backward compatibility\n      const languageCodes = data.transcripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n\n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = ((_data$transcripts$fin = data.transcripts.find(t => t.language_code === 'en')) === null || _data$transcripts$fin === void 0 ? void 0 : _data$transcripts$fin.language_code) || ((_data$transcripts$ = data.transcripts[0]) === null || _data$transcripts$ === void 0 ? void 0 : _data$transcripts$.language_code) || '';\n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: ''\n      });\n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n\n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n\n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          const data = await response.json();\n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n\n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = text => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n\n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = {\n      ...selectedLanguages\n    };\n\n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => ({\n      ...prev,\n      [lang]: {\n        ...prev[lang],\n        [property]: value\n      }\n    }));\n  };\n\n  // Get color based on settings\n  const getColor = type => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    switch (type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return darkMode ? '#FFFFFF' : '#000000';\n    }\n  };\n\n  // Format caption text using new StyledCaptionText component\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    const customization = languageCustomizations[lang] || {\n      fontFamily: getFontFamily('Arial / Helvetica'),\n      fontSize: getFontSize('Large'),\n      fontWeight: getFontWeight('bold'),\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 'normal'\n    };\n    return /*#__PURE__*/_jsxDEV(StyledCaptionText, {\n      text: text,\n      customization: customization,\n      darkMode: darkMode,\n      getColor: getColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = lang => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    return {\n      fontFamily: getFontFamily(customization.fontFamily || 'Arial / Helvetica'),\n      fontSize: getFontSize(customization.fontSize || 16),\n      fontWeight: getFontWeight(customization.fontWeight || 400),\n      color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: getLetterSpacing(customization.letterSpacing || 0),\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(caption => currentTime >= caption.start && currentTime <= caption.end);\n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n\n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n\n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = code => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = langCode => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return (transcript === null || transcript === void 0 ? void 0 : transcript.language) || langCode;\n  };\n\n  // Start dragging the caption overlay\n  const handleMouseDown = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n\n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n\n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n\n  // Handle mouse move during dragging - Completely redesigned for immediate, direct movement\n  const handleMouseMove = e => {\n    if (!overlayPosition.isDragging) return;\n\n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate direct position as percentage of container\n    // This immediately places the overlay where the mouse is instead of incremental movement\n    const newX = Math.max(0, Math.min(100, (e.clientX - rect.left) / rect.width * 100));\n    const newY = Math.max(0, Math.min(100, (e.clientY - rect.top) / rect.height * 100));\n\n    // Update position with direct placement for more intuitive movement\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n\n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n\n  // Stop dragging\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle touch start for mobile devices\n  const handleTouchStart = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n\n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', handleTouchEnd);\n\n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n\n  // Handle touch move for mobile devices\n  const handleTouchMove = e => {\n    if (!overlayPosition.isDragging) return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate touch movement delta\n    const deltaX = touch.clientX - overlayPosition.startX;\n    const deltaY = touch.clientY - overlayPosition.startY;\n\n    // Calculate new position in percentage\n    const newX = Math.max(0, Math.min(100, overlayPosition.x + deltaX / rect.width * 100));\n    const newY = Math.max(0, Math.min(100, overlayPosition.y + deltaY / rect.height * 100));\n\n    // Update position and starting points for next movement calculation\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n\n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n\n  // Handle touch end for mobile devices\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n\n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n\n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = time => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"YouTube Multilingual Captions Extractor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 938,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dark-mode-toggle\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"toggle-checkbox\",\n          type: \"checkbox\",\n          checked: darkMode,\n          onChange: toggleDarkMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 943,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-slot\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sun-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify sun-icon\",\n              \"data-icon\": \"feather-sun\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 951,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 950,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"toggle-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 953,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"moon-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify moon-icon\",\n              \"data-icon\": \"feather-moon\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 955,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 954,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 949,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 942,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 941,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: youtubeLink,\n          onChange: handleLinkChange,\n          placeholder: \"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\",\n          className: \"input-field\",\n          \"aria-label\": \"YouTube video URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 964,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'Load Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 972,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 963,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 962,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-message\",\n      role: \"status\",\n      \"aria-live\": \"polite\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 984,\n      columnNumber: 9\n    }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          ref: videoContainerRef,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"section-title\",\n              children: \"Video\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 996,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"placement-toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"placement-label\",\n                children: \"Captions:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 998,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`,\n                onClick: () => setCaptionPlacement('Below Video'),\n                children: \"Below\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 999,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`,\n                onClick: () => setCaptionPlacement('Overlay'),\n                children: \"Overlay\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1005,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 997,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 995,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-wrapper\",\n            style: {\n              paddingTop: '56.25%'\n            },\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"youtube-player\",\n              className: \"video-frame\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1015,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1013,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: videoResizeHandleRef,\n            className: \"video-resize-handle\",\n            title: \"Drag to resize video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1019,\n            columnNumber: 15\n          }, this), captionPlacement === 'Overlay' && /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: overlayRef,\n            className: `captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''}`,\n            style: {\n              position: 'absolute',\n              left: `${overlayPosition.x}%`,\n              top: `${overlayPosition.y}%`,\n              transform: 'translate(-50%, -50%)',\n              cursor: overlayPosition.isDragging ? 'grabbing' : 'grab'\n            },\n            onMouseDown: handleMouseDown,\n            onTouchStart: handleTouchStart,\n            tabIndex: \"0\",\n            role: \"region\",\n            \"aria-label\": \"Movable captions overlay\",\n            onKeyDown: e => {\n              // Arrow key navigation for accessibility\n              const step = 5; // 5% movement steps\n              if (e.key === 'ArrowLeft') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  x: Math.max(0, prev.x - step)\n                }));\n                e.preventDefault();\n              } else if (e.key === 'ArrowRight') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  x: Math.min(100, prev.x + step)\n                }));\n                e.preventDefault();\n              } else if (e.key === 'ArrowUp') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  y: Math.max(0, prev.y - step)\n                }));\n                e.preventDefault();\n              } else if (e.key === 'ArrowDown') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  y: Math.min(100, prev.y + step)\n                }));\n                e.preventDefault();\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-drag-instructions\",\n              children: \"Hold and drag to reposition\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1072,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => activeCaptions[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-caption\",\n              style: getCaptionStyle(lang),\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-language\",\n                children: [getLanguageName(lang), \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1079,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-text\",\n                children: formatCaptionText(activeCaptions[lang].text, lang)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1082,\n                columnNumber: 25\n              }, this)]\n            }, lang, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1078,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1027,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 994,\n          columnNumber: 13\n        }, this), captionPlacement === 'Below Video' && availableLanguages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"captions-container closer-to-video\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"toggle-caption-height\",\n              onClick: toggleCaptionsHeight,\n              title: captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions',\n              children: captionsHeight === 'normal' ? '↓' : '↑'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1099,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              // Skip hidden languages\n              if (hiddenLanguages[lang]) return null;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"caption-text-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `language-tag ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`,\n                  children: getLanguageName(lang)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1116,\n                  columnNumber: 23\n                }, this), activeCaptions[lang] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"caption-text\",\n                  children: formatCaptionText(activeCaptions[lang].text, lang)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1121,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"no-caption\",\n                  children: \"   ...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1125,\n                  columnNumber: 25\n                }, this)]\n              }, `active-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1112,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1098,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: captionsResizeHandleRef,\n            className: \"resize-handle resize-handle-vertical\",\n            title: \"Drag to resize captions height\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1133,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transcripts-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"section-subtitle\",\n              children: \"Full Transcripts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1141,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _captions$lang;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"language-title\",\n                  children: [getLanguageName(lang), lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1145,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"captions-content\",\n                  children: (_captions$lang = captions[lang]) === null || _captions$lang === void 0 ? void 0 : _captions$lang.map((caption, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`,\n                    onClick: () => jumpToTime(caption.start),\n                    tabIndex: \"0\",\n                    role: \"button\",\n                    \"aria-label\": `Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`,\n                    onKeyDown: e => {\n                      if (e.key === 'Enter' || e.key === ' ') {\n                        jumpToTime(caption.start);\n                      }\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"timestamp\",\n                      children: [Math.floor(caption.start / 60), \":\", (caption.start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(caption.end / 60), \":\", (caption.end % 60).toFixed(1).padStart(4, '0')]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1166,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"caption-text\",\n                      children: formatCaptionText(caption.text, lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1170,\n                      columnNumber: 29\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1154,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1152,\n                  columnNumber: 23\n                }, this)]\n              }, `transcript-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1144,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1140,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1095,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 992,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"settings-toggle\",\n          onClick: toggleSettingsPanel,\n          title: settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\",\n          \"aria-expanded\": !settingsPanelCollapsed,\n          \"aria-controls\": \"settings-content\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"settings-toggle-icon\",\n            children: settingsPanelCollapsed ? '»' : '«'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1192,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1185,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"settings-content\",\n          style: {\n            display: settingsPanelCollapsed ? 'none' : 'block',\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Customize Display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1198,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Select Languages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1202,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"primary-language\",\n                children: \"Primary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1206,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"primary-language\",\n                  value: selectedLanguages.primary,\n                  onChange: e => setLanguageRank(e.target.value, 'primary'),\n                  className: \"settings-select language-dropdown\",\n                  children: availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, transcript.language_code, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1215,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1208,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1207,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1205,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"secondary-language\",\n                children: \"Secondary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1225,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"secondary-language\",\n                  value: selectedLanguages.secondary,\n                  onChange: e => setLanguageRank(e.target.value, 'secondary'),\n                  className: \"settings-select language-dropdown\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1233,\n                    columnNumber: 23\n                  }, this), availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, transcript.language_code, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1235,\n                    columnNumber: 25\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1227,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1226,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1224,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1201,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Language Customizations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1246,\n              columnNumber: 17\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _languageCustomizatio, _languageCustomizatio2, _languageCustomizatio3, _languageCustomizatio4, _languageCustomizatio5, _languageCustomizatio6, _languageCustomizatio7, _languageCustomizatio8, _languageCustomizatio9, _languageCustomizatio10, _languageCustomizatio11, _languageCustomizatio12, _languageCustomizatio13, _languageCustomizatio14, _languageCustomizatio15, _languageCustomizatio16, _languageCustomizatio17;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-customization-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-header\",\n                  onClick: () => toggleLanguageCollapse(lang),\n                  style: {\n                    cursor: 'pointer'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"language-header-content\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-name\",\n                      children: getLanguageName(lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1255,\n                      columnNumber: 25\n                    }, this), lang === selectedLanguages.primary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag primary\",\n                      children: \"Primary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1256,\n                      columnNumber: 64\n                    }, this), lang === selectedLanguages.secondary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag secondary\",\n                      children: \"Secondary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1257,\n                      columnNumber: 66\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1254,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"collapse-icon\",\n                    children: collapsedLanguages[lang] ? '▶' : '▼'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1260,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1250,\n                  columnNumber: 21\n                }, this), !collapsedLanguages[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-content\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"settings-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      children: \"Visibility\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1269,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: `visibility-toggle ${hiddenLanguages[lang] ? 'hidden' : 'visible'}`,\n                      onClick: () => toggleLanguageVisibility(lang),\n                      children: hiddenLanguages[lang] ? 'Show language' : 'Hide language'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1270,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      htmlFor: `font-family-${lang}`,\n                      children: \"Font\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1276,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      id: `font-family-${lang}`,\n                      value: ((_languageCustomizatio = languageCustomizations[lang]) === null || _languageCustomizatio === void 0 ? void 0 : _languageCustomizatio.fontFamily) || 'Arial / Helvetica',\n                      onChange: e => updateLanguageCustomization(lang, 'fontFamily', e.target.value),\n                      className: \"settings-select\",\n                      children: [/*#__PURE__*/_jsxDEV(\"optgroup\", {\n                        label: \"Sans-serif\",\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Arial / Helvetica\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1284,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Roboto\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1285,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Open Sans\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1286,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Noto Sans\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1287,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Verdana\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1288,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1283,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n                        label: \"Monospace\",\n                        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Courier New\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1291,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Consolas\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1292,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                          children: \"Source Code Pro\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1293,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1290,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1277,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1268,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"settings-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      htmlFor: `font-size-${lang}`,\n                      children: \"Size\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1300,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"toggle-group\",\n                      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                        className: `toggle-button ${((_languageCustomizatio2 = languageCustomizations[lang]) === null || _languageCustomizatio2 === void 0 ? void 0 : _languageCustomizatio2.fontSize) === 'small' ? 'active' : ''}`,\n                        onClick: () => updateLanguageCustomization(lang, 'fontSize', 'small'),\n                        title: \"Small Text\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"toggle-icon\",\n                          children: \"Aa\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1307,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1302,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: `toggle-button ${!((_languageCustomizatio3 = languageCustomizations[lang]) !== null && _languageCustomizatio3 !== void 0 && _languageCustomizatio3.fontSize) || ((_languageCustomizatio4 = languageCustomizations[lang]) === null || _languageCustomizatio4 === void 0 ? void 0 : _languageCustomizatio4.fontSize) === 'medium' ? 'active' : ''}`,\n                        onClick: () => updateLanguageCustomization(lang, 'fontSize', 'medium'),\n                        title: \"Medium Text\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"toggle-icon\",\n                          children: \"Aa\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1314,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1309,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: `toggle-button ${((_languageCustomizatio5 = languageCustomizations[lang]) === null || _languageCustomizatio5 === void 0 ? void 0 : _languageCustomizatio5.fontSize) === 'large' ? 'active' : ''}`,\n                        onClick: () => updateLanguageCustomization(lang, 'fontSize', 'large'),\n                        title: \"Large Text\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"toggle-icon\",\n                          children: \"Aa\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1321,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1316,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1301,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1299,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"settings-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      htmlFor: `font-weight-${lang}`,\n                      children: \"Weight\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1328,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"toggle-group\",\n                      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                        className: `toggle-button ${((_languageCustomizatio6 = languageCustomizations[lang]) === null || _languageCustomizatio6 === void 0 ? void 0 : _languageCustomizatio6.fontWeight) === 'light' ? 'active' : ''}`,\n                        onClick: () => updateLanguageCustomization(lang, 'fontWeight', 'light'),\n                        title: \"Light Weight\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"toggle-icon light\",\n                          children: \"A\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1335,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1330,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: `toggle-button ${!((_languageCustomizatio7 = languageCustomizations[lang]) !== null && _languageCustomizatio7 !== void 0 && _languageCustomizatio7.fontWeight) || ((_languageCustomizatio8 = languageCustomizations[lang]) === null || _languageCustomizatio8 === void 0 ? void 0 : _languageCustomizatio8.fontWeight) === 'regular' ? 'active' : ''}`,\n                        onClick: () => updateLanguageCustomization(lang, 'fontWeight', 'regular'),\n                        title: \"Regular Weight\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"toggle-icon regular\",\n                          children: \"A\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1342,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1337,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: `toggle-button ${((_languageCustomizatio9 = languageCustomizations[lang]) === null || _languageCustomizatio9 === void 0 ? void 0 : _languageCustomizatio9.fontWeight) === 'bold' ? 'active' : ''}`,\n                        onClick: () => updateLanguageCustomization(lang, 'fontWeight', 'bold'),\n                        title: \"Bold Weight\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"toggle-icon bold\",\n                          children: \"A\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1349,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1344,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1329,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1327,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"settings-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      children: \"Color\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1356,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"color-options\",\n                      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                        className: `color-button ${((_languageCustomizatio10 = languageCustomizations[lang]) === null || _languageCustomizatio10 === void 0 ? void 0 : _languageCustomizatio10.textColor) === '#000000' ? 'active' : ''}`,\n                        onClick: () => updateLanguageCustomization(lang, 'textColor', '#000000'),\n                        style: {\n                          backgroundColor: '#000000'\n                        },\n                        title: \"Black\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1358,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: `color-button ${((_languageCustomizatio11 = languageCustomizations[lang]) === null || _languageCustomizatio11 === void 0 ? void 0 : _languageCustomizatio11.textColor) === '#1E1E1E' ? 'active' : ''}`,\n                        onClick: () => updateLanguageCustomization(lang, 'textColor', '#1E1E1E'),\n                        style: {\n                          backgroundColor: '#1E1E1E'\n                        },\n                        title: \"Dark Gray\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1364,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: `color-button ${((_languageCustomizatio12 = languageCustomizations[lang]) === null || _languageCustomizatio12 === void 0 ? void 0 : _languageCustomizatio12.textColor) === '#EAEAEA' ? 'active' : ''}`,\n                        onClick: () => updateLanguageCustomization(lang, 'textColor', '#EAEAEA'),\n                        style: {\n                          backgroundColor: '#EAEAEA'\n                        },\n                        title: \"Light Gray\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1370,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: `color-button ${((_languageCustomizatio13 = languageCustomizations[lang]) === null || _languageCustomizatio13 === void 0 ? void 0 : _languageCustomizatio13.textColor) === '#FFFFFF' ? 'active' : ''}`,\n                        onClick: () => updateLanguageCustomization(lang, 'textColor', '#FFFFFF'),\n                        style: {\n                          backgroundColor: '#FFFFFF'\n                        },\n                        title: \"White\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1376,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1357,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1355,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"settings-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"settings-label\",\n                      children: \"Character Spacing\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1387,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"toggle-group\",\n                      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                        className: `toggle-button ${((_languageCustomizatio14 = languageCustomizations[lang]) === null || _languageCustomizatio14 === void 0 ? void 0 : _languageCustomizatio14.letterSpacing) === 'tight' ? 'active' : ''}`,\n                        onClick: () => updateLanguageCustomization(lang, 'letterSpacing', 'tight'),\n                        title: \"Tight Spacing\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"toggle-icon spacing-tight\",\n                          children: \"AV\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1394,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1389,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: `toggle-button ${!((_languageCustomizatio15 = languageCustomizations[lang]) !== null && _languageCustomizatio15 !== void 0 && _languageCustomizatio15.letterSpacing) || ((_languageCustomizatio16 = languageCustomizations[lang]) === null || _languageCustomizatio16 === void 0 ? void 0 : _languageCustomizatio16.letterSpacing) === 'normal' ? 'active' : ''}`,\n                        onClick: () => updateLanguageCustomization(lang, 'letterSpacing', 'normal'),\n                        title: \"Normal Spacing\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"toggle-icon spacing-normal\",\n                          children: \"A V\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1401,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1396,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: `toggle-button ${((_languageCustomizatio17 = languageCustomizations[lang]) === null || _languageCustomizatio17 === void 0 ? void 0 : _languageCustomizatio17.letterSpacing) === 'wide' ? 'active' : ''}`,\n                        onClick: () => updateLanguageCustomization(lang, 'letterSpacing', 'wide'),\n                        title: \"Wide Spacing\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"toggle-icon spacing-wide\",\n                          children: \"A  V\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1408,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1403,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1388,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1386,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"reset-button\",\n                    onClick: () => {\n                      // Reset this language's customizations to new defaults with larger, bolder text\n                      setLanguageCustomizations(prev => ({\n                        ...prev,\n                        [lang]: {\n                          fontFamily: 'Arial / Helvetica',\n                          fontSize: 'Large',\n                          // Updated from Medium to Large\n                          fontWeight: 'bold',\n                          // New default\n                          textColor: darkMode ? '#FFFFFF' : '#000000',\n                          letterSpacing: 'normal'\n                        }\n                      }));\n                    },\n                    \"aria-label\": `Reset customization for ${getLanguageName(lang)}`,\n                    children: \"Reset\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1413,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1266,\n                  columnNumber: 21\n                }, this)]\n              }, `customize-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1249,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1245,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Part of Speech Highlighting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1440,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pos-color-controls\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"pos-label\",\n                  htmlFor: \"noun-color\",\n                  children: \"Nouns\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1443,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"noun-color\",\n                  value: nounColor,\n                  onChange: e => setNounColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1450,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1451,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1452,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1453,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1454,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1444,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1442,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"pos-label\",\n                  htmlFor: \"verb-color\",\n                  children: \"Verbs\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1459,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"verb-color\",\n                  value: verbColor,\n                  onChange: e => setVerbColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1466,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1467,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1468,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1469,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1470,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1460,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1458,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"pos-label\",\n                  htmlFor: \"adjective-color\",\n                  children: \"Adjectives\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1475,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"adjective-color\",\n                  value: adjectiveColor,\n                  onChange: e => setAdjectiveColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1482,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Cherry Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1483,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1484,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1485,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1486,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1476,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1474,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1441,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1439,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1197,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1184,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 990,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 937,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pBC2lR6OJiaHdGaR1wZBnWQ+Ntc=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledCaptionText\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","StyledCaptionText","text","customization","darkMode","getColor","fontStyles","fontFamily","getFontFamily","fontSize","getFontSize","fontWeight","getFontWeight","color","textColor","letterSpacing","getLetterSpacing","processText","input","segments","currentIndex","tagRegex","match","exec","index","push","type","content","substring","length","style","children","map","segment","fileName","_jsxFileName","lineNumber","columnNumber","tagStyle","textDecoration","_c","API_BASE_URL","sizeValue","sizeMap","weightValue","weightMap","spacingValue","spacingMap","fontOption","fontMap","App","_s","youtubeLink","setYoutubeLink","videoId","setVideoId","captions","setCaptions","selectedLanguages","setSelectedLanguages","primary","secondary","availableLanguages","setAvailableLanguages","availableTranscripts","setAvailableTranscripts","status","setStatus","isLoading","setIsLoading","currentTime","setCurrentTime","activeCaptions","setActiveCaptions","collapsedLanguages","setCollapsedLanguages","hiddenLanguages","setHiddenLanguages","captionPlacement","setCaptionPlacement","overlayPosition","setOverlayPosition","x","y","isDragging","startX","startY","nounColor","setNounColor","verbColor","setVerbColor","adjectiveColor","setAdjectiveColor","languageCustomizations","setLanguageCustomizations","setDarkMode","settingsPanelCollapsed","setSettingsPanelCollapsed","captionsHeight","setCaptionsHeight","overlayRef","videoContainerRef","videoResizeHandleRef","captionsResizeHandleRef","activeResizeRef","extractVideoId","url","regExp","toggleSettingsPanel","toggleCaptionsHeight","getSelectedLanguagesArray","Object","values","filter","lang","initialCollapsedState","forEach","toggleLanguageCollapse","prev","id","window","matchMedia","matches","document","body","classList","add","mediaQuery","handleChange","e","remove","Iconify","script","createElement","src","async","appendChild","addEventListener","removeEventListener","iconifyScript","querySelector","head","contains","removeChild","addListener","removeListener","newLanguageCustomizations","toggleLanguageVisibility","updatedCustomizations","keys","_updatedCustomization","_updatedCustomization2","videoContainer","current","resizeHandle","handleMouseDown","preventDefault","clientX","startWidth","offsetWidth","handleMouseMove","moveEvent","deltaX","newWidth","Math","max","width","videoWrapper","paddingTop","handleMouseUp","captionsSection","clientY","startHeight","offsetHeight","height","maxHeight","handleLinkChange","target","value","handleSubmit","fetchAvailableLanguages","_data$transcripts$fin","_data$transcripts$","console","log","response","fetch","ok","errorText","error","Error","data","json","transcripts","languageCodes","t","language_code","defaultPrimary","find","fetchCaptions","message","languages","captionsData","warn","processedTranscript","transcript","caption","applyPOSTagging","end","start","duration","commonNouns","commonVerbs","commonAdjectives","words","split","taggedText","i","originalWord","word","toLowerCase","replace","includes","setLanguageRank","rank","updatedLanguages","key","updateLanguageCustomization","property","colorMap","formatCaptionText","getCaptionStyle","isRTL","backgroundColor","direction","newActiveCaptions","activeCaption","interval","setInterval","YT","Player","player","getCurrentTime","clearInterval","tag","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","createYouTubePlayer","destroy","events","onPlayerReady","onPlayerStateChange","event","PlayerState","PLAYING","updateTime","getPlayerState","requestAnimationFrame","findTranscriptByLanguageCode","code","getLanguageName","langCode","language","rect","getBoundingClientRect","newX","min","left","newY","top","getSelection","removeAllRanges","handleTouchStart","touch","touches","handleTouchMove","passive","handleTouchEnd","deltaY","toggleDarkMode","jumpToTime","time","seekTo","playVideo","className","checked","onChange","onSubmit","placeholder","disabled","role","ref","onClick","title","position","transform","cursor","onMouseDown","onTouchStart","tabIndex","onKeyDown","step","_captions$lang","floor","toFixed","padStart","display","htmlFor","_languageCustomizatio","_languageCustomizatio2","_languageCustomizatio3","_languageCustomizatio4","_languageCustomizatio5","_languageCustomizatio6","_languageCustomizatio7","_languageCustomizatio8","_languageCustomizatio9","_languageCustomizatio10","_languageCustomizatio11","_languageCustomizatio12","_languageCustomizatio13","_languageCustomizatio14","_languageCustomizatio15","_languageCustomizatio16","_languageCustomizatio17","label","_c2","$RefreshReg$"],"sources":["/Users/arunasrivastava/random/cse482/Multilingual/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// Update this component (around line 5-89 in your code)\n// Fixed StyledCaptionText component\nconst StyledCaptionText = ({ text, customization, darkMode, getColor }) => {\n  // Font styles from customization\n  const fontStyles = {\n    fontFamily: getFontFamily(customization.fontFamily),\n    fontSize: getFontSize(customization.fontSize),\n    fontWeight: getFontWeight(customization.fontWeight),\n    color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n    letterSpacing: getLetterSpacing(customization.letterSpacing)\n  };\n\n  // Process the text to identify tagged parts\n  const processText = (input) => {\n    if (!input) return [];\n    \n    const segments = [];\n    let currentIndex = 0;\n    \n    // Regular expression to find tags\n    const tagRegex = /<(noun|verb|adjective)>(.*?)<\\/\\1>/g;\n    let match;\n    \n    // Find all tag matches\n    while ((match = tagRegex.exec(input)) !== null) {\n      // If there's text before the match, add it as plain text\n      if (match.index > currentIndex) {\n        segments.push({\n          type: 'text',\n          content: input.substring(currentIndex, match.index)\n        });\n      }\n      \n      // Add the tagged content\n      segments.push({\n        type: match[1], // noun, verb, or adjective\n        content: match[2] // the content inside the tags\n      });\n      \n      // Update the current index\n      currentIndex = match.index + match[0].length;\n    }\n    \n    // Add any remaining text after the last match\n    if (currentIndex < input.length) {\n      segments.push({\n        type: 'text',\n        content: input.substring(currentIndex)\n      });\n    }\n    \n    return segments;\n  };\n  \n  // Parse text into segments\n  const segments = processText(text);\n  \n  // Main render function - completely pure React approach\n  return (\n    <span style={fontStyles}>\n      {segments.map((segment, index) => {\n        if (segment.type === 'text') {\n          return <span key={index}>{segment.content}</span>;\n        }\n        \n        // For tagged segments, merge the font styles with the color style\n        const tagStyle = {\n          ...fontStyles,\n          color: getColor(segment.type),\n          textDecoration: 'underline'\n        };\n        \n        return (\n          <span \n            key={index}\n            style={tagStyle}\n          >\n            {segment.content}\n          </span>\n        );\n      })}\n    </span>\n  );\n};\n// API base URL - change this if your backend is running on a different port/host\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n // Get font size based on settings - now supports numeric values\nconst getFontSize = (sizeValue) => {\n  const sizeMap = {\n    'small': '14px',\n    'medium': '18px',\n    'large': '24px'\n  };\n  return sizeMap[sizeValue] || '18px';\n};\n\n// Get font weight based on settings - now supports numeric values\nconst getFontWeight = (weightValue) => {\n  const weightMap = {\n    'light': 300,\n    'regular': 400,\n    'bold': 700\n  };\n  return weightMap[weightValue] || 400;\n};\n\n// Get letter spacing based on settings - now supports numeric values\nconst getLetterSpacing = (spacingValue) => {\n  const spacingMap = {\n    'tight': '-0.5px',\n    'normal': '0px',\n    'wide': '1px'\n  };\n  return spacingMap[spacingValue] || '0px';\n};\n\n// Get font family based on settings\nconst getFontFamily = (fontOption) => {\n  const fontMap = {\n    'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n    'Roboto': 'Roboto, Arial, sans-serif',\n    'Open Sans': 'Open Sans, Arial, sans-serif',\n    'Noto Sans': 'Noto Sans, Arial, sans-serif',\n    'Verdana': 'Verdana, Geneva, sans-serif',\n    'Courier New': 'Courier New, monospace',\n    'Consolas': 'Consolas, monospace',\n    'Source Code Pro': 'Source Code Pro, monospace',\n    'Sans Serif': 'Arial, Helvetica, sans-serif',\n    'Serif': 'Georgia, Times, serif',\n    'Monospace': 'Courier New, monospace',\n    'Handwriting': 'Comic Sans MS, cursive'\n  };\n  \n  return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n};\n\nfunction App() {\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=zy2Zj8yIe6c');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n    // tertiary language removed\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n  \n  // Add missing hiddenLanguages state\n  const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  \n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50, // percentage\n    y: 80, // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0\n  });\n  \n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  \n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n  \n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n  \n  // New state for UI enhancements\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n  const [captionsHeight, setCaptionsHeight] = useState('normal');\n  \n  // Refs\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const videoResizeHandleRef = useRef(null);\n  const captionsResizeHandleRef = useRef(null);\n  const activeResizeRef = useRef(null);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = (url) => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[7].length === 11) ? match[7] : null;\n  };\n\n  // Toggle settings panel collapse\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]); \n  \n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = (lang) => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n    \n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n    \n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e) => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n    \n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    \n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = { ...languageCustomizations };\n    \n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 'Large', \n          fontWeight: 'bold', \n          // FIX: Set color based on dark mode but preserve it in language customization\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 'normal'\n        };\n      }\n    });\n    \n    setLanguageCustomizations(newLanguageCustomizations);\n  }, [selectedLanguages, darkMode, languageCustomizations]);\n\n  // Add this function to toggle language visibility\n  const toggleLanguageVisibility = (lang) => {\n    setHiddenLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = { ...languageCustomizations };\n    \n    Object.keys(updatedCustomizations).forEach(lang => {\n      if (updatedCustomizations[lang]?.textColor === '#000000' || updatedCustomizations[lang]?.textColor === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n      }\n    });\n    \n    setLanguageCustomizations(updatedCustomizations);\n  }, [darkMode, languageCustomizations]);\n\n  // Set up video container resize functionality\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const videoContainer = videoContainerRef.current;\n    const resizeHandle = videoResizeHandleRef.current;\n    \n    if (!videoContainer || !resizeHandle) return;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Save initial position and dimensions\n      const startX = e.clientX;\n      const startWidth = videoContainer.offsetWidth;\n      \n      activeResizeRef.current = 'video';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'video') return;\n        \n        // Calculate new width based on mouse movement\n        const deltaX = moveEvent.clientX - startX;\n        const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n        \n        // Set width\n        videoContainer.style.width = `${newWidth}px`;\n        \n        // Update the video wrapper's padding-top to maintain aspect ratio\n        const videoWrapper = videoContainer.querySelector('.video-wrapper');\n        if (videoWrapper) {\n          // No need to explicitly set height - padding-top maintains ratio\n          videoWrapper.style.paddingTop = `${(9/16) * 100}%`; // Keep 16:9 ratio\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      if (resizeHandle) {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      }\n    };\n  }, [videoId]);\n\n  // Set up captions container resize functionality\n  useEffect(() => {\n    if (!captionsResizeHandleRef.current) return;\n    \n    const resizeHandle = captionsResizeHandleRef.current;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Find the active captions section\n      const captionsSection = document.querySelector('.active-captions-section');\n      if (!captionsSection) return;\n      \n      // Save initial position and dimensions\n      const startY = e.clientY;\n      const startHeight = captionsSection.offsetHeight;\n      \n      activeResizeRef.current = 'captions';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'captions') return;\n        \n        // Calculate new height\n        const height = startHeight + (moveEvent.clientY - startY);\n        \n        // Apply new height with min constraint\n        if (height > 100) {\n          captionsSection.style.height = `${height}px`;\n          captionsSection.style.maxHeight = `${height}px`;\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      resizeHandle.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [availableLanguages.length]);\n\n  // Handle YouTube link input\n  const handleLinkChange = (e) => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async (videoId) => {\n    try {\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Received data:', data);\n      \n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Store the full transcript information\n      setAvailableTranscripts(data.transcripts);\n      \n      // Also keep the language codes for backward compatibility\n      const languageCodes = data.transcripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n      \n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = data.transcripts.find(t => t.language_code === 'en')?.language_code \n        || (data.transcripts[0]?.language_code || '');\n        \n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: ''\n      });\n      \n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n      \n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n      \n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n      \n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          \n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          \n          const data = await response.json();\n          \n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n          \n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          \n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      \n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = (text) => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n    \n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      \n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      \n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = { ...selectedLanguages };\n    \n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => ({\n      ...prev,\n      [lang]: {\n        ...prev[lang],\n        [property]: value\n      }\n    }));\n  };\n\n  // Get color based on settings\n  const getColor = (type) => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    \n    switch(type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return darkMode ? '#FFFFFF' : '#000000';\n    }\n  };\n\n\n\n  // Format caption text using new StyledCaptionText component\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    \n    const customization = languageCustomizations[lang] || {\n      fontFamily: getFontFamily('Arial / Helvetica'),\n      fontSize: getFontSize('Large'),\n      fontWeight: getFontWeight('bold'),\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 'normal'\n    };\n    \n    return (\n      <StyledCaptionText \n        text={text} \n        customization={customization} \n        darkMode={darkMode} \n        getColor={getColor} \n      />\n    );\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = (lang) => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    \n    return {\n      fontFamily: getFontFamily(customization.fontFamily || 'Arial / Helvetica'),\n      fontSize: getFontSize(customization.fontSize || 16),\n      fontWeight: getFontWeight(customization.fontWeight || 400),\n      color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: getLetterSpacing(customization.letterSpacing || 0),\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    \n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(\n          caption => currentTime >= caption.start && currentTime <= caption.end\n        );\n        \n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    \n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n    \n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    \n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      \n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    \n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      \n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    \n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    \n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    \n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = (code) => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = (langCode) => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return transcript?.language || langCode;\n  };\n  \n  // Start dragging the caption overlay\n  const handleMouseDown = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n    \n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    \n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n  \n  // Handle mouse move during dragging - Completely redesigned for immediate, direct movement\n  const handleMouseMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate direct position as percentage of container\n    // This immediately places the overlay where the mouse is instead of incremental movement\n    const newX = Math.max(0, Math.min(100, ((e.clientX - rect.left) / rect.width) * 100));\n    const newY = Math.max(0, Math.min(100, ((e.clientY - rect.top) / rect.height) * 100));\n    \n    // Update position with direct placement for more intuitive movement\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX, \n      y: newY,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n    \n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n  \n  // Stop dragging\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({ ...prev, isDragging: false }));\n    \n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n  \n  // Handle touch start for mobile devices\n  const handleTouchStart = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n    \n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, { passive: false });\n    document.addEventListener('touchend', handleTouchEnd);\n    \n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n  \n  // Handle touch move for mobile devices\n  const handleTouchMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate touch movement delta\n    const deltaX = touch.clientX - overlayPosition.startX;\n    const deltaY = touch.clientY - overlayPosition.startY;\n    \n    // Calculate new position in percentage\n    const newX = Math.max(0, Math.min(100, overlayPosition.x + (deltaX / rect.width) * 100));\n    const newY = Math.max(0, Math.min(100, overlayPosition.y + (deltaY / rect.height) * 100));\n    \n    // Update position and starting points for next movement calculation\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX, \n      y: newY,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n    \n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n  \n  // Handle touch end for mobile devices\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({ ...prev, isDragging: false }));\n    \n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n  \n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    \n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = (time) => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n\n  return (\n    <div className={`app-container ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <h1 className=\"app-title\">YouTube Multilingual Captions Extractor</h1>\n      \n      {/* Fancy Dark Mode Toggle */}\n      <div className=\"dark-mode-toggle\">\n        <label>\n          <input \n            className=\"toggle-checkbox\" \n            type=\"checkbox\" \n            checked={darkMode}\n            onChange={toggleDarkMode}\n          />\n          <div className=\"toggle-slot\">\n            <div className=\"sun-icon-wrapper\">\n              <div className=\"iconify sun-icon\" data-icon=\"feather-sun\" data-inline=\"false\"></div>\n            </div>\n            <div className=\"toggle-button\"></div>\n            <div className=\"moon-icon-wrapper\">\n              <div className=\"iconify moon-icon\" data-icon=\"feather-moon\" data-inline=\"false\"></div>\n            </div>\n          </div>\n        </label>\n      </div>\n      \n      {/* Input Box */}\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={youtubeLink}\n            onChange={handleLinkChange}\n            placeholder=\"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\"\n            className=\"input-field\"\n            aria-label=\"YouTube video URL\"\n          />\n          <button \n            type=\"submit\"\n            className=\"submit-button\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load Video'}\n          </button>\n        </div>\n      </form>\n      \n      {/* Status message */}\n      {status && (\n        <div className=\"status-message\" role=\"status\" aria-live=\"polite\">\n          {status}\n        </div>\n      )}\n      \n      {videoId && (\n        <div className=\"main-content\">\n          {/* Main Content Area (Video + Captions) */}\n          <div className=\"content-area\">\n            {/* Video Embed Box */}\n            <div className=\"video-container\" ref={videoContainerRef}>\n              <div className=\"video-header\">\n                <h2 className=\"section-title\">Video</h2>\n                <div className=\"placement-toggle\">\n                  <label className=\"placement-label\">Captions:</label>\n                  <button \n                    className={`placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`}\n                    onClick={() => setCaptionPlacement('Below Video')}\n                  >\n                    Below\n                  </button>\n                  <button \n                    className={`placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`}\n                    onClick={() => setCaptionPlacement('Overlay')}\n                  >\n                    Overlay\n                  </button>\n                </div>\n              </div>\n              <div className=\"video-wrapper\" style={{ paddingTop: '56.25%' }}> {/* 16:9 Aspect Ratio */}\n                {/* YouTube player */}\n                <div id=\"youtube-player\" className=\"video-frame\"></div>\n              </div>\n              \n              {/* Video resize handle */}\n              <div \n                ref={videoResizeHandleRef}\n                className=\"video-resize-handle\" \n                title=\"Drag to resize video\"\n              ></div>\n              \n              {/* Real-time captions overlay - with improved draggable functionality */}\n              {captionPlacement === 'Overlay' && (\n                <div \n                  ref={overlayRef}\n                  className={`captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''}`}\n                  style={{\n                    position: 'absolute',\n                    left: `${overlayPosition.x}%`,\n                    top: `${overlayPosition.y}%`,\n                    transform: 'translate(-50%, -50%)',\n                    cursor: overlayPosition.isDragging ? 'grabbing' : 'grab'\n                  }}\n                  onMouseDown={handleMouseDown}\n                  onTouchStart={handleTouchStart}\n                  tabIndex=\"0\"\n                  role=\"region\"\n                  aria-label=\"Movable captions overlay\"\n                  onKeyDown={(e) => {\n                    // Arrow key navigation for accessibility\n                    const step = 5; // 5% movement steps\n                    if (e.key === 'ArrowLeft') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        x: Math.max(0, prev.x - step)\n                      }));\n                      e.preventDefault();\n                    } else if (e.key === 'ArrowRight') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        x: Math.min(100, prev.x + step)\n                      }));\n                      e.preventDefault();\n                    } else if (e.key === 'ArrowUp') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        y: Math.max(0, prev.y - step)\n                      }));\n                      e.preventDefault();\n                    } else if (e.key === 'ArrowDown') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        y: Math.min(100, prev.y + step)\n                      }));\n                      e.preventDefault();\n                    }\n                  }}\n                >\n                  <div className=\"overlay-drag-instructions\">\n                    Hold and drag to reposition\n                  </div>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    activeCaptions[lang] && (\n                      <div key={lang} className=\"overlay-caption\" style={getCaptionStyle(lang)}>\n                        <span className=\"overlay-language\">\n                          {getLanguageName(lang)}:\n                        </span>\n                        <span className=\"overlay-text\">\n                          {formatCaptionText(activeCaptions[lang].text, lang)}\n                        </span>\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Captions Display - for Below Video mode only - with reduced spacing */}\n            {captionPlacement === 'Below Video' && \n             availableLanguages.length > 0 && (\n              <div className=\"captions-container closer-to-video\">\n                \n                {/* Current active captions section - all languages together */}\n                <div className={`active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`}>\n                  <button\n                    className=\"toggle-caption-height\"\n                    onClick={toggleCaptionsHeight}\n                    title={captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions'}\n                  >\n                    {captionsHeight === 'normal' ? '↓' : '↑'}\n                  </button>\n                  \n                  {getSelectedLanguagesArray().map(lang => {\n                  // Skip hidden languages\n                  if (hiddenLanguages[lang]) return null;\n                  \n                  return (\n                    <div \n                      key={`active-${lang}`} \n                      className=\"caption-text-container\"\n                    >\n                      <span className={`language-tag ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`}>\n                        {getLanguageName(lang)}\n                      </span>\n                      \n                      {activeCaptions[lang] ? (\n                        <div className=\"caption-text\">\n                          {formatCaptionText(activeCaptions[lang].text, lang)}\n                        </div>\n                      ) : (\n                        <span className=\"no-caption\">   ...</span>\n                      )}\n                    </div>\n                  );\n                })}\n                </div>\n                \n                {/* Caption resize handle */}\n                <div \n                  ref={captionsResizeHandleRef}\n                  className=\"resize-handle resize-handle-vertical\" \n                  title=\"Drag to resize captions height\"\n                ></div>\n                \n                {/* Transcripts section - all languages */}\n                <div className=\"transcripts-section\">\n                  <h3 className=\"section-subtitle\">Full Transcripts</h3>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    <div key={`transcript-${lang}`} className=\"language-section\">\n                      <h4 className=\"language-title\">\n                        {getLanguageName(lang)} \n                        {lang === selectedLanguages.primary ? ' (Primary)' : \n                         lang === selectedLanguages.secondary ? ' (Secondary)' : ''}\n                      </h4>\n                      \n                      {/* Full transcript with timestamps */}\n                      <div className=\"captions-content\">\n                        {captions[lang]?.map((caption, index) => (\n                          <div key={index} \n                            className={`caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`}\n                            onClick={() => jumpToTime(caption.start)}\n                            tabIndex=\"0\"\n                            role=\"button\"\n                            aria-label={`Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`}\n                            onKeyDown={(e) => {\n                              if (e.key === 'Enter' || e.key === ' ') {\n                                jumpToTime(caption.start);\n                              }\n                            }}\n                          >\n                            <div className=\"timestamp\">\n                              {Math.floor(caption.start / 60)}:{(caption.start % 60).toFixed(1).padStart(4, '0')} - \n                              {Math.floor(caption.end / 60)}:{(caption.end % 60).toFixed(1).padStart(4, '0')}\n                            </div>\n                            <div className=\"caption-text\">\n                              {formatCaptionText(caption.text, lang)}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Settings Panel - Now with improved toggle */}\n          <div className={`settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`}>\n            <button \n              className=\"settings-toggle\" \n              onClick={toggleSettingsPanel}\n              title={settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\"}\n              aria-expanded={!settingsPanelCollapsed}\n              aria-controls=\"settings-content\"\n            >\n              <span className=\"settings-toggle-icon\">\n                {settingsPanelCollapsed ? '»' : '«'}\n              </span>\n            </button>\n            \n            <div id=\"settings-content\" style={{ display: settingsPanelCollapsed ? 'none' : 'block', width: '100%' }}>\n              <h2 className=\"section-title\">Customize Display</h2>\n              \n              {/* Language Selection */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Select Languages</h3>\n                \n                {/* Primary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"primary-language\">Primary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"primary-language\"\n                      value={selectedLanguages.primary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'primary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      {availableTranscripts.map(transcript => (\n                        <option key={transcript.language_code} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n                \n                {/* Secondary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"secondary-language\">Secondary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"secondary-language\"\n                      value={selectedLanguages.secondary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'secondary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      <option value=\"\">None</option>\n                      {availableTranscripts.map(transcript => (\n                        <option key={transcript.language_code} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Language-specific customization */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Language Customizations</h3>\n                \n                {getSelectedLanguagesArray().map(lang => (\n                  <div key={`customize-${lang}`} className=\"language-customization-card\">\n                    <div className=\"language-card-header\"\n                      onClick={() => toggleLanguageCollapse(lang)}\n                      style={{ cursor: 'pointer' }}\n                    >\n                      <div className=\"language-header-content\">\n                        <span className=\"language-name\">{getLanguageName(lang)}</span>\n                        {lang === selectedLanguages.primary && <span className=\"language-tag primary\">Primary</span>}\n                        {lang === selectedLanguages.secondary && <span className=\"language-tag secondary\">Secondary</span>}\n                      </div>\n                      {/* Collapse/Expand icon */}\n                      <span className=\"collapse-icon\">\n                        {collapsedLanguages[lang] ? '▶' : '▼'}\n                      </span>\n                    </div>\n\n                    {!collapsedLanguages[lang] && (   \n                    <div className=\"language-card-content\">\n                      {/* Font Type */}\n                      <div className=\"settings-item\">\n                        <label className=\"settings-label\">Visibility</label>\n                        <button \n                          className={`visibility-toggle ${hiddenLanguages[lang] ? 'hidden' : 'visible'}`}\n                          onClick={() => toggleLanguageVisibility(lang)}\n                        >\n                          {hiddenLanguages[lang] ? 'Show language' : 'Hide language'}\n                        </button>\n                        <label className=\"settings-label\" htmlFor={`font-family-${lang}`}>Font</label>\n                        <select \n                          id={`font-family-${lang}`}\n                          value={languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica'} \n                          onChange={(e) => updateLanguageCustomization(lang, 'fontFamily', e.target.value)}\n                          className=\"settings-select\"\n                        >\n                          <optgroup label=\"Sans-serif\">\n                            <option>Arial / Helvetica</option>\n                            <option>Roboto</option>\n                            <option>Open Sans</option>\n                            <option>Noto Sans</option>\n                            <option>Verdana</option>\n                          </optgroup>\n                          <optgroup label=\"Monospace\">\n                            <option>Courier New</option>\n                            <option>Consolas</option>\n                            <option>Source Code Pro</option>\n                          </optgroup>\n                        </select>\n                      </div>\n\n                      {/* Font Size - 3 level toggle */}\n                      <div className=\"settings-item\">\n                        <label className=\"settings-label\" htmlFor={`font-size-${lang}`}>Size</label>\n                        <div className=\"toggle-group\">\n                          <button\n                            className={`toggle-button ${languageCustomizations[lang]?.fontSize === 'small' ? 'active' : ''}`}\n                            onClick={() => updateLanguageCustomization(lang, 'fontSize', 'small')}\n                            title=\"Small Text\"\n                          >\n                            <span className=\"toggle-icon\">Aa</span>\n                          </button>\n                          <button\n                            className={`toggle-button ${(!languageCustomizations[lang]?.fontSize || languageCustomizations[lang]?.fontSize === 'medium') ? 'active' : ''}`}\n                            onClick={() => updateLanguageCustomization(lang, 'fontSize', 'medium')}\n                            title=\"Medium Text\"\n                          >\n                            <span className=\"toggle-icon\">Aa</span>\n                          </button>\n                          <button\n                            className={`toggle-button ${languageCustomizations[lang]?.fontSize === 'large' ? 'active' : ''}`}\n                            onClick={() => updateLanguageCustomization(lang, 'fontSize', 'large')}\n                            title=\"Large Text\"\n                          >\n                            <span className=\"toggle-icon\">Aa</span>\n                          </button>\n                        </div>\n                      </div>\n                      \n                      {/* Font Weight - 3 level toggle */}\n                      <div className=\"settings-item\">\n                        <label className=\"settings-label\" htmlFor={`font-weight-${lang}`}>Weight</label>\n                        <div className=\"toggle-group\">\n                          <button\n                            className={`toggle-button ${languageCustomizations[lang]?.fontWeight === 'light' ? 'active' : ''}`}\n                            onClick={() => updateLanguageCustomization(lang, 'fontWeight', 'light')}\n                            title=\"Light Weight\"\n                          >\n                            <span className=\"toggle-icon light\">A</span>\n                          </button>\n                          <button\n                            className={`toggle-button ${(!languageCustomizations[lang]?.fontWeight || languageCustomizations[lang]?.fontWeight === 'regular') ? 'active' : ''}`}\n                            onClick={() => updateLanguageCustomization(lang, 'fontWeight', 'regular')}\n                            title=\"Regular Weight\"\n                          >\n                            <span className=\"toggle-icon regular\">A</span>\n                          </button>\n                          <button\n                            className={`toggle-button ${languageCustomizations[lang]?.fontWeight === 'bold' ? 'active' : ''}`}\n                            onClick={() => updateLanguageCustomization(lang, 'fontWeight', 'bold')}\n                            title=\"Bold Weight\"\n                          >\n                            <span className=\"toggle-icon bold\">A</span>\n                          </button>\n                        </div>\n                      </div>\n                      \n                      {/* Text Color - circle buttons */}\n                      <div className=\"settings-item\">\n                        <label className=\"settings-label\">Color</label>\n                        <div className=\"color-options\">\n                          <button\n                            className={`color-button ${languageCustomizations[lang]?.textColor === '#000000' ? 'active' : ''}`}\n                            onClick={() => updateLanguageCustomization(lang, 'textColor', '#000000')}\n                            style={{ backgroundColor: '#000000' }}\n                            title=\"Black\"\n                          />\n                          <button\n                            className={`color-button ${languageCustomizations[lang]?.textColor === '#1E1E1E' ? 'active' : ''}`}\n                            onClick={() => updateLanguageCustomization(lang, 'textColor', '#1E1E1E')}\n                            style={{ backgroundColor: '#1E1E1E' }}\n                            title=\"Dark Gray\"\n                          />\n                          <button\n                            className={`color-button ${languageCustomizations[lang]?.textColor === '#EAEAEA' ? 'active' : ''}`}\n                            onClick={() => updateLanguageCustomization(lang, 'textColor', '#EAEAEA')}\n                            style={{ backgroundColor: '#EAEAEA' }}\n                            title=\"Light Gray\"\n                          />\n                          <button\n                            className={`color-button ${languageCustomizations[lang]?.textColor === '#FFFFFF' ? 'active' : ''}`}\n                            onClick={() => updateLanguageCustomization(lang, 'textColor', '#FFFFFF')}\n                            style={{ backgroundColor: '#FFFFFF' }}\n                            title=\"White\"\n                          />\n                        </div>\n                      </div>\n                      \n                      {/* Character Spacing - 3 level toggle */}\n                      <div className=\"settings-item\">\n                        <label className=\"settings-label\">Character Spacing</label>\n                        <div className=\"toggle-group\">\n                          <button\n                            className={`toggle-button ${languageCustomizations[lang]?.letterSpacing === 'tight' ? 'active' : ''}`}\n                            onClick={() => updateLanguageCustomization(lang, 'letterSpacing', 'tight')}\n                            title=\"Tight Spacing\"\n                          >\n                            <span className=\"toggle-icon spacing-tight\">AV</span>\n                          </button>\n                          <button\n                            className={`toggle-button ${(!languageCustomizations[lang]?.letterSpacing || languageCustomizations[lang]?.letterSpacing === 'normal') ? 'active' : ''}`}\n                            onClick={() => updateLanguageCustomization(lang, 'letterSpacing', 'normal')}\n                            title=\"Normal Spacing\"\n                          >\n                            <span className=\"toggle-icon spacing-normal\">A V</span>\n                          </button>\n                          <button\n                            className={`toggle-button ${languageCustomizations[lang]?.letterSpacing === 'wide' ? 'active' : ''}`}\n                            onClick={() => updateLanguageCustomization(lang, 'letterSpacing', 'wide')}\n                            title=\"Wide Spacing\"\n                          >\n                            <span className=\"toggle-icon spacing-wide\">A  V</span>\n                          </button>\n                        </div>\n                      </div>\n                      \n                      <button \n                        className=\"reset-button\"\n                        onClick={() => {\n                          // Reset this language's customizations to new defaults with larger, bolder text\n                          setLanguageCustomizations(prev => ({\n                            ...prev,\n                            [lang]: {\n                              fontFamily: 'Arial / Helvetica',\n                              fontSize: 'Large', // Updated from Medium to Large\n                              fontWeight: 'bold', // New default\n                              textColor: darkMode ? '#FFFFFF' : '#000000',\n                              letterSpacing: 'normal'\n                            }\n                          }));\n                        }}\n                        aria-label={`Reset customization for ${getLanguageName(lang)}`}\n                      >\n                        Reset\n                      </button>\n                    </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n              \n              {/* Part of speech color customization */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Part of Speech Highlighting</h3>\n                <div className=\"pos-color-controls\">\n                  <div className=\"pos-color-item\">\n                    <label className=\"pos-label\" htmlFor=\"noun-color\">Nouns</label>\n                    <select \n                      id=\"noun-color\" \n                      value={nounColor} \n                      onChange={(e) => setNounColor(e.target.value)} \n                      className=\"settings-select pos-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"pos-color-item\">\n                    <label className=\"pos-label\" htmlFor=\"verb-color\">Verbs</label>\n                    <select \n                      id=\"verb-color\" \n                      value={verbColor} \n                      onChange={(e) => setVerbColor(e.target.value)} \n                      className=\"settings-select pos-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"pos-color-item\">\n                    <label className=\"pos-label\" htmlFor=\"adjective-color\">Adjectives</label>\n                    <select \n                      id=\"adjective-color\" \n                      value={adjectiveColor} \n                      onChange={(e) => setAdjectiveColor(e.target.value)} \n                      className=\"settings-select pos-select\"\n                    >\n                      <option>Electric Blue</option>\n                      <option>Cherry Red</option>\n                      <option>Forest Green</option>\n                      <option>Sunny Yellow</option>\n                      <option>Royal Purple</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}