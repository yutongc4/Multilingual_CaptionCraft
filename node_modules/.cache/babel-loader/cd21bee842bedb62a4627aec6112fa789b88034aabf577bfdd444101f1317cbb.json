{"ast":null,"code":"var _jsxFileName = \"/Users/arunasrivastava/random/cse482/Multilingual/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// Update this component (around line 5-89 in your code)\n// Fixed StyledCaptionText component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledCaptionText = ({\n  text,\n  customization,\n  darkMode,\n  getColor\n}) => {\n  // Font styles from customization\n  const fontStyles = {\n    fontFamily: getFontFamily(customization.fontFamily),\n    fontSize: getFontSize(customization.fontSize),\n    fontWeight: getFontWeight(customization.fontWeight),\n    color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n    letterSpacing: getLetterSpacing(customization.letterSpacing),\n    lineHeight: '1.4',\n    display: 'inline-block'\n  };\n\n  // Process the text to identify tagged parts and ANSI highlighting\n  const processText = input => {\n    if (!input) return [];\n    const segments = [];\n    let currentIndex = 0;\n\n    // Regular expressions for both POS tags and ANSI escape codes\n    const tagRegex = /<(noun|verb|adjective)>(.*?)<\\/\\1>/g;\n    const ansiRegex = /\\u001b\\[1;33m(.*?)\\u001b\\[0m/g;\n\n    // First, split by ANSI escape codes\n    const parts = input.split(/(\\u001b\\[1;33m.*?\\u001b\\[0m)/);\n    parts.forEach(part => {\n      const ansiMatch = part.match(/\\u001b\\[1;33m(.*?)\\u001b\\[0m/);\n      if (ansiMatch) {\n        // This is a highlighted part\n        segments.push({\n          type: 'highlight',\n          content: ansiMatch[1]\n        });\n      } else {\n        // Process POS tags in non-highlighted text\n        let lastIndex = 0;\n        let tagMatch;\n        while ((tagMatch = tagRegex.exec(part)) !== null) {\n          // Add any text before the tag\n          if (tagMatch.index > lastIndex) {\n            segments.push({\n              type: 'text',\n              content: part.substring(lastIndex, tagMatch.index)\n            });\n          }\n\n          // Add the tagged content\n          segments.push({\n            type: tagMatch[1],\n            // noun, verb, or adjective\n            content: tagMatch[2]\n          });\n          lastIndex = tagMatch.index + tagMatch[0].length;\n        }\n\n        // Add any remaining text\n        if (lastIndex < part.length) {\n          segments.push({\n            type: 'text',\n            content: part.substring(lastIndex)\n          });\n        }\n      }\n    });\n    return segments;\n  };\n\n  // Parse text into segments\n  const segments = processText(text);\n\n  // Main render function\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: fontStyles,\n    children: segments.map((segment, index) => {\n      switch (segment.type) {\n        case 'text':\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            children: segment.content\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 20\n          }, this);\n        case 'noun':\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: getColor('noun'),\n              textDecoration: 'underline'\n            },\n            children: segment.content\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this);\n        case 'verb':\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: getColor('verb'),\n              textDecoration: 'underline'\n            },\n            children: segment.content\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this);\n        case 'adjective':\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: getColor('adjective'),\n              textDecoration: 'underline'\n            },\n            children: segment.content\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this);\n        case 'highlight':\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              backgroundColor: darkMode ? '#664d00' : '#fff3b3',\n              padding: '0 2px',\n              borderRadius: '2px',\n              color: darkMode ? '#ffdb4d' : '#806600'\n            },\n            children: segment.content\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this);\n        default:\n          return null;\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n// API base URL - change this if your backend is running on a different port/host\n_c = StyledCaptionText;\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n// Get font size based on settings - now supports numeric values\nconst getFontSize = sizeValue => {\n  if (typeof sizeValue === 'number') {\n    return `${sizeValue}px`;\n  }\n  const sizeMap = {\n    'Small': '14px',\n    'Medium': '16px',\n    'Large': '20px',\n    'X-Large': '24px'\n  };\n  return sizeMap[sizeValue] || '16px';\n};\n\n// Get font weight based on settings - now supports numeric values\nconst getFontWeight = weightValue => {\n  if (typeof weightValue === 'number') {\n    return weightValue.toString();\n  }\n  const weightMap = {\n    'Light': '300',\n    'Regular': '400',\n    'Bold': '700'\n  };\n  return weightMap[weightValue] || '400';\n};\n\n// Get letter spacing based on settings - now supports numeric values\nconst getLetterSpacing = spacingValue => {\n  if (typeof spacingValue === 'number') {\n    return `${spacingValue}px`;\n  }\n  return spacingValue || 'normal';\n};\n\n// Get font family based on settings\nconst getFontFamily = fontOption => {\n  const fontMap = {\n    'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n    'Lexend': 'Lexend, Arial, sans-serif',\n    'Nunito Sans': 'Nunito Sans, Arial, sans-serif',\n    'Chewy': 'Chewy, cursive',\n    'Open Sans': 'Open Sans, Arial, sans-serif',\n    'Verdana': 'Verdana, Geneva, sans-serif',\n    'Shizuru': 'Shizuru, cursive'\n  };\n  return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n};\nfunction App() {\n  _s();\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=zy2Zj8yIe6c');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n    // tertiary language removed\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // for hightlight\n  const [highlightingEnabled, setHighlightingEnabled] = useState(true);\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n\n  // Add missing hiddenLanguages state\n  const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n\n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50,\n    // percentage\n    y: 80,\n    // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0,\n    lastX: 0,\n    lastY: 0,\n    width: 40 // percentage\n  });\n\n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n\n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n\n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n\n  // New state for UI enhancements\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n  const [captionsHeight, setCaptionsHeight] = useState('normal');\n\n  // New state for caption spacing\n  const [captionSpacing, setCaptionSpacing] = useState(10); // Default 10px spacing\n\n  // Refs\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const videoResizeHandleRef = useRef(null);\n  const captionsResizeHandleRef = useRef(null);\n  const activeResizeRef = useRef(null);\n\n  // Add new state for resize handling\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeDirection, setResizeDirection] = useState(null);\n  const resizeStartRef = useRef(null);\n\n  // Add new state variables for loading progress and status management\n  const [loadingProgress, setLoadingProgress] = useState(0);\n  const [showLoadingProgress, setShowLoadingProgress] = useState(false);\n  const [showStatus, setShowStatus] = useState(false);\n  const [statusFadeOut, setStatusFadeOut] = useState(false);\n\n  // Add new state for highlighted matches\n  const [highlightedMatches, setHighlightedMatches] = useState({\n    source_to_target: {},\n    highlighted_phrases: []\n  });\n\n  // Add helper function for status management\n  const setStatusWithTimeout = (message, duration = 0) => {\n    setStatus(message);\n    setShowStatus(true);\n    setStatusFadeOut(false);\n    if (duration > 0) {\n      setTimeout(() => {\n        setStatusFadeOut(true);\n        setTimeout(() => {\n          setShowStatus(false);\n          setStatus('');\n        }, 500);\n      }, duration);\n    }\n  };\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = url => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[7].length === 11 ? match[7] : null;\n  };\n\n  // Toggle settings panel collapse\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]);\n\n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = lang => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // highlighting api\n  const HIGHLIGHTER_API_URL = './Grammar-Highlighter/highlight'; // Grammar Highlighter API URL\n\n  // Call Grammar Highlighter API\n  const extractKeywords = async text => {\n    try {\n      const response = await fetch(HIGHLIGHTER_API_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) throw new Error(`Failed to extract keywords: ${response.status}`);\n      const data = await response.json();\n      return data.keywords || [];\n    } catch (error) {\n      console.error('Error extracting keywords:', error);\n      return [];\n    }\n  };\n\n  // Update the highlightKeywords function to use our backend API\n  const highlightKeywords = async () => {\n    if (!highlightingEnabled || !videoId || !selectedLanguages.primary || !selectedLanguages.secondary) {\n      return;\n    }\n    try {\n      setStatusWithTimeout('Processing keyword highlighting...', 2000);\n      const response = await fetch(`${API_BASE_URL}/api/highlight-keywords`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          videoId: videoId,\n          sourceLang: selectedLanguages.primary,\n          targetLang: selectedLanguages.secondary,\n          maxTime: 600,\n          // 10 minutes\n          minDuration: 1.5\n        })\n      });\n      const data = await response.json();\n      if (data.success && data.matches) {\n        setHighlightedMatches(data.matches);\n        setStatusWithTimeout('Keywords highlighted successfully!', 2000);\n      } else {\n        setStatusWithTimeout(`Failed to highlight keywords: ${data.error}`, 3000);\n      }\n    } catch (error) {\n      console.error('Error highlighting keywords:', error);\n      setStatusWithTimeout('Error highlighting keywords', 3000);\n    }\n  };\n\n  // Add useEffect to trigger highlighting when languages change or highlighting is toggled\n  useEffect(() => {\n    if (highlightingEnabled && videoId && selectedLanguages.primary && selectedLanguages.secondary) {\n      highlightKeywords();\n    } else {\n      setHighlightedMatches({\n        source_to_target: {},\n        highlighted_phrases: []\n      });\n    }\n  }, [highlightingEnabled, videoId, selectedLanguages.primary, selectedLanguages.secondary]);\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n\n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n\n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n\n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = {\n      ...languageCustomizations\n    };\n    let hasChanges = false;\n\n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 16,\n          fontWeight: 400,\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 0\n        };\n        hasChanges = true;\n      }\n    });\n\n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(newLanguageCustomizations);\n    }\n  }, [selectedLanguages]);\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = {\n      ...languageCustomizations\n    };\n    let hasChanges = false;\n    Object.keys(updatedCustomizations).forEach(lang => {\n      var _updatedCustomization, _updatedCustomization2;\n      if (((_updatedCustomization = updatedCustomizations[lang]) === null || _updatedCustomization === void 0 ? void 0 : _updatedCustomization.textColor) === '#000000' || ((_updatedCustomization2 = updatedCustomizations[lang]) === null || _updatedCustomization2 === void 0 ? void 0 : _updatedCustomization2.textColor) === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n        hasChanges = true;\n      }\n    });\n\n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(updatedCustomizations);\n    }\n  }, [darkMode]);\n\n  // Add this function to toggle language visibility\n  const toggleLanguageVisibility = lang => {\n    setHiddenLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Set up video container resize functionality\n  useEffect(() => {\n    if (!videoId) return;\n    const videoContainer = videoContainerRef.current;\n    const resizeHandle = videoResizeHandleRef.current;\n    if (!videoContainer || !resizeHandle) return;\n    const handleMouseDown = e => {\n      e.preventDefault();\n\n      // Save initial position and dimensions\n      const startX = e.clientX;\n      const startWidth = videoContainer.offsetWidth;\n      activeResizeRef.current = 'video';\n      const handleMouseMove = moveEvent => {\n        if (activeResizeRef.current !== 'video') return;\n\n        // Calculate new width based on mouse movement\n        const deltaX = moveEvent.clientX - startX;\n        const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n\n        // Set width\n        videoContainer.style.width = `${newWidth}px`;\n\n        // Update the video wrapper's padding-top to maintain aspect ratio\n        const videoWrapper = videoContainer.querySelector('.video-wrapper');\n        if (videoWrapper) {\n          // No need to explicitly set height - padding-top maintains ratio\n          videoWrapper.style.paddingTop = `${9 / 16 * 100}%`; // Keep 16:9 ratio\n        }\n        moveEvent.preventDefault();\n      };\n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    return () => {\n      if (resizeHandle) {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      }\n    };\n  }, [videoId]);\n\n  // Set up captions container resize functionality\n  useEffect(() => {\n    if (!captionsResizeHandleRef.current) return;\n    const resizeHandle = captionsResizeHandleRef.current;\n    const handleMouseDown = e => {\n      e.preventDefault();\n\n      // Find the active captions section\n      const captionsSection = document.querySelector('.active-captions-section');\n      if (!captionsSection) return;\n\n      // Save initial position and dimensions\n      const startY = e.clientY;\n      const startHeight = captionsSection.offsetHeight;\n      activeResizeRef.current = 'captions';\n      const handleMouseMove = moveEvent => {\n        if (activeResizeRef.current !== 'captions') return;\n\n        // Calculate new height\n        const height = startHeight + (moveEvent.clientY - startY);\n\n        // Apply new height with min constraint\n        if (height > 100) {\n          captionsSection.style.height = `${height}px`;\n          captionsSection.style.maxHeight = `${height}px`;\n        }\n        moveEvent.preventDefault();\n      };\n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    return () => {\n      resizeHandle.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [availableLanguages.length]);\n\n  // Handle YouTube link input\n  const handleLinkChange = e => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatusWithTimeout('Fetching available languages...'); // No timeout for loading message\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatusWithTimeout('Invalid YouTube URL', 3000);\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async videoId => {\n    try {\n      var _uniqueTranscripts$fi, _uniqueTranscripts$;\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Received data:', data);\n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n\n      // Filter out duplicate transcripts based on language_code\n      const uniqueTranscripts = data.transcripts.filter((transcript, index, self) => index === self.findIndex(t => t.language_code === transcript.language_code));\n\n      // Store the filtered transcript information\n      setAvailableTranscripts(uniqueTranscripts);\n\n      // Also keep the unique language codes for backward compatibility\n      const languageCodes = uniqueTranscripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} unique languages:`, languageCodes);\n\n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = ((_uniqueTranscripts$fi = uniqueTranscripts.find(t => t.language_code === 'en')) === null || _uniqueTranscripts$fi === void 0 ? void 0 : _uniqueTranscripts$fi.language_code) || ((_uniqueTranscripts$ = uniqueTranscripts[0]) === null || _uniqueTranscripts$ === void 0 ? void 0 : _uniqueTranscripts$.language_code) || '';\n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: ''\n      });\n      setStatusWithTimeout(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n\n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatusWithTimeout(`Error: ${error.message}`, 5000);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      setStatusWithTimeout('Loading transcripts...'); // No timeout for loading message\n      setLoadingProgress(0);\n      setShowLoadingProgress(true);\n\n      // Create an array of promises for parallel fetching\n      const fetchPromises = languages.map(async lang => {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            return {\n              lang,\n              error: true\n            };\n          }\n          const data = await response.json();\n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            return {\n              lang,\n              error: true\n            };\n          }\n\n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n\n          // Update captions immediately as each one loads\n          setCaptions(prev => ({\n            ...prev,\n            [lang]: processedTranscript\n          }));\n\n          // Update loading progress\n          setLoadingProgress(prev => prev + 100 / languages.length);\n          return {\n            lang,\n            transcript: processedTranscript\n          };\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n          return {\n            lang,\n            error: true\n          };\n        }\n      });\n\n      // Wait for all transcripts to load in parallel\n      const results = await Promise.all(fetchPromises);\n\n      // Count successful loads\n      const successfulLoads = results.filter(result => !result.error).length;\n\n      // Update final status with timeout\n      setStatusWithTimeout(`Successfully loaded captions in ${successfulLoads} languages`, 2000);\n      setLoadingProgress(100);\n\n      // Start fade out animation\n      setTimeout(() => {\n        setShowLoadingProgress(false);\n      }, 500);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatusWithTimeout(`Error fetching captions: ${error.message}`, 5000); // Show error messages longer\n      setShowLoadingProgress(false);\n    } finally {\n      setTimeout(() => {\n        setIsLoading(false);\n      }, 1000);\n    }\n  };\n\n  // Hightlighting\n  const toggleHighlighting = () => setHighlightingEnabled(!highlightingEnabled);\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = text => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n\n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = {\n      ...selectedLanguages\n    };\n\n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => {\n      // Get existing customization or create new one with defaults\n      const existingCustomization = prev[lang] || {\n        fontFamily: 'Arial / Helvetica',\n        fontSize: 16,\n        fontWeight: 400,\n        textColor: darkMode ? '#FFFFFF' : '#000000',\n        letterSpacing: 0\n      };\n\n      // Create new customization object with updated property\n      const updatedCustomization = {\n        ...existingCustomization,\n        [property]: value\n      };\n\n      // Return new state with updated customization\n      return {\n        ...prev,\n        [lang]: updatedCustomization\n      };\n    });\n  };\n\n  // Get color based on settings\n  const getColor = type => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    switch (type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return darkMode ? '#FFFFFF' : '#000000';\n    }\n  };\n\n  // Update formatCaptionText to include highlighting\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial / Helvetica',\n      fontSize: 16,\n      fontWeight: 400,\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 0\n    };\n\n    // Check if this text is in the highlighted phrases\n    if (highlightingEnabled && highlightedMatches.highlighted_phrases.length > 0) {\n      const matchedPhrase = highlightedMatches.highlighted_phrases.find(([source, target]) => lang === selectedLanguages.primary && source.includes(text) || lang === selectedLanguages.secondary && target.includes(text));\n      if (matchedPhrase) {\n        text = lang === selectedLanguages.primary ? matchedPhrase[0] : matchedPhrase[1];\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(StyledCaptionText, {\n      text: text,\n      customization: customization,\n      darkMode: darkMode,\n      getColor: getColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 892,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = lang => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    return {\n      fontFamily: getFontFamily(customization.fontFamily || 'Arial / Helvetica'),\n      fontSize: getFontSize(customization.fontSize || 16),\n      fontWeight: getFontWeight(customization.fontWeight || 400),\n      color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: getLetterSpacing(customization.letterSpacing || 0),\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(caption => currentTime >= caption.start && currentTime <= caption.end);\n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    let player = null;\n\n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n      player = event.target; // Store the player reference\n    }\n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (player && player.getCurrentTime) {\n            setCurrentTime(player.getCurrentTime());\n          }\n          if (player && player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = code => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = langCode => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return (transcript === null || transcript === void 0 ? void 0 : transcript.language) || langCode;\n  };\n\n  // Start dragging the caption overlay\n  const handleMouseDown = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n    const overlayElement = overlayRef.current;\n    if (!overlayElement) return;\n\n    // Calculate initial position relative to the container\n    const initialX = (e.clientX - rect.left) / rect.width * 100;\n    const initialY = (e.clientY - rect.top) / rect.height * 100;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n\n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n\n  // Handle mouse move during dragging - Improved for smoother movement\n  const handleMouseMove = e => {\n    if (!overlayPosition.isDragging) return;\n\n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate current position as percentage of container\n    const currentX = (e.clientX - rect.left) / rect.width * 100;\n    const currentY = (e.clientY - rect.top) / rect.height * 100;\n\n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n\n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n\n    // Update position with smooth transition\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY\n    }));\n\n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n\n  // Stop dragging with smooth finish\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle touch start for mobile devices - improved for smoother touch interaction\n  const handleTouchStart = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate initial touch position relative to container\n    const initialX = (touch.clientX - rect.left) / rect.width * 100;\n    const initialY = (touch.clientY - rect.top) / rect.height * 100;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', handleTouchEnd);\n\n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n\n  // Handle touch move for mobile devices - improved for smoother movement\n  const handleTouchMove = e => {\n    if (!overlayPosition.isDragging) return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate current position as percentage of container\n    const currentX = (touch.clientX - rect.left) / rect.width * 100;\n    const currentY = (touch.clientY - rect.top) / rect.height * 100;\n\n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n\n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n\n    // Update position with smooth transition\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY\n    }));\n\n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n\n  // Handle touch end for mobile devices - with smooth finish\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n\n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n\n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = time => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n\n  // Handle resize start\n  const handleResizeStart = (e, direction) => {\n    e.stopPropagation(); // Prevent drag event from firing\n    const videoContainer = videoContainerRef.current;\n    const overlay = overlayRef.current;\n    if (!videoContainer || !overlay) return;\n    setIsResizing(true);\n    setResizeDirection(direction);\n\n    // Store initial values\n    resizeStartRef.current = {\n      x: e.clientX,\n      width: overlayPosition.width,\n      containerWidth: videoContainer.getBoundingClientRect().width,\n      direction: direction,\n      initialX: overlayPosition.x // Store initial X position\n    };\n\n    // Add event listeners to document to ensure smooth dragging\n    document.addEventListener('mousemove', handleResize);\n    document.addEventListener('mouseup', handleResizeEnd);\n\n    // Prevent text selection and default behaviors\n    e.preventDefault();\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize\n  const handleResize = e => {\n    if (!isResizing || !resizeStartRef.current) return;\n    const {\n      x: startX,\n      width: startWidth,\n      containerWidth,\n      direction,\n      initialX\n    } = resizeStartRef.current;\n    const deltaX = e.clientX - startX;\n\n    // Calculate width change as percentage\n    const deltaWidth = deltaX / containerWidth * 100;\n\n    // Calculate new width based on resize direction\n    let newWidth;\n    if (direction === 'right') {\n      newWidth = Math.max(20, Math.min(90, startWidth + deltaWidth));\n    } else {\n      newWidth = Math.max(20, Math.min(90, startWidth - deltaWidth));\n    }\n\n    // If resizing from left, adjust position to maintain right edge position\n    if (direction === 'left') {\n      const currentRight = initialX + startWidth / 2;\n      const newX = currentRight - newWidth / 2;\n      setOverlayPosition(prev => ({\n        ...prev,\n        x: Math.max(newWidth / 2, Math.min(100 - newWidth / 2, newX)),\n        width: newWidth\n      }));\n    } else {\n      // Update width only for right resize\n      setOverlayPosition(prev => ({\n        ...prev,\n        width: newWidth\n      }));\n    }\n\n    // Prevent text selection during resize\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize end\n  const handleResizeEnd = () => {\n    if (!isResizing) return;\n    setIsResizing(false);\n    setResizeDirection(null);\n    resizeStartRef.current = null;\n\n    // Remove event listeners\n    document.removeEventListener('mousemove', handleResize);\n    document.removeEventListener('mouseup', handleResizeEnd);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: [\"Caption\", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"second-c\",\n        children: \"C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1272,\n        columnNumber: 40\n      }, this), \"raft\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dark-mode-toggle\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"toggle-checkbox\",\n          type: \"checkbox\",\n          checked: darkMode,\n          onChange: toggleDarkMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-slot\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sun-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify sun-icon\",\n              \"data-icon\": \"feather-sun\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1285,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1284,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"toggle-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1287,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"moon-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify moon-icon\",\n              \"data-icon\": \"feather-moon\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1289,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1288,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1283,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1276,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: youtubeLink,\n          onChange: handleLinkChange,\n          placeholder: \"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\",\n          className: \"input-field\",\n          \"aria-label\": \"YouTube video URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'Load Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1306,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1297,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1296,\n      columnNumber: 7\n    }, this), showStatus && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `status-message ${statusFadeOut ? 'fade-out' : ''}`,\n        role: \"status\",\n        \"aria-live\": \"polite\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1319,\n        columnNumber: 11\n      }, this), showLoadingProgress && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `loading-progress ${loadingProgress === 100 ? 'fade-out' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-progress-fill\",\n          style: {\n            width: `${loadingProgress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1324,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1323,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          ref: videoContainerRef,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-header\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"placement-toggle\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"placement-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`,\n                  onClick: () => setCaptionPlacement('Below Video'),\n                  children: \"Below\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1342,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`,\n                  onClick: () => setCaptionPlacement('Overlay'),\n                  children: \"Overlay\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1348,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1341,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1340,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1339,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-wrapper\",\n            style: {\n              paddingTop: '56.25%'\n            },\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"youtube-player\",\n              className: \"video-frame\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1359,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1357,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: videoResizeHandleRef,\n            className: \"video-resize-handle\",\n            title: \"Drag to resize video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1363,\n            columnNumber: 15\n          }, this), captionPlacement === 'Overlay' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''} ${isResizing ? 'resizing' : ''}`,\n            style: {\n              position: 'absolute',\n              left: `${overlayPosition.x}%`,\n              top: `${overlayPosition.y}%`,\n              transform: 'translate(-50%, -50%)',\n              cursor: overlayPosition.isDragging ? 'grabbing' : 'grab',\n              transition: overlayPosition.isDragging || isResizing ? 'none' : 'all 0.1s ease-out',\n              width: `${overlayPosition.width}%`,\n              minWidth: '200px',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              backgroundColor: darkMode ? 'rgba(0, 0, 0, 0.7)' : 'rgba(255, 255, 255, 0.7)',\n              backdropFilter: 'blur(8px)',\n              borderRadius: '8px',\n              padding: '8px',\n              boxSizing: 'border-box',\n              border: '1px solid rgba(255, 255, 255, 0.1)'\n            },\n            ref: overlayRef,\n            onMouseDown: handleMouseDown,\n            onTouchStart: handleTouchStart,\n            tabIndex: \"0\",\n            role: \"region\",\n            \"aria-label\": \"Movable captions overlay\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"resize-handle resize-handle-left\",\n              style: {\n                position: 'absolute',\n                left: '-8px',\n                top: 0,\n                width: '16px',\n                height: '100%',\n                cursor: 'ew-resize',\n                backgroundColor: isResizing && resizeDirection === 'left' ? 'rgba(255, 255, 255, 0.2)' : 'transparent',\n                borderRadius: '4px 0 0 4px',\n                zIndex: 10\n              },\n              onMouseDown: e => handleResizeStart(e, 'left')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1400,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"resize-handle resize-handle-right\",\n              style: {\n                position: 'absolute',\n                right: '-8px',\n                top: 0,\n                width: '16px',\n                height: '100%',\n                cursor: 'ew-resize',\n                backgroundColor: isResizing && resizeDirection === 'right' ? 'rgba(255, 255, 255, 0.2)' : 'transparent',\n                borderRadius: '0 4px 4px 0',\n                zIndex: 10\n              },\n              onMouseDown: e => handleResizeStart(e, 'right')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1418,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: 'absolute',\n                left: '-4px',\n                top: '50%',\n                transform: 'translateY(-50%)',\n                width: '4px',\n                height: '24px',\n                backgroundColor: isResizing && resizeDirection === 'left' ? 'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                borderRadius: '2px',\n                pointerEvents: 'none',\n                transition: 'background-color 0.1s ease'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1436,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: 'absolute',\n                right: '-4px',\n                top: '50%',\n                transform: 'translateY(-50%)',\n                width: '4px',\n                height: '24px',\n                backgroundColor: isResizing && resizeDirection === 'right' ? 'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                borderRadius: '2px',\n                pointerEvents: 'none',\n                transition: 'background-color 0.1s ease'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1451,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-drag-instructions\",\n              children: \"Hold to move \\u2022 Drag edges to resize\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1467,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => activeCaptions[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-caption\",\n              style: {\n                ...getCaptionStyle(lang),\n                width: '100%',\n                textAlign: 'center',\n                padding: '4px 8px',\n                whiteSpace: 'pre-wrap',\n                overflowWrap: 'break-word',\n                wordWrap: 'break-word',\n                maxWidth: '100%',\n                display: 'block',\n                userSelect: 'none' // Prevent text selection while dragging\n              },\n              children: formatCaptionText(activeCaptions[lang].text, lang)\n            }, lang, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1473,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1371,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1338,\n          columnNumber: 13\n        }, this), captionPlacement === 'Below Video' && availableLanguages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"captions-container closer-to-video\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"toggle-caption-height\",\n              onClick: toggleCaptionsHeight,\n              title: captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions',\n              children: captionsHeight === 'normal' ? '↓' : '↑'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1504,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              // Skip hidden languages\n              if (hiddenLanguages[lang]) return null;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"caption-text-container\",\n                style: {\n                  marginBottom: `${captionSpacing}px`\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"caption-content-wrapper\",\n                  children: [activeCaptions[lang] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"caption-text\",\n                    children: formatCaptionText(activeCaptions[lang].text, lang)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1524,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"no-caption\",\n                    children: \"   ...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1528,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `language-tag-right ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`,\n                    children: getLanguageName(lang)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1530,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1522,\n                  columnNumber: 23\n                }, this)\n              }, `active-${lang}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1517,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1503,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"caption-spacing-control-below\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              id: \"caption-spacing-below\",\n              min: \"-20\",\n              max: \"40\",\n              step: \"0.25\",\n              value: captionSpacing,\n              onChange: e => setCaptionSpacing(Number(e.target.value)),\n              className: \"spacing-slider-below\",\n              \"aria-label\": \"Adjust caption spacing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1541,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1540,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: captionsResizeHandleRef,\n            className: \"resize-handle resize-handle-vertical\",\n            title: \"Drag to resize captions height\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1555,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transcripts-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"section-subtitle\",\n              children: \"Full Transcripts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1563,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _captions$lang;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"language-title\",\n                  children: [getLanguageName(lang), lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1567,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"captions-content\",\n                  children: (_captions$lang = captions[lang]) === null || _captions$lang === void 0 ? void 0 : _captions$lang.map((caption, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`,\n                    onClick: () => jumpToTime(caption.start),\n                    tabIndex: \"0\",\n                    role: \"button\",\n                    \"aria-label\": `Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`,\n                    onKeyDown: e => {\n                      if (e.key === 'Enter' || e.key === ' ') {\n                        jumpToTime(caption.start);\n                      }\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"timestamp\",\n                      children: [Math.floor(caption.start / 60), \":\", (caption.start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(caption.end / 60), \":\", (caption.end % 60).toFixed(1).padStart(4, '0')]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1588,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"caption-text\",\n                      children: formatCaptionText(caption.text, lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1592,\n                      columnNumber: 29\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1576,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1574,\n                  columnNumber: 23\n                }, this)]\n              }, `transcript-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1566,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1562,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1500,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1336,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"settings-toggle\",\n          onClick: toggleSettingsPanel,\n          title: settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\",\n          \"aria-expanded\": !settingsPanelCollapsed,\n          \"aria-controls\": \"settings-content\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"settings-toggle-icon\",\n            children: settingsPanelCollapsed ? '»' : '«'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1614,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1607,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"settings-content\",\n          style: {\n            display: settingsPanelCollapsed ? 'none' : 'block',\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Customize Display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1620,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Select Languages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1624,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"primary-language\",\n                children: \"Primary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1628,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"primary-language\",\n                  value: selectedLanguages.primary,\n                  onChange: e => setLanguageRank(e.target.value, 'primary'),\n                  className: \"settings-select language-dropdown\",\n                  children: availableTranscripts.map((transcript, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, `primary-${transcript.language_code}-${index}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1637,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1630,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1629,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1627,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"secondary-language\",\n                children: \"Secondary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1647,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"secondary-language\",\n                  value: selectedLanguages.secondary,\n                  onChange: e => setLanguageRank(e.target.value, 'secondary'),\n                  className: \"settings-select language-dropdown\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"None\"\n                  }, \"none\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1655,\n                    columnNumber: 23\n                  }, this), availableTranscripts.map((transcript, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, `secondary-${transcript.language_code}-${index}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1657,\n                    columnNumber: 25\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1649,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1648,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1646,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1623,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Language Customizations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1668,\n              columnNumber: 17\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _languageCustomizatio, _languageCustomizatio2;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `language-customization-card ${collapsedLanguages[lang] ? 'collapsed' : ''}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-header\",\n                  onClick: () => toggleLanguageCollapse(lang),\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"language-header-content\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-name\",\n                      children: getLanguageName(lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1677,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: `visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`,\n                      onClick: e => {\n                        e.stopPropagation();\n                        toggleLanguageVisibility(lang);\n                      },\n                      title: hiddenLanguages[lang] ? 'Show Language' : 'Hide Language',\n                      \"aria-label\": hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1678,\n                      columnNumber: 25\n                    }, this), lang === selectedLanguages.primary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag primary\",\n                      children: \"Primary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1687,\n                      columnNumber: 64\n                    }, this), lang === selectedLanguages.secondary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag secondary\",\n                      children: \"Secondary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1688,\n                      columnNumber: 66\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1676,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"collapse-toggle\",\n                    onClick: e => {\n                      e.stopPropagation();\n                      toggleLanguageCollapse(lang);\n                    },\n                    \"aria-label\": collapsedLanguages[lang] ? \"Expand language settings\" : \"Collapse language settings\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1690,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1672,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-content\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: `visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`,\n                    onClick: () => toggleLanguageVisibility(lang),\n                    title: hiddenLanguages[lang] ? 'Show Language' : 'Hide Language',\n                    \"aria-label\": hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1702,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Font\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1711,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      className: \"font-select\",\n                      value: ((_languageCustomizatio = languageCustomizations[lang]) === null || _languageCustomizatio === void 0 ? void 0 : _languageCustomizatio.fontFamily) || 'Arial / Helvetica',\n                      onChange: e => updateLanguageCustomization(lang, 'fontFamily', e.target.value),\n                      style: {\n                        fontFamily: getFontFamily(((_languageCustomizatio2 = languageCustomizations[lang]) === null || _languageCustomizatio2 === void 0 ? void 0 : _languageCustomizatio2.fontFamily) || 'Arial / Helvetica')\n                      },\n                      children: ['Arial / Helvetica', 'Lexend', 'Nunito Sans', 'Chewy', 'Open Sans', 'Verdana', ...(lang === 'ja' ? ['Shizuru'] : [])].map(font => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: font,\n                        style: {\n                          fontFamily: getFontFamily(font)\n                        },\n                        children: font\n                      }, font, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1727,\n                        columnNumber: 29\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1712,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1710,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Size\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1740,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"button-group\",\n                      children: [{\n                        value: 14,\n                        label: 'Small'\n                      }, {\n                        value: 18,\n                        label: 'Medium'\n                      }, {\n                        value: 24,\n                        label: 'Large'\n                      }].map(size => {\n                        var _languageCustomizatio3;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: `option-button ${((_languageCustomizatio3 = languageCustomizations[lang]) === null || _languageCustomizatio3 === void 0 ? void 0 : _languageCustomizatio3.fontSize) === size.value ? 'active' : ''}`,\n                          onClick: () => {\n                            const updatedCustomization = {\n                              ...languageCustomizations[lang],\n                              fontSize: size.value\n                            };\n                            setLanguageCustomizations(prev => ({\n                              ...prev,\n                              [lang]: updatedCustomization\n                            }));\n                          },\n                          children: size.label\n                        }, size.value, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1747,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1741,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1739,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Font Weight\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1769,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"button-group\",\n                      children: [{\n                        value: 300,\n                        label: 'Light'\n                      }, {\n                        value: 400,\n                        label: 'Regular'\n                      }, {\n                        value: 700,\n                        label: 'Bold'\n                      }].map(weight => {\n                        var _languageCustomizatio4;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: `option-button ${((_languageCustomizatio4 = languageCustomizations[lang]) === null || _languageCustomizatio4 === void 0 ? void 0 : _languageCustomizatio4.fontWeight) === weight.value ? 'active' : ''}`,\n                          onClick: () => {\n                            const updatedCustomization = {\n                              ...languageCustomizations[lang],\n                              fontWeight: weight.value\n                            };\n                            setLanguageCustomizations(prev => ({\n                              ...prev,\n                              [lang]: updatedCustomization\n                            }));\n                          },\n                          children: weight.label\n                        }, weight.value, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1776,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1770,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1768,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Character Spacing\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1798,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"button-group\",\n                      children: [{\n                        value: -1,\n                        label: 'Tight'\n                      }, {\n                        value: 0,\n                        label: 'Normal'\n                      }, {\n                        value: 2,\n                        label: 'Wide'\n                      }].map(spacing => {\n                        var _languageCustomizatio5;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: `option-button ${((_languageCustomizatio5 = languageCustomizations[lang]) === null || _languageCustomizatio5 === void 0 ? void 0 : _languageCustomizatio5.letterSpacing) === spacing.value ? 'active' : ''}`,\n                          onClick: () => updateLanguageCustomization(lang, 'letterSpacing', spacing.value),\n                          children: spacing.label\n                        }, spacing.value, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1805,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1799,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1797,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"preview-text\",\n                    style: getCaptionStyle(lang),\n                    children: \"The quick brown fox jumps over the lazy dog.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1817,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"button-row\",\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"action-button secondary\",\n                      onClick: () => {\n                        setLanguageCustomizations(prev => ({\n                          ...prev,\n                          [lang]: {\n                            fontFamily: 'Arial / Helvetica',\n                            fontSize: 16,\n                            fontWeight: 400,\n                            textColor: darkMode ? '#FFFFFF' : '#000000',\n                            letterSpacing: 0\n                          }\n                        }));\n                      },\n                      children: \"Reset\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1826,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1825,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1700,\n                  columnNumber: 21\n                }, this)]\n              }, `customize-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1671,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1667,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Keyword Highlighting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1851,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"toggle-container\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: highlightingEnabled,\n                  onChange: toggleHighlighting\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1854,\n                  columnNumber: 21\n                }, this), \"Enable Keyword Highlighting\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1853,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1852,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1850,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1619,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1606,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1334,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1271,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"aVkD2/kWzoEByfGkilWhHqudqfc=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledCaptionText\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","StyledCaptionText","text","customization","darkMode","getColor","fontStyles","fontFamily","getFontFamily","fontSize","getFontSize","fontWeight","getFontWeight","color","textColor","letterSpacing","getLetterSpacing","lineHeight","display","processText","input","segments","currentIndex","tagRegex","ansiRegex","parts","split","forEach","part","ansiMatch","match","push","type","content","lastIndex","tagMatch","exec","index","substring","length","style","children","map","segment","fileName","_jsxFileName","lineNumber","columnNumber","textDecoration","backgroundColor","padding","borderRadius","_c","API_BASE_URL","sizeValue","sizeMap","weightValue","toString","weightMap","spacingValue","fontOption","fontMap","App","_s","youtubeLink","setYoutubeLink","videoId","setVideoId","captions","setCaptions","selectedLanguages","setSelectedLanguages","primary","secondary","availableLanguages","setAvailableLanguages","availableTranscripts","setAvailableTranscripts","status","setStatus","isLoading","setIsLoading","currentTime","setCurrentTime","activeCaptions","setActiveCaptions","highlightingEnabled","setHighlightingEnabled","collapsedLanguages","setCollapsedLanguages","hiddenLanguages","setHiddenLanguages","captionPlacement","setCaptionPlacement","overlayPosition","setOverlayPosition","x","y","isDragging","startX","startY","lastX","lastY","width","nounColor","setNounColor","verbColor","setVerbColor","adjectiveColor","setAdjectiveColor","languageCustomizations","setLanguageCustomizations","setDarkMode","settingsPanelCollapsed","setSettingsPanelCollapsed","captionsHeight","setCaptionsHeight","captionSpacing","setCaptionSpacing","overlayRef","videoContainerRef","videoResizeHandleRef","captionsResizeHandleRef","activeResizeRef","isResizing","setIsResizing","resizeDirection","setResizeDirection","resizeStartRef","loadingProgress","setLoadingProgress","showLoadingProgress","setShowLoadingProgress","showStatus","setShowStatus","statusFadeOut","setStatusFadeOut","highlightedMatches","setHighlightedMatches","source_to_target","highlighted_phrases","setStatusWithTimeout","message","duration","setTimeout","extractVideoId","url","regExp","toggleSettingsPanel","toggleCaptionsHeight","getSelectedLanguagesArray","Object","values","filter","lang","initialCollapsedState","toggleLanguageCollapse","prev","HIGHLIGHTER_API_URL","extractKeywords","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","keywords","error","console","highlightKeywords","sourceLang","targetLang","maxTime","minDuration","success","matches","id","window","matchMedia","document","classList","add","mediaQuery","handleChange","e","remove","Iconify","script","createElement","src","async","appendChild","addEventListener","removeEventListener","iconifyScript","querySelector","head","contains","removeChild","addListener","removeListener","newLanguageCustomizations","hasChanges","updatedCustomizations","keys","_updatedCustomization","_updatedCustomization2","toggleLanguageVisibility","videoContainer","current","resizeHandle","handleMouseDown","preventDefault","clientX","startWidth","offsetWidth","handleMouseMove","moveEvent","deltaX","newWidth","Math","max","videoWrapper","paddingTop","handleMouseUp","captionsSection","clientY","startHeight","offsetHeight","height","maxHeight","handleLinkChange","target","value","handleSubmit","fetchAvailableLanguages","_uniqueTranscripts$fi","_uniqueTranscripts$","log","errorText","uniqueTranscripts","transcripts","transcript","self","findIndex","t","language_code","languageCodes","defaultPrimary","find","fetchCaptions","languages","fetchPromises","warn","processedTranscript","caption","applyPOSTagging","end","start","results","Promise","all","successfulLoads","result","toggleHighlighting","commonNouns","commonVerbs","commonAdjectives","words","taggedText","i","originalWord","word","toLowerCase","replace","includes","setLanguageRank","rank","updatedLanguages","key","updateLanguageCustomization","property","existingCustomization","updatedCustomization","colorMap","formatCaptionText","matchedPhrase","source","getCaptionStyle","isRTL","direction","newActiveCaptions","activeCaption","player","YT","tag","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","createYouTubePlayer","destroy","Player","events","onPlayerReady","onPlayerStateChange","event","PlayerState","PLAYING","updateTime","getCurrentTime","getPlayerState","requestAnimationFrame","findTranscriptByLanguageCode","code","getLanguageName","langCode","language","rect","getBoundingClientRect","overlayElement","initialX","left","initialY","top","currentX","currentY","deltaY","newX","min","newY","getSelection","removeAllRanges","handleTouchStart","touch","touches","handleTouchMove","passive","handleTouchEnd","toggleDarkMode","jumpToTime","time","seekTo","playVideo","handleResizeStart","stopPropagation","overlay","containerWidth","handleResize","handleResizeEnd","deltaWidth","currentRight","className","checked","onChange","onSubmit","placeholder","disabled","role","ref","onClick","title","position","transform","cursor","transition","minWidth","flexDirection","alignItems","backdropFilter","boxSizing","border","onMouseDown","onTouchStart","tabIndex","zIndex","right","pointerEvents","textAlign","whiteSpace","overflowWrap","wordWrap","maxWidth","userSelect","marginBottom","step","Number","_captions$lang","floor","toFixed","padStart","onKeyDown","htmlFor","_languageCustomizatio","_languageCustomizatio2","font","label","size","_languageCustomizatio3","weight","_languageCustomizatio4","spacing","_languageCustomizatio5","_c2","$RefreshReg$"],"sources":["/Users/arunasrivastava/random/cse482/Multilingual/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// Update this component (around line 5-89 in your code)\n// Fixed StyledCaptionText component\nconst StyledCaptionText = ({ text, customization, darkMode, getColor }) => {\n  // Font styles from customization\n  const fontStyles = {\n    fontFamily: getFontFamily(customization.fontFamily),\n    fontSize: getFontSize(customization.fontSize),\n    fontWeight: getFontWeight(customization.fontWeight),\n    color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n    letterSpacing: getLetterSpacing(customization.letterSpacing),\n    lineHeight: '1.4',\n    display: 'inline-block'\n  };\n\n  // Process the text to identify tagged parts and ANSI highlighting\n  const processText = (input) => {\n    if (!input) return [];\n    \n    const segments = [];\n    let currentIndex = 0;\n    \n    // Regular expressions for both POS tags and ANSI escape codes\n    const tagRegex = /<(noun|verb|adjective)>(.*?)<\\/\\1>/g;\n    const ansiRegex = /\\u001b\\[1;33m(.*?)\\u001b\\[0m/g;\n    \n    // First, split by ANSI escape codes\n    const parts = input.split(/(\\u001b\\[1;33m.*?\\u001b\\[0m)/);\n    \n    parts.forEach(part => {\n      const ansiMatch = part.match(/\\u001b\\[1;33m(.*?)\\u001b\\[0m/);\n      if (ansiMatch) {\n        // This is a highlighted part\n        segments.push({\n          type: 'highlight',\n          content: ansiMatch[1]\n        });\n      } else {\n        // Process POS tags in non-highlighted text\n        let lastIndex = 0;\n        let tagMatch;\n        \n        while ((tagMatch = tagRegex.exec(part)) !== null) {\n          // Add any text before the tag\n          if (tagMatch.index > lastIndex) {\n            segments.push({\n              type: 'text',\n              content: part.substring(lastIndex, tagMatch.index)\n            });\n          }\n          \n          // Add the tagged content\n          segments.push({\n            type: tagMatch[1], // noun, verb, or adjective\n            content: tagMatch[2]\n          });\n          \n          lastIndex = tagMatch.index + tagMatch[0].length;\n        }\n        \n        // Add any remaining text\n        if (lastIndex < part.length) {\n          segments.push({\n            type: 'text',\n            content: part.substring(lastIndex)\n          });\n        }\n      }\n    });\n    \n    return segments;\n  };\n  \n  // Parse text into segments\n  const segments = processText(text);\n  \n  // Main render function\n  return (\n    <span style={fontStyles}>\n      {segments.map((segment, index) => {\n        switch (segment.type) {\n          case 'text':\n            return <span key={index}>{segment.content}</span>;\n          case 'noun':\n            return (\n              <span \n                key={index}\n                style={{\n                  color: getColor('noun'),\n                  textDecoration: 'underline'\n                }}\n              >\n                {segment.content}\n              </span>\n            );\n          case 'verb':\n            return (\n              <span \n                key={index}\n                style={{\n                  color: getColor('verb'),\n                  textDecoration: 'underline'\n                }}\n              >\n                {segment.content}\n              </span>\n            );\n          case 'adjective':\n            return (\n              <span \n                key={index}\n                style={{\n                  color: getColor('adjective'),\n                  textDecoration: 'underline'\n                }}\n              >\n                {segment.content}\n              </span>\n            );\n          case 'highlight':\n            return (\n              <span \n                key={index}\n                style={{\n                  backgroundColor: darkMode ? '#664d00' : '#fff3b3',\n                  padding: '0 2px',\n                  borderRadius: '2px',\n                  color: darkMode ? '#ffdb4d' : '#806600'\n                }}\n              >\n                {segment.content}\n              </span>\n            );\n          default:\n            return null;\n        }\n      })}\n    </span>\n  );\n};\n// API base URL - change this if your backend is running on a different port/host\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n // Get font size based on settings - now supports numeric values\nconst getFontSize = (sizeValue) => {\n  if (typeof sizeValue === 'number') {\n    return `${sizeValue}px`;\n  }\n  const sizeMap = {\n    'Small': '14px',\n    'Medium': '16px',\n    'Large': '20px',\n    'X-Large': '24px'\n  };\n  return sizeMap[sizeValue] || '16px';\n};\n\n// Get font weight based on settings - now supports numeric values\nconst getFontWeight = (weightValue) => {\n  if (typeof weightValue === 'number') {\n    return weightValue.toString();\n  }\n  const weightMap = {\n    'Light': '300',\n    'Regular': '400',\n    'Bold': '700'\n  };\n  return weightMap[weightValue] || '400';\n};\n\n// Get letter spacing based on settings - now supports numeric values\nconst getLetterSpacing = (spacingValue) => {\n  if (typeof spacingValue === 'number') {\n    return `${spacingValue}px`;\n  }\n  return spacingValue || 'normal';\n};\n\n// Get font family based on settings\nconst getFontFamily = (fontOption) => {\n  const fontMap = {\n    'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n    'Lexend': 'Lexend, Arial, sans-serif',\n    'Nunito Sans': 'Nunito Sans, Arial, sans-serif',\n    'Chewy': 'Chewy, cursive',\n    'Open Sans': 'Open Sans, Arial, sans-serif',\n    'Verdana': 'Verdana, Geneva, sans-serif',\n    'Shizuru': 'Shizuru, cursive'\n  };\n\n  return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n};\n\nfunction App() {\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=zy2Zj8yIe6c');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n    // tertiary language removed\n  }); \n  \n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // for hightlight\n  const [highlightingEnabled, setHighlightingEnabled] = useState(true);\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n  \n  // Add missing hiddenLanguages state\n  const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  \n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50, // percentage\n    y: 80, // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0,\n    lastX: 0,\n    lastY: 0,\n    width: 40 // percentage\n  });\n  \n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  \n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n  \n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n  \n  // New state for UI enhancements\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n  const [captionsHeight, setCaptionsHeight] = useState('normal');\n  \n  // New state for caption spacing\n  const [captionSpacing, setCaptionSpacing] = useState(10); // Default 10px spacing\n  \n  // Refs\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const videoResizeHandleRef = useRef(null);\n  const captionsResizeHandleRef = useRef(null);\n  const activeResizeRef = useRef(null);\n\n  // Add new state for resize handling\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeDirection, setResizeDirection] = useState(null);\n  const resizeStartRef = useRef(null);\n\n  // Add new state variables for loading progress and status management\n  const [loadingProgress, setLoadingProgress] = useState(0);\n  const [showLoadingProgress, setShowLoadingProgress] = useState(false);\n  const [showStatus, setShowStatus] = useState(false);\n  const [statusFadeOut, setStatusFadeOut] = useState(false);\n\n  // Add new state for highlighted matches\n  const [highlightedMatches, setHighlightedMatches] = useState({\n    source_to_target: {},\n    highlighted_phrases: []\n  });\n\n  // Add helper function for status management\n  const setStatusWithTimeout = (message, duration = 0) => {\n    setStatus(message);\n    setShowStatus(true);\n    setStatusFadeOut(false);\n\n    if (duration > 0) {\n      setTimeout(() => {\n        setStatusFadeOut(true);\n        setTimeout(() => {\n          setShowStatus(false);\n          setStatus('');\n        }, 500);\n      }, duration);\n    }\n  };\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = (url) => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[7].length === 11) ? match[7] : null;\n  };\n\n  // Toggle settings panel collapse\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]); \n  \n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = (lang) => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // highlighting api\n  const HIGHLIGHTER_API_URL = './Grammar-Highlighter/highlight'; // Grammar Highlighter API URL\n  \n   // Call Grammar Highlighter API\n   const extractKeywords = async (text) => {\n    try {\n      const response = await fetch(HIGHLIGHTER_API_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ text }),\n      });\n\n      if (!response.ok) throw new Error(`Failed to extract keywords: ${response.status}`);\n\n      const data = await response.json();\n      return data.keywords || [];\n    } catch (error) {\n      console.error('Error extracting keywords:', error);\n      return [];\n    }\n  };\n\n  // Update the highlightKeywords function to use our backend API\n  const highlightKeywords = async () => {\n    if (!highlightingEnabled || !videoId || !selectedLanguages.primary || !selectedLanguages.secondary) {\n      return;\n    }\n\n    try {\n      setStatusWithTimeout('Processing keyword highlighting...', 2000);\n      const response = await fetch(`${API_BASE_URL}/api/highlight-keywords`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          videoId: videoId,\n          sourceLang: selectedLanguages.primary,\n          targetLang: selectedLanguages.secondary,\n          maxTime: 600, // 10 minutes\n          minDuration: 1.5\n        }),\n      });\n\n      const data = await response.json();\n      \n      if (data.success && data.matches) {\n        setHighlightedMatches(data.matches);\n        setStatusWithTimeout('Keywords highlighted successfully!', 2000);\n      } else {\n        setStatusWithTimeout(`Failed to highlight keywords: ${data.error}`, 3000);\n      }\n    } catch (error) {\n      console.error('Error highlighting keywords:', error);\n      setStatusWithTimeout('Error highlighting keywords', 3000);\n    }\n  };\n\n  // Add useEffect to trigger highlighting when languages change or highlighting is toggled\n  useEffect(() => {\n    if (highlightingEnabled && videoId && selectedLanguages.primary && selectedLanguages.secondary) {\n      highlightKeywords();\n    } else {\n      setHighlightedMatches({ source_to_target: {}, highlighted_phrases: [] });\n    }\n  }, [highlightingEnabled, videoId, selectedLanguages.primary, selectedLanguages.secondary]);\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n    \n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n    \n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e) => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n    \n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    \n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = { ...languageCustomizations };\n    let hasChanges = false;\n    \n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 16,\n          fontWeight: 400,\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 0\n        };\n        hasChanges = true;\n      }\n    });\n    \n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(newLanguageCustomizations);\n    }\n  }, [selectedLanguages]);\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = { ...languageCustomizations };\n    let hasChanges = false;\n    \n    Object.keys(updatedCustomizations).forEach(lang => {\n      if (updatedCustomizations[lang]?.textColor === '#000000' || updatedCustomizations[lang]?.textColor === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n        hasChanges = true;\n      }\n    });\n    \n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(updatedCustomizations);\n    }\n  }, [darkMode]);\n\n  // Add this function to toggle language visibility\n  const toggleLanguageVisibility = (lang) => {\n    setHiddenLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Set up video container resize functionality\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const videoContainer = videoContainerRef.current;\n    const resizeHandle = videoResizeHandleRef.current;\n    \n    if (!videoContainer || !resizeHandle) return;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Save initial position and dimensions\n      const startX = e.clientX;\n      const startWidth = videoContainer.offsetWidth;\n      \n      activeResizeRef.current = 'video';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'video') return;\n        \n        // Calculate new width based on mouse movement\n        const deltaX = moveEvent.clientX - startX;\n        const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n        \n        // Set width\n        videoContainer.style.width = `${newWidth}px`;\n        \n        // Update the video wrapper's padding-top to maintain aspect ratio\n        const videoWrapper = videoContainer.querySelector('.video-wrapper');\n        if (videoWrapper) {\n          // No need to explicitly set height - padding-top maintains ratio\n          videoWrapper.style.paddingTop = `${(9/16) * 100}%`; // Keep 16:9 ratio\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      if (resizeHandle) {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      }\n    };\n  }, [videoId]);\n\n  // Set up captions container resize functionality\n  useEffect(() => {\n    if (!captionsResizeHandleRef.current) return;\n    \n    const resizeHandle = captionsResizeHandleRef.current;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Find the active captions section\n      const captionsSection = document.querySelector('.active-captions-section');\n      if (!captionsSection) return;\n      \n      // Save initial position and dimensions\n      const startY = e.clientY;\n      const startHeight = captionsSection.offsetHeight;\n      \n      activeResizeRef.current = 'captions';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'captions') return;\n        \n        // Calculate new height\n        const height = startHeight + (moveEvent.clientY - startY);\n        \n        // Apply new height with min constraint\n        if (height > 100) {\n          captionsSection.style.height = `${height}px`;\n          captionsSection.style.maxHeight = `${height}px`;\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      resizeHandle.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [availableLanguages.length]);\n\n  // Handle YouTube link input\n  const handleLinkChange = (e) => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatusWithTimeout('Fetching available languages...'); // No timeout for loading message\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatusWithTimeout('Invalid YouTube URL', 3000);\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async (videoId) => {\n    try {\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Received data:', data);\n      \n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Filter out duplicate transcripts based on language_code\n      const uniqueTranscripts = data.transcripts.filter((transcript, index, self) =>\n        index === self.findIndex(t => t.language_code === transcript.language_code)\n      );\n      \n      // Store the filtered transcript information\n      setAvailableTranscripts(uniqueTranscripts);\n      \n      // Also keep the unique language codes for backward compatibility\n      const languageCodes = uniqueTranscripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} unique languages:`, languageCodes);\n      \n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = uniqueTranscripts.find(t => t.language_code === 'en')?.language_code \n        || (uniqueTranscripts[0]?.language_code || '');\n        \n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: ''\n      });\n      \n      setStatusWithTimeout(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n      \n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n      \n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatusWithTimeout(`Error: ${error.message}`, 5000);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      setStatusWithTimeout('Loading transcripts...'); // No timeout for loading message\n      setLoadingProgress(0);\n      setShowLoadingProgress(true);\n      \n      // Create an array of promises for parallel fetching\n      const fetchPromises = languages.map(async (lang) => {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          \n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            return { lang, error: true };\n          }\n          \n          const data = await response.json();\n          \n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            return { lang, error: true };\n          }\n          \n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          \n          // Update captions immediately as each one loads\n          setCaptions(prev => ({\n            ...prev,\n            [lang]: processedTranscript\n          }));\n\n          // Update loading progress\n          setLoadingProgress(prev => prev + (100 / languages.length));\n          \n          return { lang, transcript: processedTranscript };\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n          return { lang, error: true };\n        }\n      });\n      \n      // Wait for all transcripts to load in parallel\n      const results = await Promise.all(fetchPromises);\n      \n      // Count successful loads\n      const successfulLoads = results.filter(result => !result.error).length;\n      \n      // Update final status with timeout\n      setStatusWithTimeout(`Successfully loaded captions in ${successfulLoads} languages`, 2000);\n      setLoadingProgress(100);\n\n      // Start fade out animation\n      setTimeout(() => {\n        setShowLoadingProgress(false);\n      }, 500);\n      \n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatusWithTimeout(`Error fetching captions: ${error.message}`, 5000); // Show error messages longer\n      setShowLoadingProgress(false);\n    } finally {\n      setTimeout(() => {\n        setIsLoading(false);\n      }, 1000);\n    }\n  };\n\n  // Hightlighting\n  const toggleHighlighting = () => setHighlightingEnabled(!highlightingEnabled);\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = (text) => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n    \n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      \n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      \n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = { ...selectedLanguages };\n    \n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => {\n      // Get existing customization or create new one with defaults\n      const existingCustomization = prev[lang] || {\n        fontFamily: 'Arial / Helvetica',\n        fontSize: 16,\n        fontWeight: 400,\n        textColor: darkMode ? '#FFFFFF' : '#000000',\n        letterSpacing: 0\n      };\n\n      // Create new customization object with updated property\n      const updatedCustomization = {\n        ...existingCustomization,\n        [property]: value\n      };\n\n      // Return new state with updated customization\n      return {\n        ...prev,\n        [lang]: updatedCustomization\n      };\n    });\n  };\n\n  // Get color based on settings\n  const getColor = (type) => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    \n    switch(type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return darkMode ? '#FFFFFF' : '#000000';\n    }\n  };\n\n  // Update formatCaptionText to include highlighting\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    \n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial / Helvetica',\n      fontSize: 16,\n      fontWeight: 400,\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 0\n    };\n\n    // Check if this text is in the highlighted phrases\n    if (highlightingEnabled && highlightedMatches.highlighted_phrases.length > 0) {\n      const matchedPhrase = highlightedMatches.highlighted_phrases.find(\n        ([source, target]) => \n          (lang === selectedLanguages.primary && source.includes(text)) ||\n          (lang === selectedLanguages.secondary && target.includes(text))\n      );\n\n      if (matchedPhrase) {\n        text = lang === selectedLanguages.primary ? matchedPhrase[0] : matchedPhrase[1];\n      }\n    }\n\n    return (\n      <StyledCaptionText \n        text={text} \n        customization={customization} \n        darkMode={darkMode}\n        getColor={getColor}\n      />\n    );\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = (lang) => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    \n    return {\n      fontFamily: getFontFamily(customization.fontFamily || 'Arial / Helvetica'),\n      fontSize: getFontSize(customization.fontSize || 16),\n      fontWeight: getFontWeight(customization.fontWeight || 400),\n      color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: getLetterSpacing(customization.letterSpacing || 0),\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    \n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(\n          caption => currentTime >= caption.start && currentTime <= caption.end\n        );\n        \n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    \n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    \n    let player = null;\n    \n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      \n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    \n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      \n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    \n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n      player = event.target; // Store the player reference\n    }\n    \n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (player && player.getCurrentTime) {\n            setCurrentTime(player.getCurrentTime());\n          }\n          if (player && player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    \n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = (code) => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = (langCode) => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return transcript?.language || langCode;\n  };\n  \n  // Start dragging the caption overlay\n  const handleMouseDown = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    const overlayElement = overlayRef.current;\n    if (!overlayElement) return;\n\n    // Calculate initial position relative to the container\n    const initialX = (e.clientX - rect.left) / rect.width * 100;\n    const initialY = (e.clientY - rect.top) / rect.height * 100;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    \n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n  \n  // Handle mouse move during dragging - Improved for smoother movement\n  const handleMouseMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate current position as percentage of container\n    const currentX = (e.clientX - rect.left) / rect.width * 100;\n    const currentY = (e.clientY - rect.top) / rect.height * 100;\n    \n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n    \n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n    \n    // Update position with smooth transition\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX,\n      y: newY\n    }));\n    \n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n  \n  // Stop dragging with smooth finish\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle touch start for mobile devices - improved for smoother touch interaction\n  const handleTouchStart = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate initial touch position relative to container\n    const initialX = (touch.clientX - rect.left) / rect.width * 100;\n    const initialY = (touch.clientY - rect.top) / rect.height * 100;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, { passive: false });\n    document.addEventListener('touchend', handleTouchEnd);\n    \n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n  \n  // Handle touch move for mobile devices - improved for smoother movement\n  const handleTouchMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate current position as percentage of container\n    const currentX = (touch.clientX - rect.left) / rect.width * 100;\n    const currentY = (touch.clientY - rect.top) / rect.height * 100;\n    \n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n    \n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n    \n    // Update position with smooth transition\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX,\n      y: newY\n    }));\n    \n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n  \n  // Handle touch end for mobile devices - with smooth finish\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n  \n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    \n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = (time) => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n\n  // Handle resize start\n  const handleResizeStart = (e, direction) => {\n    e.stopPropagation(); // Prevent drag event from firing\n    const videoContainer = videoContainerRef.current;\n    const overlay = overlayRef.current;\n    if (!videoContainer || !overlay) return;\n\n    setIsResizing(true);\n    setResizeDirection(direction);\n    \n    // Store initial values\n    resizeStartRef.current = {\n      x: e.clientX,\n      width: overlayPosition.width,\n      containerWidth: videoContainer.getBoundingClientRect().width,\n      direction: direction,\n      initialX: overlayPosition.x // Store initial X position\n    };\n\n    // Add event listeners to document to ensure smooth dragging\n    document.addEventListener('mousemove', handleResize);\n    document.addEventListener('mouseup', handleResizeEnd);\n    \n    // Prevent text selection and default behaviors\n    e.preventDefault();\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize\n  const handleResize = (e) => {\n    if (!isResizing || !resizeStartRef.current) return;\n\n    const { x: startX, width: startWidth, containerWidth, direction, initialX } = resizeStartRef.current;\n    const deltaX = e.clientX - startX;\n    \n    // Calculate width change as percentage\n    const deltaWidth = (deltaX / containerWidth) * 100;\n    \n    // Calculate new width based on resize direction\n    let newWidth;\n    if (direction === 'right') {\n      newWidth = Math.max(20, Math.min(90, startWidth + deltaWidth));\n    } else {\n      newWidth = Math.max(20, Math.min(90, startWidth - deltaWidth));\n    }\n    \n    // If resizing from left, adjust position to maintain right edge position\n    if (direction === 'left') {\n      const currentRight = initialX + (startWidth / 2);\n      const newX = currentRight - (newWidth / 2);\n      setOverlayPosition(prev => ({\n        ...prev,\n        x: Math.max(newWidth / 2, Math.min(100 - newWidth / 2, newX)),\n        width: newWidth\n      }));\n    } else {\n      // Update width only for right resize\n      setOverlayPosition(prev => ({\n        ...prev,\n        width: newWidth\n      }));\n    }\n\n    // Prevent text selection during resize\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize end\n  const handleResizeEnd = () => {\n    if (!isResizing) return;\n    \n    setIsResizing(false);\n    setResizeDirection(null);\n    resizeStartRef.current = null;\n    \n    // Remove event listeners\n    document.removeEventListener('mousemove', handleResize);\n    document.removeEventListener('mouseup', handleResizeEnd);\n  };\n\n  return (\n    <div className={`app-container ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <h1 className=\"app-title\">Caption<span className=\"second-c\">C</span>raft</h1>\n      \n      {/* Fancy Dark Mode Toggle */}\n      <div className=\"dark-mode-toggle\">\n        <label>\n          <input \n            className=\"toggle-checkbox\" \n            type=\"checkbox\" \n            checked={darkMode}\n            onChange={toggleDarkMode}\n          />\n          <div className=\"toggle-slot\">\n            <div className=\"sun-icon-wrapper\">\n              <div className=\"iconify sun-icon\" data-icon=\"feather-sun\" data-inline=\"false\"></div>\n            </div>\n            <div className=\"toggle-button\"></div>\n            <div className=\"moon-icon-wrapper\">\n              <div className=\"iconify moon-icon\" data-icon=\"feather-moon\" data-inline=\"false\"></div>\n            </div>\n          </div>\n        </label>\n      </div>\n      \n      {/* Input Box */}\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={youtubeLink}\n            onChange={handleLinkChange}\n            placeholder=\"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\"\n            className=\"input-field\"\n            aria-label=\"YouTube video URL\"\n          />\n          <button \n            type=\"submit\"\n            className=\"submit-button\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load Video'}\n          </button>\n        </div>\n      </form>\n      \n      {/* Status message */}\n      {showStatus && (\n        <>\n          <div className={`status-message ${statusFadeOut ? 'fade-out' : ''}`} role=\"status\" aria-live=\"polite\">\n            {status}\n          </div>\n          {showLoadingProgress && (\n            <div className={`loading-progress ${loadingProgress === 100 ? 'fade-out' : ''}`}>\n              <div \n                className=\"loading-progress-fill\" \n                style={{ width: `${loadingProgress}%` }}\n              />\n            </div>\n          )}\n        </>\n      )}\n      \n      {videoId && (\n        <div className=\"main-content\">\n          {/* Main Content Area (Video + Captions) */}\n          <div className=\"content-area\">\n            {/* Video Embed Box */}\n            <div className=\"video-container\" ref={videoContainerRef}>\n              <div className=\"video-header\">\n                <div className=\"placement-toggle\">\n                  <div className=\"placement-buttons\">\n                    <button \n                      className={`placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`}\n                      onClick={() => setCaptionPlacement('Below Video')}\n                    >\n                      Below\n                    </button>\n                    <button \n                      className={`placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`}\n                      onClick={() => setCaptionPlacement('Overlay')}\n                    >\n                      Overlay\n                    </button>\n                  </div>\n                </div>\n              </div>\n              <div className=\"video-wrapper\" style={{ paddingTop: '56.25%' }}> {/* 16:9 Aspect Ratio */}\n                {/* YouTube player */}\n                <div id=\"youtube-player\" className=\"video-frame\"></div>\n              </div>\n              \n              {/* Video resize handle */}\n              <div \n                ref={videoResizeHandleRef}\n                className=\"video-resize-handle\" \n                title=\"Drag to resize video\"\n              ></div>\n              \n              {/* Real-time captions overlay - with improved draggable functionality */}\n              {captionPlacement === 'Overlay' && (\n                <div \n                  className={`captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''} ${isResizing ? 'resizing' : ''}`}\n                  style={{\n                    position: 'absolute',\n                    left: `${overlayPosition.x}%`,\n                    top: `${overlayPosition.y}%`,\n                    transform: 'translate(-50%, -50%)',\n                    cursor: overlayPosition.isDragging ? 'grabbing' : 'grab',\n                    transition: overlayPosition.isDragging || isResizing ? 'none' : 'all 0.1s ease-out',\n                    width: `${overlayPosition.width}%`,\n                    minWidth: '200px',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    backgroundColor: darkMode ? 'rgba(0, 0, 0, 0.7)' : 'rgba(255, 255, 255, 0.7)',\n                    backdropFilter: 'blur(8px)',\n                    borderRadius: '8px',\n                    padding: '8px',\n                    boxSizing: 'border-box',\n                    border: '1px solid rgba(255, 255, 255, 0.1)'\n                  }}\n                  ref={overlayRef}\n                  onMouseDown={handleMouseDown}\n                  onTouchStart={handleTouchStart}\n                  tabIndex=\"0\"\n                  role=\"region\"\n                  aria-label=\"Movable captions overlay\"\n                >\n                  {/* Left resize handle */}\n                  <div\n                    className=\"resize-handle resize-handle-left\"\n                    style={{\n                      position: 'absolute',\n                      left: '-8px',\n                      top: 0,\n                      width: '16px',\n                      height: '100%',\n                      cursor: 'ew-resize',\n                      backgroundColor: isResizing && resizeDirection === 'left' ? \n                        'rgba(255, 255, 255, 0.2)' : 'transparent',\n                      borderRadius: '4px 0 0 4px',\n                      zIndex: 10\n                    }}\n                    onMouseDown={(e) => handleResizeStart(e, 'left')}\n                  />\n\n                  {/* Right resize handle */}\n                  <div\n                    className=\"resize-handle resize-handle-right\"\n                    style={{\n                      position: 'absolute',\n                      right: '-8px',\n                      top: 0,\n                      width: '16px',\n                      height: '100%',\n                      cursor: 'ew-resize',\n                      backgroundColor: isResizing && resizeDirection === 'right' ? \n                        'rgba(255, 255, 255, 0.2)' : 'transparent',\n                      borderRadius: '0 4px 4px 0',\n                      zIndex: 10\n                    }}\n                    onMouseDown={(e) => handleResizeStart(e, 'right')}\n                  />\n\n                  {/* Resize indicators - always visible */}\n                  <div\n                    style={{\n                      position: 'absolute',\n                      left: '-4px',\n                      top: '50%',\n                      transform: 'translateY(-50%)',\n                      width: '4px',\n                      height: '24px',\n                      backgroundColor: isResizing && resizeDirection === 'left' ? \n                        'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                      borderRadius: '2px',\n                      pointerEvents: 'none',\n                      transition: 'background-color 0.1s ease'\n                    }}\n                  />\n                  <div\n                    style={{\n                      position: 'absolute',\n                      right: '-4px',\n                      top: '50%',\n                      transform: 'translateY(-50%)',\n                      width: '4px',\n                      height: '24px',\n                      backgroundColor: isResizing && resizeDirection === 'right' ? \n                        'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                      borderRadius: '2px',\n                      pointerEvents: 'none',\n                      transition: 'background-color 0.1s ease'\n                    }}\n                  />\n                  \n                  <div className=\"overlay-drag-instructions\">\n                    Hold to move • Drag edges to resize\n                  </div>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    activeCaptions[lang] && (\n                      <div \n                        key={lang} \n                        className=\"overlay-caption\" \n                        style={{\n                          ...getCaptionStyle(lang),\n                          width: '100%',\n                          textAlign: 'center',\n                          padding: '4px 8px',\n                          whiteSpace: 'pre-wrap',\n                          overflowWrap: 'break-word',\n                          wordWrap: 'break-word',\n                          maxWidth: '100%',\n                          display: 'block',\n                          userSelect: 'none' // Prevent text selection while dragging\n                        }}\n                      >\n                        {formatCaptionText(activeCaptions[lang].text, lang)}\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Captions Display - for Below Video mode only - with reduced spacing */}\n            {captionPlacement === 'Below Video' && \n             availableLanguages.length > 0 && (\n              <div className=\"captions-container closer-to-video\">\n                \n                {/* Current active captions section - all languages together */}\n                <div className={`active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`}>\n                  <button\n                    className=\"toggle-caption-height\"\n                    onClick={toggleCaptionsHeight}\n                    title={captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions'}\n                  >\n                    {captionsHeight === 'normal' ? '↓' : '↑'}\n                  </button>\n                  \n                  {getSelectedLanguagesArray().map(lang => {\n                  // Skip hidden languages\n                  if (hiddenLanguages[lang]) return null;\n                  \n                  return (\n                    <div \n                      key={`active-${lang}`} \n                      className=\"caption-text-container\"\n                      style={{ marginBottom: `${captionSpacing}px` }}\n                    >\n                      <div className=\"caption-content-wrapper\">\n                        {activeCaptions[lang] ? (\n                          <div className=\"caption-text\">\n                            {formatCaptionText(activeCaptions[lang].text, lang)}\n                          </div>\n                        ) : (\n                          <span className=\"no-caption\">   ...</span>\n                        )}\n                        <span className={`language-tag-right ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`}>\n                          {getLanguageName(lang)}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n                </div>\n\n                {/* Caption spacing control */}\n                <div className=\"caption-spacing-control-below\">\n                  <input\n                    type=\"range\"\n                    id=\"caption-spacing-below\"\n                    min=\"-20\"\n                    max=\"40\"\n                    step=\"0.25\"\n                    value={captionSpacing}\n                    onChange={(e) => setCaptionSpacing(Number(e.target.value))}\n                    className=\"spacing-slider-below\"\n                    aria-label=\"Adjust caption spacing\"\n                  />\n                </div>\n                \n                {/* Caption resize handle */}\n                <div \n                  ref={captionsResizeHandleRef}\n                  className=\"resize-handle resize-handle-vertical\" \n                  title=\"Drag to resize captions height\"\n                ></div>\n                \n                {/* Transcripts section - all languages */}\n                <div className=\"transcripts-section\">\n                  <h3 className=\"section-subtitle\">Full Transcripts</h3>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    <div key={`transcript-${lang}`} className=\"language-section\">\n                      <h4 className=\"language-title\">\n                        {getLanguageName(lang)} \n                        {lang === selectedLanguages.primary ? ' (Primary)' : \n                         lang === selectedLanguages.secondary ? ' (Secondary)' : ''}\n                      </h4>\n                      \n                      {/* Full transcript with timestamps */}\n                      <div className=\"captions-content\">\n                        {captions[lang]?.map((caption, index) => (\n                          <div key={index} \n                            className={`caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`}\n                            onClick={() => jumpToTime(caption.start)}\n                            tabIndex=\"0\"\n                            role=\"button\"\n                            aria-label={`Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`}\n                            onKeyDown={(e) => {\n                              if (e.key === 'Enter' || e.key === ' ') {\n                                jumpToTime(caption.start);\n                              }\n                            }}\n                          >\n                            <div className=\"timestamp\">\n                              {Math.floor(caption.start / 60)}:{(caption.start % 60).toFixed(1).padStart(4, '0')} - \n                              {Math.floor(caption.end / 60)}:{(caption.end % 60).toFixed(1).padStart(4, '0')}\n                            </div>\n                            <div className=\"caption-text\">\n                              {formatCaptionText(caption.text, lang)}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Settings Panel - Now with improved toggle */}\n          <div className={`settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`}>\n            <button \n              className=\"settings-toggle\" \n              onClick={toggleSettingsPanel}\n              title={settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\"}\n              aria-expanded={!settingsPanelCollapsed}\n              aria-controls=\"settings-content\"\n            >\n              <span className=\"settings-toggle-icon\">\n                {settingsPanelCollapsed ? '»' : '«'}\n              </span>\n            </button>\n            \n            <div id=\"settings-content\" style={{ display: settingsPanelCollapsed ? 'none' : 'block', width: '100%' }}>\n              <h2 className=\"section-title\">Customize Display</h2>\n              \n              {/* Language Selection */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Select Languages</h3>\n                \n                {/* Primary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"primary-language\">Primary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"primary-language\"\n                      value={selectedLanguages.primary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'primary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      {availableTranscripts.map((transcript, index) => (\n                        <option key={`primary-${transcript.language_code}-${index}`} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n                \n                {/* Secondary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"secondary-language\">Secondary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"secondary-language\"\n                      value={selectedLanguages.secondary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'secondary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      <option value=\"\" key=\"none\">None</option>\n                      {availableTranscripts.map((transcript, index) => (\n                        <option key={`secondary-${transcript.language_code}-${index}`} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Language-specific customization */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Language Customizations</h3>\n                \n                {getSelectedLanguagesArray().map(lang => (\n                  <div key={`customize-${lang}`} className={`language-customization-card ${collapsedLanguages[lang] ? 'collapsed' : ''}`}>\n                    <div \n                      className=\"language-card-header\"\n                      onClick={() => toggleLanguageCollapse(lang)}\n                    >\n                      <div className=\"language-header-content\">\n                        <span className=\"language-name\">{getLanguageName(lang)}</span>\n                        <button\n                          className={`visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`}\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            toggleLanguageVisibility(lang);\n                          }}\n                          title={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                          aria-label={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                        />\n                        {lang === selectedLanguages.primary && <span className=\"language-tag primary\">Primary</span>}\n                        {lang === selectedLanguages.secondary && <span className=\"language-tag secondary\">Secondary</span>}\n                      </div>\n                      <button \n                        className=\"collapse-toggle\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          toggleLanguageCollapse(lang);\n                        }}\n                        aria-label={collapsedLanguages[lang] ? \"Expand language settings\" : \"Collapse language settings\"}\n                      />\n                    </div>\n                    \n                    <div className=\"language-card-content\">\n                      {/* Visibility Toggle */}\n                      <button\n                        className={`visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`}\n                        onClick={() => toggleLanguageVisibility(lang)}\n                        title={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                        aria-label={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                      />\n\n                      {/* Font Selection */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Font</div>\n                        <select \n                          className=\"font-select\"\n                          value={languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica'}\n                          onChange={(e) => updateLanguageCustomization(lang, 'fontFamily', e.target.value)}\n                          style={{ fontFamily: getFontFamily(languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica') }}\n                        >\n                          {[\n                            'Arial / Helvetica',\n                            'Lexend',\n                            'Nunito Sans',\n                            'Chewy',\n                            'Open Sans',\n                            'Verdana',\n                            ...(lang === 'ja' ? ['Shizuru'] : [])\n                          ].map(font => (\n                            <option \n                              key={font} \n                              value={font}\n                              style={{ fontFamily: getFontFamily(font) }}\n                            >\n                              {font}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n\n                      {/* Font Size */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Size</div>\n                        <div className=\"button-group\">\n                          {[\n                            { value: 14, label: 'Small' },\n                            { value: 18, label: 'Medium' },\n                            { value: 24, label: 'Large' }\n                          ].map(size => (\n                            <button\n                              key={size.value}\n                              className={`option-button ${(languageCustomizations[lang]?.fontSize === size.value) ? 'active' : ''}`}\n                              onClick={() => {\n                                const updatedCustomization = {\n                                  ...languageCustomizations[lang],\n                                  fontSize: size.value\n                                };\n                                setLanguageCustomizations(prev => ({\n                                  ...prev,\n                                  [lang]: updatedCustomization\n                                }));\n                              }}\n                            >\n                              {size.label}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Font Weight */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Font Weight</div>\n                        <div className=\"button-group\">\n                          {[\n                            { value: 300, label: 'Light' },\n                            { value: 400, label: 'Regular' },\n                            { value: 700, label: 'Bold' }\n                          ].map(weight => (\n                            <button\n                              key={weight.value}\n                              className={`option-button ${(languageCustomizations[lang]?.fontWeight === weight.value) ? 'active' : ''}`}\n                              onClick={() => {\n                                const updatedCustomization = {\n                                  ...languageCustomizations[lang],\n                                  fontWeight: weight.value\n                                };\n                                setLanguageCustomizations(prev => ({\n                                  ...prev,\n                                  [lang]: updatedCustomization\n                                }));\n                              }}\n                            >\n                              {weight.label}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Character Spacing */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Character Spacing</div>\n                        <div className=\"button-group\">\n                          {[\n                            { value: -1, label: 'Tight' },\n                            { value: 0, label: 'Normal' },\n                            { value: 2, label: 'Wide' }\n                          ].map(spacing => (\n                            <button\n                              key={spacing.value}\n                              className={`option-button ${languageCustomizations[lang]?.letterSpacing === spacing.value ? 'active' : ''}`}\n                              onClick={() => updateLanguageCustomization(lang, 'letterSpacing', spacing.value)}\n                            >\n                              {spacing.label}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Preview Text */}\n                      <div \n                        className=\"preview-text\"\n                        style={getCaptionStyle(lang)}\n                      >\n                        The quick brown fox jumps over the lazy dog.\n                      </div>\n\n                      {/* Action Buttons */}\n                      <div className=\"button-row\">\n                        <button \n                          className=\"action-button secondary\"\n                          onClick={() => {\n                            setLanguageCustomizations(prev => ({\n                              ...prev,\n                              [lang]: {\n                                fontFamily: 'Arial / Helvetica',\n                                fontSize: 16,\n                                fontWeight: 400,\n                                textColor: darkMode ? '#FFFFFF' : '#000000',\n                                letterSpacing: 0\n                              }\n                            }));\n                          }}\n                        >\n                          Reset\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              {/* Keyword Highlighting */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Keyword Highlighting</h3>\n                <div className=\"toggle-container\">\n                  <label>\n                    <input \n                      type=\"checkbox\" \n                      checked={highlightingEnabled} \n                      onChange={toggleHighlighting} \n                    />\n                    Enable Keyword Highlighting\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}