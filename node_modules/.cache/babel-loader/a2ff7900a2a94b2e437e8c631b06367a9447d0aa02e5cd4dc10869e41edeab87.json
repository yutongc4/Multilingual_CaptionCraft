{"ast":null,"code":"var _jsxFileName = \"/Users/arunasrivastava/random/cse482/Multilingual/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// API base URL - change this if your backend is running on a different port/host\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nfunction App() {\n  _s();\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: '',\n    tertiary: ''\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n\n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50,\n    // percentage\n    y: 80,\n    // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0\n  });\n\n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n\n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n\n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n\n  // Overlay ref for dragging\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = url => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[7].length === 11 ? match[7] : null;\n  };\n  const [videoSize, setVideoSize] = useState('medium'); // small, medium, large\n  const [captionsHeight, setCaptionsHeight] = useState('normal'); // normal, expanded\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n\n  // Function to toggle settings panel\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Function to toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Function to change video size\n  const changeVideoSize = size => {\n    setVideoSize(size);\n  };\n\n  // Get video size style based on current setting\n  const getVideoSizeStyle = () => {\n    switch (videoSize) {\n      case 'small':\n        return {\n          paddingTop: '45%'\n        };\n      // Small 16:9\n      case 'large':\n        return {\n          paddingTop: '65%'\n        };\n      // Large 16:9\n      case 'medium':\n      default:\n        return {\n          paddingTop: '56.25%'\n        };\n      // Standard 16:9\n    }\n  };\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]);\n\n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = lang => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n\n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n\n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n\n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = {\n      ...languageCustomizations\n    };\n\n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 'Large',\n          // Updated default: larger font\n          fontWeight: 'bold',\n          // Added default: bold text\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 'normal'\n        };\n      }\n    });\n    setLanguageCustomizations(newLanguageCustomizations);\n  }, [selectedLanguages]);\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = {\n      ...languageCustomizations\n    };\n    Object.keys(updatedCustomizations).forEach(lang => {\n      if (updatedCustomizations[lang].textColor === '#000000' || updatedCustomizations[lang].textColor === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n      }\n    });\n    setLanguageCustomizations(updatedCustomizations);\n  }, [darkMode]);\n\n  // Handle YouTube link input\n  const handleLinkChange = e => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async videoId => {\n    try {\n      var _data$transcripts$fin, _data$transcripts$;\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Received data:', data);\n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n\n      // Store the full transcript information\n      setAvailableTranscripts(data.transcripts);\n\n      // Also keep the language codes for backward compatibility\n      const languageCodes = data.transcripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n\n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = ((_data$transcripts$fin = data.transcripts.find(t => t.language_code === 'en')) === null || _data$transcripts$fin === void 0 ? void 0 : _data$transcripts$fin.language_code) || ((_data$transcripts$ = data.transcripts[0]) === null || _data$transcripts$ === void 0 ? void 0 : _data$transcripts$.language_code) || '';\n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: '',\n        tertiary: ''\n      });\n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n\n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n\n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          const data = await response.json();\n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n\n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = text => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n\n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary, tertiary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = {\n      ...selectedLanguages\n    };\n\n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => ({\n      ...prev,\n      [lang]: {\n        ...prev[lang],\n        [property]: value\n      }\n    }));\n  };\n\n  // Get color based on settings\n  const getColor = type => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    switch (type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return darkMode ? '#FFFFFF' : '#000000';\n    }\n  };\n\n  // Get font size based on settings\n  const getFontSize = sizeOption => {\n    const sizeMap = {\n      'Small': '0.875rem',\n      'Medium': '1rem',\n      'Large': '1.25rem',\n      'X-Large': '1.5rem'\n    };\n    return sizeMap[sizeOption] || '1.25rem'; // Default to Large now\n  };\n\n  // Get font weight based on settings\n  const getFontWeight = weightOption => {\n    return weightOption || 'bold'; // Default to bold now\n  };\n\n  // Get font family based on settings\n  const getFontFamily = fontOption => {\n    const fontMap = {\n      'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n      'Roboto': 'Roboto, Arial, sans-serif',\n      'Open Sans': 'Open Sans, Arial, sans-serif',\n      'Noto Sans': 'Noto Sans, Arial, sans-serif',\n      'Verdana': 'Verdana, Geneva, sans-serif',\n      'Courier New': 'Courier New, monospace',\n      'Consolas': 'Consolas, monospace',\n      'Source Code Pro': 'Source Code Pro, monospace',\n      'Sans Serif': 'Arial, Helvetica, sans-serif',\n      'Serif': 'Georgia, Times, serif',\n      'Monospace': 'Courier New, monospace',\n      'Handwriting': 'Comic Sans MS, cursive'\n    };\n    return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n  };\n\n  // Format caption text with styling for parts of speech (simplified)\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial / Helvetica',\n      fontSize: 'Large',\n      fontWeight: 'bold',\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 'normal'\n    };\n\n    // Define base style for the caption (simplified)\n    let baseStyle = `\n      color: ${darkMode ? '#FFFFFF' : customization.textColor};\n      font-family: ${getFontFamily(customization.fontFamily)};\n      font-size: ${getFontSize(customization.fontSize)};\n      font-weight: ${getFontWeight(customization.fontWeight)};\n      letter-spacing: ${customization.letterSpacing};\n      display: inline-block;\n    `;\n\n    // Replace tagged parts of speech with styled spans\n    const formattedText = text.replace(/<noun>(.*?)<\\/noun>/g, (match, content) => `<span style=\"${baseStyle}; color:${getColor('noun')}; text-decoration:underline;\">${content}</span>`).replace(/<verb>(.*?)<\\/verb>/g, (match, content) => `<span style=\"${baseStyle}; color:${getColor('verb')}; text-decoration:underline;\">${content}</span>`).replace(/<adjective>(.*?)<\\/adjective>/g, (match, content) => `<span style=\"${baseStyle}; color:${getColor('adjective')}; text-decoration:underline;\">${content}</span>`);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      dangerouslySetInnerHTML: {\n        __html: formattedText\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 12\n    }, this);\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = lang => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    return {\n      fontFamily: getFontFamily(customization.fontFamily),\n      fontSize: getFontSize(customization.fontSize),\n      fontWeight: getFontWeight(customization.fontWeight),\n      color: darkMode ? '#FFFFFF' : customization.textColor || '#000000',\n      letterSpacing: customization.letterSpacing || 'normal',\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(caption => currentTime >= caption.start && currentTime <= caption.end);\n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n\n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n\n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = code => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = langCode => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return (transcript === null || transcript === void 0 ? void 0 : transcript.language) || langCode;\n  };\n\n  // Start dragging the caption overlay\n  const handleMouseDown = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n\n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n\n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n\n  // Handle mouse move during dragging - Completely redesigned for immediate, direct movement\n  const handleMouseMove = e => {\n    if (!overlayPosition.isDragging) return;\n\n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate direct position as percentage of container\n    // This immediately places the overlay where the mouse is instead of incremental movement\n    const newX = Math.max(0, Math.min(100, (e.clientX - rect.left) / rect.width * 100));\n    const newY = Math.max(0, Math.min(100, (e.clientY - rect.top) / rect.height * 100));\n\n    // Update position with direct placement for more intuitive movement\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n\n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n\n  // Stop dragging\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle touch start for mobile devices\n  const handleTouchStart = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n\n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', handleTouchEnd);\n\n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n\n  // Handle touch move for mobile devices\n  const handleTouchMove = e => {\n    if (!overlayPosition.isDragging) return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate touch movement delta\n    const deltaX = touch.clientX - overlayPosition.startX;\n    const deltaY = touch.clientY - overlayPosition.startY;\n\n    // Calculate new position in percentage\n    const newX = Math.max(0, Math.min(100, overlayPosition.x + deltaX / rect.width * 100));\n    const newY = Math.max(0, Math.min(100, overlayPosition.y + deltaY / rect.height * 100));\n\n    // Update position and starting points for next movement calculation\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n\n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n\n  // Handle touch end for mobile devices\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n\n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n\n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = time => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"YouTube Multilingual Captions Extractor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 752,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dark-mode-toggle\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"toggle-checkbox\",\n          type: \"checkbox\",\n          checked: darkMode,\n          onChange: toggleDarkMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-slot\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sun-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify sun-icon\",\n              \"data-icon\": \"feather-sun\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 765,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 764,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"toggle-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 767,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"moon-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify moon-icon\",\n              \"data-icon\": \"feather-moon\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 769,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 768,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: youtubeLink,\n          onChange: handleLinkChange,\n          placeholder: \"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\",\n          className: \"input-field\",\n          \"aria-label\": \"YouTube video URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'Load Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 786,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 777,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 776,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-message\",\n      role: \"status\",\n      \"aria-live\": \"polite\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 798,\n      columnNumber: 9\n    }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          ref: videoContainerRef,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 809,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-size-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `size-button ${videoSize === 'small' ? 'active' : ''}`,\n              onClick: () => changeVideoSize('small'),\n              children: \"Small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 812,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `size-button ${videoSize === 'medium' ? 'active' : ''}`,\n              onClick: () => changeVideoSize('medium'),\n              children: \"Medium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 818,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `size-button ${videoSize === 'large' ? 'active' : ''}`,\n              onClick: () => changeVideoSize('large'),\n              children: \"Large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 824,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 811,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              htmlFor: \"caption-placement\",\n              children: \"Caption Placement\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 833,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"caption-placement\",\n              value: captionPlacement,\n              onChange: e => setCaptionPlacement(e.target.value),\n              className: \"settings-select\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Below Video\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 840,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Overlay\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 841,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 834,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 832,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-wrapper\",\n            style: getVideoSizeStyle(),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"youtube-player\",\n              className: \"video-frame\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 847,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 845,\n            columnNumber: 15\n          }, this), captionPlacement === 'Overlay' && /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: overlayRef,\n            className: `captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''}`,\n            style: {\n              position: 'absolute',\n              left: `${overlayPosition.x}%`,\n              top: `${overlayPosition.y}%`,\n              transform: 'translate(-50%, -50%)',\n              cursor: overlayPosition.isDragging ? 'grabbing' : 'grab'\n            },\n            onMouseDown: handleMouseDown,\n            onTouchStart: handleTouchStart,\n            tabIndex: \"0\",\n            role: \"region\",\n            \"aria-label\": \"Movable captions overlay\",\n            onKeyDown: e => {\n              // Arrow key navigation for accessibility\n              const step = 5; // 5% movement steps\n              if (e.key === 'ArrowLeft') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  x: Math.max(0, prev.x - step)\n                }));\n                e.preventDefault();\n              } else if (e.key === 'ArrowRight') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  x: Math.min(100, prev.x + step)\n                }));\n                e.preventDefault();\n              } else if (e.key === 'ArrowUp') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  y: Math.max(0, prev.y - step)\n                }));\n                e.preventDefault();\n              } else if (e.key === 'ArrowDown') {\n                setOverlayPosition(prev => ({\n                  ...prev,\n                  y: Math.min(100, prev.y + step)\n                }));\n                e.preventDefault();\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-drag-instructions\",\n              children: \"Hold and drag to reposition\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 898,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => activeCaptions[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-caption\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-language\",\n                children: [getLanguageName(lang), \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 905,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"overlay-text\",\n                style: getCaptionStyle(lang),\n                children: formatCaptionText(activeCaptions[lang].text, lang)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 908,\n                columnNumber: 25\n              }, this)]\n            }, lang, true, {\n              fileName: _jsxFileName,\n              lineNumber: 904,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 853,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 13\n        }, this), captionPlacement === 'Below Video' && availableLanguages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"captions-container closer-to-video\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"active-captions-section\",\n            children: getSelectedLanguagesArray().map(lang => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"active-caption-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"language-title\",\n                children: [getLanguageName(lang), lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : lang === selectedLanguages.tertiary ? ' (Tertiary)' : '']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 934,\n                columnNumber: 23\n              }, this), activeCaptions[lang] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"caption-text\",\n                style: getCaptionStyle(lang),\n                children: formatCaptionText(activeCaptions[lang].text, lang)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 942,\n                columnNumber: 25\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"no-caption\",\n                children: \"No caption at current timestamp\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 946,\n                columnNumber: 25\n              }, this)]\n            }, `active-${lang}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 930,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 927,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transcripts-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"section-subtitle\",\n              children: \"Full Transcripts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 954,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _captions$lang;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"language-title\",\n                  children: [getLanguageName(lang), lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : lang === selectedLanguages.tertiary ? ' (Tertiary)' : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 958,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"captions-content\",\n                  children: (_captions$lang = captions[lang]) === null || _captions$lang === void 0 ? void 0 : _captions$lang.map((caption, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`,\n                    onClick: () => jumpToTime(caption.start),\n                    tabIndex: \"0\",\n                    role: \"button\",\n                    \"aria-label\": `Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`,\n                    onKeyDown: e => {\n                      if (e.key === 'Enter' || e.key === ' ') {\n                        jumpToTime(caption.start);\n                      }\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"timestamp\",\n                      children: [Math.floor(caption.start / 60), \":\", (caption.start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(caption.end / 60), \":\", (caption.end % 60).toFixed(1).padStart(4, '0')]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 981,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"caption-text\",\n                      style: getCaptionStyle(lang),\n                      children: formatCaptionText(caption.text, lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 985,\n                      columnNumber: 29\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 968,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 966,\n                  columnNumber: 23\n                }, this)]\n              }, `transcript-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 957,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 953,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 924,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 806,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: \"Customize Display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1000,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"settings-title\",\n            children: \"Select Languages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1004,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              htmlFor: \"primary-language\",\n              children: \"Primary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1008,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"primary-language\",\n                value: selectedLanguages.primary,\n                onChange: e => setLanguageRank(e.target.value, 'primary'),\n                className: \"settings-select language-dropdown\",\n                children: availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: transcript.language_code,\n                  children: transcript.language\n                }, transcript.language_code, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1017,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1010,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1009,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1007,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-label\",\n              htmlFor: \"secondary-language\",\n              children: \"Secondary Language\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1027,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-dropdown-container\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"secondary-language\",\n                value: selectedLanguages.secondary,\n                onChange: e => setLanguageRank(e.target.value, 'secondary'),\n                className: \"settings-select language-dropdown\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1035,\n                  columnNumber: 21\n                }, this), availableTranscripts.map(transcript => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: transcript.language_code,\n                  children: transcript.language\n                }, transcript.language_code, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1037,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1029,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1028,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1026,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1003,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"settings-title\",\n            children: \"Language Customizations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1069,\n            columnNumber: 15\n          }, this), getSelectedLanguagesArray().map(lang => {\n            var _languageCustomizatio, _languageCustomizatio2, _languageCustomizatio3, _languageCustomizatio4, _languageCustomizatio5;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-customization-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-card-header\",\n                onClick: () => toggleLanguageCollapse(lang),\n                style: {\n                  cursor: 'pointer'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: getLanguageName(lang)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1077,\n                  columnNumber: 21\n                }, this), lang === selectedLanguages.primary && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"language-tag primary\",\n                  children: \"Primary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1078,\n                  columnNumber: 60\n                }, this), lang === selectedLanguages.secondary && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"language-tag secondary\",\n                  children: \"Secondary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1079,\n                  columnNumber: 62\n                }, this), lang === selectedLanguages.tertiary && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"language-tag tertiary\",\n                  children: \"Tertiary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1080,\n                  columnNumber: 61\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"collapse-icon\",\n                  children: collapsedLanguages[lang] ? '▶' : '▼'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1082,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1073,\n                columnNumber: 19\n              }, this), !collapsedLanguages[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-card-content\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"settings-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"settings-label\",\n                    htmlFor: `font-family-${lang}`,\n                    children: \"Font\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1091,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    id: `font-family-${lang}`,\n                    value: ((_languageCustomizatio = languageCustomizations[lang]) === null || _languageCustomizatio === void 0 ? void 0 : _languageCustomizatio.fontFamily) || 'Arial / Helvetica',\n                    onChange: e => updateLanguageCustomization(lang, 'fontFamily', e.target.value),\n                    className: \"settings-select\",\n                    children: [/*#__PURE__*/_jsxDEV(\"optgroup\", {\n                      label: \"Sans-serif\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Arial / Helvetica\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1099,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Roboto\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1100,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Open Sans\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1101,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Noto Sans\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1102,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Verdana\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1103,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1098,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n                      label: \"Monospace\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Courier New\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1106,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Consolas\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1107,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Source Code Pro\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1108,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1105,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1092,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1090,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"settings-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"settings-label\",\n                    htmlFor: `font-size-${lang}`,\n                    children: \"Size\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1116,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    id: `font-size-${lang}`,\n                    value: ((_languageCustomizatio2 = languageCustomizations[lang]) === null || _languageCustomizatio2 === void 0 ? void 0 : _languageCustomizatio2.fontSize) || 'Large',\n                    onChange: e => updateLanguageCustomization(lang, 'fontSize', e.target.value),\n                    className: \"settings-select\",\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      children: \"Small\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1123,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      children: \"Medium\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1124,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      children: \"Large\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1125,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      children: \"X-Large\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1126,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1117,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1115,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"settings-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"settings-label\",\n                    htmlFor: `font-weight-${lang}`,\n                    children: \"Font Weight\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1132,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    id: `font-weight-${lang}`,\n                    value: ((_languageCustomizatio3 = languageCustomizations[lang]) === null || _languageCustomizatio3 === void 0 ? void 0 : _languageCustomizatio3.fontWeight) || 'bold',\n                    onChange: e => updateLanguageCustomization(lang, 'fontWeight', e.target.value),\n                    className: \"settings-select\",\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"normal\",\n                      children: \"Normal\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1139,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"bold\",\n                      children: \"Bold\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1140,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"600\",\n                      children: \"Semi-Bold\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1141,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"300\",\n                      children: \"Light\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1142,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1133,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1131,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"settings-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"settings-label\",\n                    htmlFor: `text-color-${lang}`,\n                    children: \"Color\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1148,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    id: `text-color-${lang}`,\n                    value: ((_languageCustomizatio4 = languageCustomizations[lang]) === null || _languageCustomizatio4 === void 0 ? void 0 : _languageCustomizatio4.textColor) || '#000000',\n                    onChange: e => updateLanguageCustomization(lang, 'textColor', e.target.value),\n                    className: \"settings-select\",\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"#000000\",\n                      children: \"Black\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1155,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"#FFFFFF\",\n                      children: \"White\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1156,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"#333333\",\n                      children: \"Dark Gray\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1157,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"#1A1AFF\",\n                      children: \"Dark Blue\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1158,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1149,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1147,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"settings-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"settings-label\",\n                    htmlFor: `letter-spacing-${lang}`,\n                    children: \"Character Spacing\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1164,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    id: `letter-spacing-${lang}`,\n                    value: ((_languageCustomizatio5 = languageCustomizations[lang]) === null || _languageCustomizatio5 === void 0 ? void 0 : _languageCustomizatio5.letterSpacing) || 'normal',\n                    onChange: e => updateLanguageCustomization(lang, 'letterSpacing', e.target.value),\n                    className: \"settings-select\",\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"normal\",\n                      children: \"Normal\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1171,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"0.05em\",\n                      children: \"Slightly Expanded\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1172,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"0.1em\",\n                      children: \"Expanded\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1173,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"-0.03em\",\n                      children: \"Condensed\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1174,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1165,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1163,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"reset-button\",\n                  onClick: () => {\n                    // Reset this language's customizations to new defaults with larger, bolder text\n                    setLanguageCustomizations(prev => ({\n                      ...prev,\n                      [lang]: {\n                        fontFamily: 'Arial / Helvetica',\n                        fontSize: 'Large',\n                        // Updated from Medium to Large\n                        fontWeight: 'bold',\n                        // New default\n                        textColor: darkMode ? '#FFFFFF' : '#000000',\n                        letterSpacing: 'normal'\n                      }\n                    }));\n                  },\n                  \"aria-label\": `Reset customization for ${getLanguageName(lang)}`,\n                  children: \"Reset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1178,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1088,\n                columnNumber: 19\n              }, this)]\n            }, `customize-${lang}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1072,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1068,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 999,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 804,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 751,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RuIbgytFNQnElyU1H2DI7e9Nvmw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","youtubeLink","setYoutubeLink","videoId","setVideoId","captions","setCaptions","selectedLanguages","setSelectedLanguages","primary","secondary","tertiary","availableLanguages","setAvailableLanguages","availableTranscripts","setAvailableTranscripts","status","setStatus","isLoading","setIsLoading","currentTime","setCurrentTime","activeCaptions","setActiveCaptions","collapsedLanguages","setCollapsedLanguages","captionPlacement","setCaptionPlacement","overlayPosition","setOverlayPosition","x","y","isDragging","startX","startY","nounColor","setNounColor","verbColor","setVerbColor","adjectiveColor","setAdjectiveColor","languageCustomizations","setLanguageCustomizations","darkMode","setDarkMode","overlayRef","videoContainerRef","extractVideoId","url","regExp","match","length","videoSize","setVideoSize","captionsHeight","setCaptionsHeight","settingsPanelCollapsed","setSettingsPanelCollapsed","toggleSettingsPanel","toggleCaptionsHeight","changeVideoSize","size","getVideoSizeStyle","paddingTop","initialCollapsedState","getSelectedLanguagesArray","forEach","lang","toggleLanguageCollapse","prev","id","window","matchMedia","matches","document","body","classList","add","mediaQuery","handleChange","e","remove","Iconify","script","createElement","src","async","appendChild","addEventListener","removeEventListener","iconifyScript","querySelector","head","contains","removeChild","addListener","removeListener","newLanguageCustomizations","Object","values","fontFamily","fontSize","fontWeight","textColor","letterSpacing","updatedCustomizations","keys","handleLinkChange","target","value","handleSubmit","preventDefault","fetchAvailableLanguages","_data$transcripts$fin","_data$transcripts$","console","log","response","fetch","ok","errorText","text","error","Error","data","json","transcripts","languageCodes","map","t","language_code","defaultPrimary","find","fetchCaptions","message","languages","captionsData","warn","processedTranscript","transcript","caption","applyPOSTagging","end","start","duration","commonNouns","commonVerbs","commonAdjectives","words","split","taggedText","i","originalWord","word","toLowerCase","replace","includes","setLanguageRank","rank","updatedLanguages","key","updateLanguageCustomization","property","getColor","type","colorMap","getFontSize","sizeOption","sizeMap","getFontWeight","weightOption","getFontFamily","fontOption","fontMap","formatCaptionText","customization","baseStyle","formattedText","content","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","filter","getCaptionStyle","isRTL","color","backgroundColor","direction","newActiveCaptions","activeCaption","interval","setInterval","YT","Player","player","getCurrentTime","clearInterval","tag","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","createYouTubePlayer","destroy","events","onPlayerReady","onPlayerStateChange","event","PlayerState","PLAYING","updateTime","getPlayerState","requestAnimationFrame","findTranscriptByLanguageCode","code","getLanguageName","langCode","language","handleMouseDown","videoContainer","current","rect","getBoundingClientRect","clientX","clientY","handleMouseMove","handleMouseUp","newX","Math","max","min","left","width","newY","top","height","getSelection","removeAllRanges","handleTouchStart","touch","touches","handleTouchMove","passive","handleTouchEnd","deltaX","deltaY","toggleDarkMode","jumpToTime","time","seekTo","playVideo","className","children","checked","onChange","onSubmit","placeholder","disabled","role","ref","onClick","htmlFor","style","position","transform","cursor","onMouseDown","onTouchStart","tabIndex","onKeyDown","step","_captions$lang","index","floor","toFixed","padStart","_languageCustomizatio","_languageCustomizatio2","_languageCustomizatio3","_languageCustomizatio4","_languageCustomizatio5","label","_c","$RefreshReg$"],"sources":["/Users/arunasrivastava/random/cse482/Multilingual/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// API base URL - change this if your backend is running on a different port/host\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n\nfunction App() {\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=D9Ihs241zeg');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: '',\n    tertiary: ''\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  \n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50, // percentage\n    y: 80, // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0\n  });\n  \n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  \n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n  \n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n  \n  // Overlay ref for dragging\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = (url) => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[7].length === 11) ? match[7] : null;\n  };\n\n  const [videoSize, setVideoSize] = useState('medium'); // small, medium, large\n  const [captionsHeight, setCaptionsHeight] = useState('normal'); // normal, expanded\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n\n  // Function to toggle settings panel\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Function to toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Function to change video size\n  const changeVideoSize = (size) => {\n    setVideoSize(size);\n  };\n\n  // Get video size style based on current setting\n  const getVideoSizeStyle = () => {\n    switch (videoSize) {\n      case 'small':\n        return { paddingTop: '45%' }; // Small 16:9\n      case 'large':\n        return { paddingTop: '65%' }; // Large 16:9\n      case 'medium':\n      default:\n        return { paddingTop: '56.25%' }; // Standard 16:9\n    }\n  };\n\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]); \n\n  \n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = (lang) => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n    \n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n    \n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e) => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n    \n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    \n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = { ...languageCustomizations };\n    \n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 'Large', // Updated default: larger font\n          fontWeight: 'bold', // Added default: bold text\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 'normal'\n        };\n      }\n    });\n    \n    setLanguageCustomizations(newLanguageCustomizations);\n  }, [selectedLanguages]);\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = { ...languageCustomizations };\n    \n    Object.keys(updatedCustomizations).forEach(lang => {\n      if (updatedCustomizations[lang].textColor === '#000000' || updatedCustomizations[lang].textColor === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n      }\n    });\n    \n    setLanguageCustomizations(updatedCustomizations);\n  }, [darkMode]);\n\n  // Handle YouTube link input\n  const handleLinkChange = (e) => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async (videoId) => {\n    try {\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Received data:', data);\n      \n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Store the full transcript information\n      setAvailableTranscripts(data.transcripts);\n      \n      // Also keep the language codes for backward compatibility\n      const languageCodes = data.transcripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} languages:`, languageCodes);\n      \n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = data.transcripts.find(t => t.language_code === 'en')?.language_code \n        || (data.transcripts[0]?.language_code || '');\n        \n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: '',\n        tertiary: ''\n      });\n      \n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n      \n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n      \n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      const captionsData = {};\n      \n      // For each language, fetch the transcript\n      for (const lang of languages) {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          \n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            continue;\n          }\n          \n          const data = await response.json();\n          \n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            continue;\n          }\n          \n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          \n          captionsData[lang] = processedTranscript;\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n        }\n      }\n      \n      setCaptions(captionsData);\n      setStatus(`Successfully loaded captions in ${Object.keys(captionsData).length} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = (text) => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n    \n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      \n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      \n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary, tertiary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = { ...selectedLanguages };\n    \n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => ({\n      ...prev,\n      [lang]: {\n        ...prev[lang],\n        [property]: value\n      }\n    }));\n  };\n\n  // Get color based on settings\n  const getColor = (type) => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    \n    switch(type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return darkMode ? '#FFFFFF' : '#000000';\n    }\n  };\n\n  // Get font size based on settings\n  const getFontSize = (sizeOption) => {\n    const sizeMap = {\n      'Small': '0.875rem',\n      'Medium': '1rem',\n      'Large': '1.25rem',\n      'X-Large': '1.5rem'\n    };\n    \n    return sizeMap[sizeOption] || '1.25rem'; // Default to Large now\n  };\n\n  // Get font weight based on settings\n  const getFontWeight = (weightOption) => {\n    return weightOption || 'bold'; // Default to bold now\n  };\n\n  // Get font family based on settings\n  const getFontFamily = (fontOption) => {\n    const fontMap = {\n      'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n      'Roboto': 'Roboto, Arial, sans-serif',\n      'Open Sans': 'Open Sans, Arial, sans-serif',\n      'Noto Sans': 'Noto Sans, Arial, sans-serif',\n      'Verdana': 'Verdana, Geneva, sans-serif',\n      'Courier New': 'Courier New, monospace',\n      'Consolas': 'Consolas, monospace',\n      'Source Code Pro': 'Source Code Pro, monospace',\n      'Sans Serif': 'Arial, Helvetica, sans-serif',\n      'Serif': 'Georgia, Times, serif',\n      'Monospace': 'Courier New, monospace',\n      'Handwriting': 'Comic Sans MS, cursive'\n    };\n    \n    return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n  };\n\n  // Format caption text with styling for parts of speech (simplified)\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    \n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial / Helvetica',\n      fontSize: 'Large',\n      fontWeight: 'bold',\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 'normal'\n    };\n\n    // Define base style for the caption (simplified)\n    let baseStyle = `\n      color: ${darkMode ? '#FFFFFF' : customization.textColor};\n      font-family: ${getFontFamily(customization.fontFamily)};\n      font-size: ${getFontSize(customization.fontSize)};\n      font-weight: ${getFontWeight(customization.fontWeight)};\n      letter-spacing: ${customization.letterSpacing};\n      display: inline-block;\n    `;\n    \n    // Replace tagged parts of speech with styled spans\n    const formattedText = text\n      .replace(/<noun>(.*?)<\\/noun>/g, (match, content) => \n        `<span style=\"${baseStyle}; color:${getColor('noun')}; text-decoration:underline;\">${content}</span>`)\n      .replace(/<verb>(.*?)<\\/verb>/g, (match, content) => \n        `<span style=\"${baseStyle}; color:${getColor('verb')}; text-decoration:underline;\">${content}</span>`)\n      .replace(/<adjective>(.*?)<\\/adjective>/g, (match, content) => \n        `<span style=\"${baseStyle}; color:${getColor('adjective')}; text-decoration:underline;\">${content}</span>`);\n    \n    return <span dangerouslySetInnerHTML={{ __html: formattedText }} />;\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = (lang) => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    \n    return {\n      fontFamily: getFontFamily(customization.fontFamily),\n      fontSize: getFontSize(customization.fontSize),\n      fontWeight: getFontWeight(customization.fontWeight),\n      color: darkMode ? '#FFFFFF' : (customization.textColor || '#000000'),\n      letterSpacing: customization.letterSpacing || 'normal',\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    \n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(\n          caption => currentTime >= caption.start && currentTime <= caption.end\n        );\n        \n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    \n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Set up a timer to update the current time regularly\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const interval = setInterval(() => {\n      // If we have access to the YouTube iframe, get the current time\n      if (window.YT && window.YT.Player && window.player) {\n        try {\n          const currentTime = window.player.getCurrentTime();\n          if (currentTime) {\n            setCurrentTime(currentTime);\n          }\n        } catch (error) {\n          console.error('Error getting video time:', error);\n        }\n      }\n    }, 500); // Check every 500ms\n    \n    return () => clearInterval(interval);\n  }, [videoId]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    \n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      \n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    \n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      \n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    \n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n    }\n    \n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (window.player && window.player.getCurrentTime) {\n            setCurrentTime(window.player.getCurrentTime());\n          }\n          if (window.player && window.player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    \n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = (code) => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = (langCode) => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return transcript?.language || langCode;\n  };\n  \n  // Start dragging the caption overlay\n  const handleMouseDown = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n    \n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    \n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n  \n  // Handle mouse move during dragging - Completely redesigned for immediate, direct movement\n  const handleMouseMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate direct position as percentage of container\n    // This immediately places the overlay where the mouse is instead of incremental movement\n    const newX = Math.max(0, Math.min(100, ((e.clientX - rect.left) / rect.width) * 100));\n    const newY = Math.max(0, Math.min(100, ((e.clientY - rect.top) / rect.height) * 100));\n    \n    // Update position with direct placement for more intuitive movement\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX, \n      y: newY,\n      startX: e.clientX,\n      startY: e.clientY\n    }));\n    \n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n  \n  // Stop dragging\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({ ...prev, isDragging: false }));\n    \n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n  \n  // Handle touch start for mobile devices\n  const handleTouchStart = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n    \n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, { passive: false });\n    document.addEventListener('touchend', handleTouchEnd);\n    \n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n  \n  // Handle touch move for mobile devices\n  const handleTouchMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate touch movement delta\n    const deltaX = touch.clientX - overlayPosition.startX;\n    const deltaY = touch.clientY - overlayPosition.startY;\n    \n    // Calculate new position in percentage\n    const newX = Math.max(0, Math.min(100, overlayPosition.x + (deltaX / rect.width) * 100));\n    const newY = Math.max(0, Math.min(100, overlayPosition.y + (deltaY / rect.height) * 100));\n    \n    // Update position and starting points for next movement calculation\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX, \n      y: newY,\n      startX: touch.clientX,\n      startY: touch.clientY\n    }));\n    \n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n  \n  // Handle touch end for mobile devices\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({ ...prev, isDragging: false }));\n    \n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n  \n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    \n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = (time) => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n\n  return (\n    <div className={`app-container ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <h1 className=\"app-title\">YouTube Multilingual Captions Extractor</h1>\n      \n      {/* Fancy Dark Mode Toggle */}\n      <div className=\"dark-mode-toggle\">\n        <label>\n          <input \n            className=\"toggle-checkbox\" \n            type=\"checkbox\" \n            checked={darkMode}\n            onChange={toggleDarkMode}\n          />\n          <div className=\"toggle-slot\">\n            <div className=\"sun-icon-wrapper\">\n              <div className=\"iconify sun-icon\" data-icon=\"feather-sun\" data-inline=\"false\"></div>\n            </div>\n            <div className=\"toggle-button\"></div>\n            <div className=\"moon-icon-wrapper\">\n              <div className=\"iconify moon-icon\" data-icon=\"feather-moon\" data-inline=\"false\"></div>\n            </div>\n          </div>\n        </label>\n      </div>\n      \n      {/* Input Box */}\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={youtubeLink}\n            onChange={handleLinkChange}\n            placeholder=\"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\"\n            className=\"input-field\"\n            aria-label=\"YouTube video URL\"\n          />\n          <button \n            type=\"submit\"\n            className=\"submit-button\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load Video'}\n          </button>\n        </div>\n      </form>\n      \n      {/* Status message */}\n      {status && (\n        <div className=\"status-message\" role=\"status\" aria-live=\"polite\">\n          {status}\n        </div>\n      )}\n      \n      {videoId && (\n        <div className=\"main-content\">\n          {/* Main Content Area (Video + Captions) */}\n          <div className=\"content-area\">\n            {/* Video Embed Box */}\n            <div className=\"video-container\" ref={videoContainerRef}>\n              <h2 className=\"section-title\">Video</h2>\n                {/* Video Size Controls */}\n              <div className=\"video-size-controls\">\n                <button \n                  className={`size-button ${videoSize === 'small' ? 'active' : ''}`}\n                  onClick={() => changeVideoSize('small')}\n                >\n                  Small\n                </button>\n                <button \n                  className={`size-button ${videoSize === 'medium' ? 'active' : ''}`}\n                  onClick={() => changeVideoSize('medium')}\n                >\n                  Medium\n                </button>\n                <button \n                  className={`size-button ${videoSize === 'large' ? 'active' : ''}`}\n                  onClick={() => changeVideoSize('large')}\n                >\n                  Large\n                </button>\n              </div>\n              \n              <div className=\"settings-item\">\n                <label className=\"settings-label\" htmlFor=\"caption-placement\">Caption Placement</label>\n                <select \n                  id=\"caption-placement\"\n                  value={captionPlacement} \n                  onChange={(e) => setCaptionPlacement(e.target.value)}\n                  className=\"settings-select\"\n                >\n                  <option>Below Video</option>\n                  <option>Overlay</option>\n                </select>\n              </div>\n              \n              <div className=\"video-wrapper\" style={getVideoSizeStyle()}>\n                {/* YouTube player */}\n                <div id=\"youtube-player\" className=\"video-frame\"></div>\n              \n            </div>\n              \n              {/* Real-time captions overlay - with improved draggable functionality */}\n              {captionPlacement === 'Overlay' && (\n                <div \n                  ref={overlayRef}\n                  className={`captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''}`}\n                  style={{\n                    position: 'absolute',\n                    left: `${overlayPosition.x}%`,\n                    top: `${overlayPosition.y}%`,\n                    transform: 'translate(-50%, -50%)',\n                    cursor: overlayPosition.isDragging ? 'grabbing' : 'grab'\n                  }}\n                  onMouseDown={handleMouseDown}\n                  onTouchStart={handleTouchStart}\n                  tabIndex=\"0\"\n                  role=\"region\"\n                  aria-label=\"Movable captions overlay\"\n                  onKeyDown={(e) => {\n                    // Arrow key navigation for accessibility\n                    const step = 5; // 5% movement steps\n                    if (e.key === 'ArrowLeft') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        x: Math.max(0, prev.x - step)\n                      }));\n                      e.preventDefault();\n                    } else if (e.key === 'ArrowRight') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        x: Math.min(100, prev.x + step)\n                      }));\n                      e.preventDefault();\n                    } else if (e.key === 'ArrowUp') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        y: Math.max(0, prev.y - step)\n                      }));\n                      e.preventDefault();\n                    } else if (e.key === 'ArrowDown') {\n                      setOverlayPosition(prev => ({\n                        ...prev,\n                        y: Math.min(100, prev.y + step)\n                      }));\n                      e.preventDefault();\n                    }\n                  }}\n                >\n                  <div className=\"overlay-drag-instructions\">\n                    Hold and drag to reposition\n                  </div>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    activeCaptions[lang] && (\n                      <div key={lang} className=\"overlay-caption\">\n                        <span className=\"overlay-language\">\n                          {getLanguageName(lang)}:\n                        </span>\n                        <span \n                          className=\"overlay-text\"\n                          style={getCaptionStyle(lang)}\n                        >\n                          {formatCaptionText(activeCaptions[lang].text, lang)}\n                        </span>\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Captions Display - for Below Video mode only - with reduced spacing */}\n            {captionPlacement === 'Below Video' && \n             availableLanguages.length > 0 && (\n              <div className=\"captions-container closer-to-video\">\n                \n                {/* Current active captions section - all languages together */}\n                <div className=\"active-captions-section\">\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    <div \n                      key={`active-${lang}`} \n                      className=\"active-caption-display\"\n                    >\n                      <h4 className=\"language-title\">\n                        {getLanguageName(lang)} \n                        {lang === selectedLanguages.primary ? ' (Primary)' : \n                         lang === selectedLanguages.secondary ? ' (Secondary)' : \n                         lang === selectedLanguages.tertiary ? ' (Tertiary)' : ''}\n                      </h4>\n                      \n                      {activeCaptions[lang] ? (\n                        <div className=\"caption-text\" style={getCaptionStyle(lang)}>\n                          {formatCaptionText(activeCaptions[lang].text, lang)}\n                        </div>\n                      ) : (\n                        <span className=\"no-caption\">No caption at current timestamp</span>\n                      )}\n                    </div>\n                  ))}\n                </div>\n                \n                {/* Transcripts section - all languages */}\n                <div className=\"transcripts-section\">\n                  <h3 className=\"section-subtitle\">Full Transcripts</h3>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    <div key={`transcript-${lang}`} className=\"language-section\">\n                      <h4 className=\"language-title\">\n                        {getLanguageName(lang)} \n                        {lang === selectedLanguages.primary ? ' (Primary)' : \n                         lang === selectedLanguages.secondary ? ' (Secondary)' : \n                         lang === selectedLanguages.tertiary ? ' (Tertiary)' : ''}\n                      </h4>\n                      \n                      {/* Full transcript with timestamps */}\n                      <div className=\"captions-content\">\n                        {captions[lang]?.map((caption, index) => (\n                          <div \n                            key={index} \n                            className={`caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`}\n                            onClick={() => jumpToTime(caption.start)}\n                            tabIndex=\"0\"\n                            role=\"button\"\n                            aria-label={`Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`}\n                            onKeyDown={(e) => {\n                              if (e.key === 'Enter' || e.key === ' ') {\n                                jumpToTime(caption.start);\n                              }\n                            }}\n                          >\n                            <div className=\"timestamp\">\n                              {Math.floor(caption.start / 60)}:{(caption.start % 60).toFixed(1).padStart(4, '0')} - \n                              {Math.floor(caption.end / 60)}:{(caption.end % 60).toFixed(1).padStart(4, '0')}\n                            </div>\n                            <div className=\"caption-text\" style={getCaptionStyle(lang)}>\n                              {formatCaptionText(caption.text, lang)}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Settings Panel */}\n          <div className=\"settings-panel\">\n            <h2 className=\"section-title\">Customize Display</h2>\n            \n            {/* Language Selection */}\n            <div className=\"settings-section\">\n              <h3 className=\"settings-title\">Select Languages</h3>\n              \n              {/* Primary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\" htmlFor=\"primary-language\">Primary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    id=\"primary-language\"\n                    value={selectedLanguages.primary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'primary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    {availableTranscripts.map(transcript => (\n                      <option key={transcript.language_code} value={transcript.language_code}>\n                        {transcript.language}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              \n              {/* Secondary Language Dropdown */}\n              <div className=\"language-selection-item\">\n                <label className=\"settings-label\" htmlFor=\"secondary-language\">Secondary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    id=\"secondary-language\"\n                    value={selectedLanguages.secondary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'secondary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    <option value=\"\">None</option>\n                    {availableTranscripts.map(transcript => (\n                      <option key={transcript.language_code} value={transcript.language_code}>\n                        {transcript.language}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              \n              {/* Tertiary Language Dropdown */}\n              {/* <div className=\"language-selection-item\">\n                <label className=\"settings-label\" htmlFor=\"tertiary-language\">Tertiary Language</label>\n                <div className=\"language-dropdown-container\">\n                  <select \n                    id=\"tertiary-language\"\n                    value={selectedLanguages.tertiary} \n                    onChange={(e) => setLanguageRank(e.target.value, 'tertiary')}\n                    className=\"settings-select language-dropdown\"\n                  >\n                    <option value=\"\">None</option>\n                    {availableTranscripts.map(transcript => (\n                      <option key={transcript.language_code} value={transcript.language_code}>\n                        {transcript.language}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div> */}\n            </div>\n            \n            \n            {/* Language-specific customization */}\n            <div className=\"settings-section\">\n              <h3 className=\"settings-title\">Language Customizations</h3>\n              \n              {getSelectedLanguagesArray().map(lang => (\n                <div key={`customize-${lang}`} className=\"language-customization-card\">\n                  <div className=\"language-card-header\"\n                  onClick={() => toggleLanguageCollapse(lang)}\n                  style={{ cursor: 'pointer' }}\n                  >\n                    <span>{getLanguageName(lang)}</span>\n                    {lang === selectedLanguages.primary && <span className=\"language-tag primary\">Primary</span>}\n                    {lang === selectedLanguages.secondary && <span className=\"language-tag secondary\">Secondary</span>}\n                    {lang === selectedLanguages.tertiary && <span className=\"language-tag tertiary\">Tertiary</span>}\n                    {/* Collapse/Expand icon */}\n                    <span className=\"collapse-icon\">\n                      {collapsedLanguages[lang] ? '▶' : '▼'}\n                    </span>\n                  </div>\n\n                  {!collapsedLanguages[lang] && (   \n                  <div className=\"language-card-content\">\n                    {/* Font Type */}\n                    <div className=\"settings-item\">\n                      <label className=\"settings-label\" htmlFor={`font-family-${lang}`}>Font</label>\n                      <select \n                        id={`font-family-${lang}`}\n                        value={languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica'} \n                        onChange={(e) => updateLanguageCustomization(lang, 'fontFamily', e.target.value)}\n                        className=\"settings-select\"\n                      >\n                        <optgroup label=\"Sans-serif\">\n                          <option>Arial / Helvetica</option>\n                          <option>Roboto</option>\n                          <option>Open Sans</option>\n                          <option>Noto Sans</option>\n                          <option>Verdana</option>\n                        </optgroup>\n                        <optgroup label=\"Monospace\">\n                          <option>Courier New</option>\n                          <option>Consolas</option>\n                          <option>Source Code Pro</option>\n                        </optgroup>\n                      </select>\n                    </div>\n\n                    \n                    {/* Font Size */}\n                    <div className=\"settings-item\">\n                      <label className=\"settings-label\" htmlFor={`font-size-${lang}`}>Size</label>\n                      <select \n                        id={`font-size-${lang}`}\n                        value={languageCustomizations[lang]?.fontSize || 'Large'} \n                        onChange={(e) => updateLanguageCustomization(lang, 'fontSize', e.target.value)}\n                        className=\"settings-select\"\n                      >\n                        <option>Small</option>\n                        <option>Medium</option>\n                        <option>Large</option>\n                        <option>X-Large</option>\n                      </select>\n                    </div>\n                    \n                    {/* Font Weight */}\n                    <div className=\"settings-item\">\n                      <label className=\"settings-label\" htmlFor={`font-weight-${lang}`}>Font Weight</label>\n                      <select \n                        id={`font-weight-${lang}`}\n                        value={languageCustomizations[lang]?.fontWeight || 'bold'} \n                        onChange={(e) => updateLanguageCustomization(lang, 'fontWeight', e.target.value)}\n                        className=\"settings-select\"\n                      >\n                        <option value=\"normal\">Normal</option>\n                        <option value=\"bold\">Bold</option>\n                        <option value=\"600\">Semi-Bold</option>\n                        <option value=\"300\">Light</option>\n                      </select>\n                    </div>\n                    \n                    {/* Text Color */}\n                    <div className=\"settings-item\">\n                      <label className=\"settings-label\" htmlFor={`text-color-${lang}`}>Color</label>\n                      <select \n                        id={`text-color-${lang}`}\n                        value={languageCustomizations[lang]?.textColor || '#000000'} \n                        onChange={(e) => updateLanguageCustomization(lang, 'textColor', e.target.value)}\n                        className=\"settings-select\"\n                      >\n                        <option value=\"#000000\">Black</option>\n                        <option value=\"#FFFFFF\">White</option>\n                        <option value=\"#333333\">Dark Gray</option>\n                        <option value=\"#1A1AFF\">Dark Blue</option>\n                      </select>\n                    </div>\n                    \n                    {/* Character Spacing */}\n                    <div className=\"settings-item\">\n                      <label className=\"settings-label\" htmlFor={`letter-spacing-${lang}`}>Character Spacing</label>\n                      <select \n                        id={`letter-spacing-${lang}`}\n                        value={languageCustomizations[lang]?.letterSpacing || 'normal'} \n                        onChange={(e) => updateLanguageCustomization(lang, 'letterSpacing', e.target.value)}\n                        className=\"settings-select\"\n                      >\n                        <option value=\"normal\">Normal</option>\n                        <option value=\"0.05em\">Slightly Expanded</option>\n                        <option value=\"0.1em\">Expanded</option>\n                        <option value=\"-0.03em\">Condensed</option>\n                      </select>\n                    </div>\n                    \n                    <button \n                      className=\"reset-button\"\n                      onClick={() => {\n                        // Reset this language's customizations to new defaults with larger, bolder text\n                        setLanguageCustomizations(prev => ({\n                          ...prev,\n                          [lang]: {\n                            fontFamily: 'Arial / Helvetica',\n                            fontSize: 'Large', // Updated from Medium to Large\n                            fontWeight: 'bold', // New default\n                            textColor: darkMode ? '#FFFFFF' : '#000000',\n                            letterSpacing: 'normal'\n                          }\n                        }));\n                      }}\n                      aria-label={`Reset customization for ${getLanguageName(lang)}`}\n                    >\n                      Reset\n                    </button>\n                  </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            \n            \n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}