{"ast":null,"code":"var _jsxFileName = \"/homes/iws/yc888/Multilingual/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst extractKeywords = async text => {\n  try {\n    const response = await fetch('/extract_keywords', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    if (!response.ok) throw new Error('Failed to extract keywords');\n    const data = await response.json();\n    setKeywords(data.keywords.map(item => item[0])); // Take only the keyword, ignore the score\n  } catch (error) {\n    console.error('Failed to extract keywords:', error);\n  }\n};\n\n// Update this component (around line 5-89 in your code)\n// Fixed StyledCaptionText component\nconst StyledCaptionText = ({\n  text,\n  customization,\n  darkMode,\n  getColor\n}) => {\n  // Font styles from customization\n  const fontStyles = {\n    fontFamily: getFontFamily(customization.fontFamily),\n    fontSize: getFontSize(customization.fontSize),\n    fontWeight: getFontWeight(customization.fontWeight),\n    color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n    letterSpacing: getLetterSpacing(customization.letterSpacing),\n    lineHeight: '1.4',\n    display: 'inline-block'\n  };\n\n  // Process the text to identify tagged parts\n  const processText = input => {\n    if (!input) return [];\n    const segments = [];\n    let currentIndex = 0;\n\n    // Regular expression to find tags\n    const tagRegex = /<(noun|verb|adjective)>(.*?)<\\/\\1>/g;\n    let match;\n\n    // Find all tag matches\n    while ((match = tagRegex.exec(input)) !== null) {\n      // If there's text before the match, add it as plain text\n      if (match.index > currentIndex) {\n        segments.push({\n          type: 'text',\n          content: input.substring(currentIndex, match.index)\n        });\n      }\n\n      // Add the tagged content\n      segments.push({\n        type: match[1],\n        // noun, verb, or adjective\n        content: match[2] // the content inside the tags\n      });\n\n      // Update the current index\n      currentIndex = match.index + match[0].length;\n    }\n\n    // Add any remaining text after the last match\n    if (currentIndex < input.length) {\n      segments.push({\n        type: 'text',\n        content: input.substring(currentIndex)\n      });\n    }\n    return segments;\n  };\n\n  // Parse text into segments\n  const segments = processText(text);\n\n  // Main render function - completely pure React approach\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: fontStyles,\n    children: segments.map((segment, index) => {\n      if (segment.type === 'text') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 18\n        }, this);\n      } else if (segment.type === 'noun') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: getColor('noun'),\n            textDecoration: 'underline'\n          },\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this);\n      } else if (segment.type === 'verb') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: getColor('verb'),\n            textDecoration: 'underline'\n          },\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this);\n      } else if (segment.type === 'adjective') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: getColor('adjective'),\n            textDecoration: 'underline'\n          },\n          children: segment.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this);\n      }\n      return null;\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n// API base URL - change this if your backend is running on a different port/host\n_c = StyledCaptionText;\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n// Get font size based on settings - now supports numeric values\nconst getFontSize = sizeValue => {\n  if (typeof sizeValue === 'number') {\n    return `${sizeValue}px`;\n  }\n  const sizeMap = {\n    'Small': '14px',\n    'Medium': '16px',\n    'Large': '20px',\n    'X-Large': '24px'\n  };\n  return sizeMap[sizeValue] || '16px';\n};\n\n// Get font weight based on settings - now supports numeric values\nconst getFontWeight = weightValue => {\n  if (typeof weightValue === 'number') {\n    return weightValue.toString();\n  }\n  const weightMap = {\n    'Light': '300',\n    'Regular': '400',\n    'Bold': '700'\n  };\n  return weightMap[weightValue] || '400';\n};\n\n// Get letter spacing based on settings - now supports numeric values\nconst getLetterSpacing = spacingValue => {\n  if (typeof spacingValue === 'number') {\n    return `${spacingValue}px`;\n  }\n  return spacingValue || 'normal';\n};\n\n// Get font family based on settings\nconst getFontFamily = fontOption => {\n  const fontMap = {\n    'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n    'Roboto': 'Roboto, Arial, sans-serif',\n    'Open Sans': 'Open Sans, Arial, sans-serif',\n    'Verdana': 'Verdana, Geneva, sans-serif'\n  };\n  return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n};\nfunction App() {\n  _s();\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=zy2Zj8yIe6c');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n    // tertiary language removed\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n\n  // Add missing hiddenLanguages state\n  const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n\n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50,\n    // percentage\n    y: 80,\n    // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0,\n    lastX: 0,\n    lastY: 0,\n    width: 40 // percentage\n  });\n\n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  const [keywordColor, setKeywordColor] = useState('#FF5733'); // Default color for keywords\n\n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n\n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n\n  // New state for UI enhancements\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n  const [captionsHeight, setCaptionsHeight] = useState('normal');\n\n  // New state for caption spacing\n  const [captionSpacing, setCaptionSpacing] = useState(10); // Default 10px spacing\n\n  // Refs\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const videoResizeHandleRef = useRef(null);\n  const captionsResizeHandleRef = useRef(null);\n  const activeResizeRef = useRef(null);\n\n  // Add new state for resize handling\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeDirection, setResizeDirection] = useState(null);\n  const resizeStartRef = useRef(null);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = url => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[7].length === 11 ? match[7] : null;\n  };\n\n  // Toggle settings panel collapse\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]);\n\n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = lang => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n\n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n\n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n\n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = {\n      ...languageCustomizations\n    };\n    let hasChanges = false;\n\n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 16,\n          fontWeight: 400,\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 0\n        };\n        hasChanges = true;\n      }\n    });\n\n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(newLanguageCustomizations);\n    }\n  }, [selectedLanguages]);\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = {\n      ...languageCustomizations\n    };\n    let hasChanges = false;\n    Object.keys(updatedCustomizations).forEach(lang => {\n      var _updatedCustomization, _updatedCustomization2;\n      if (((_updatedCustomization = updatedCustomizations[lang]) === null || _updatedCustomization === void 0 ? void 0 : _updatedCustomization.textColor) === '#000000' || ((_updatedCustomization2 = updatedCustomizations[lang]) === null || _updatedCustomization2 === void 0 ? void 0 : _updatedCustomization2.textColor) === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n        hasChanges = true;\n      }\n    });\n\n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(updatedCustomizations);\n    }\n  }, [darkMode]);\n\n  // Add this function to toggle language visibility\n  const toggleLanguageVisibility = lang => {\n    setHiddenLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Set up video container resize functionality\n  useEffect(() => {\n    if (!videoId) return;\n    const videoContainer = videoContainerRef.current;\n    const resizeHandle = videoResizeHandleRef.current;\n    if (!videoContainer || !resizeHandle) return;\n    const handleMouseDown = e => {\n      e.preventDefault();\n\n      // Save initial position and dimensions\n      const startX = e.clientX;\n      const startWidth = videoContainer.offsetWidth;\n      activeResizeRef.current = 'video';\n      const handleMouseMove = moveEvent => {\n        if (activeResizeRef.current !== 'video') return;\n\n        // Calculate new width based on mouse movement\n        const deltaX = moveEvent.clientX - startX;\n        const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n\n        // Set width\n        videoContainer.style.width = `${newWidth}px`;\n\n        // Update the video wrapper's padding-top to maintain aspect ratio\n        const videoWrapper = videoContainer.querySelector('.video-wrapper');\n        if (videoWrapper) {\n          // No need to explicitly set height - padding-top maintains ratio\n          videoWrapper.style.paddingTop = `${9 / 16 * 100}%`; // Keep 16:9 ratio\n        }\n        moveEvent.preventDefault();\n      };\n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    return () => {\n      if (resizeHandle) {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      }\n    };\n  }, [videoId]);\n\n  // Set up captions container resize functionality\n  useEffect(() => {\n    if (!captionsResizeHandleRef.current) return;\n    const resizeHandle = captionsResizeHandleRef.current;\n    const handleMouseDown = e => {\n      e.preventDefault();\n\n      // Find the active captions section\n      const captionsSection = document.querySelector('.active-captions-section');\n      if (!captionsSection) return;\n\n      // Save initial position and dimensions\n      const startY = e.clientY;\n      const startHeight = captionsSection.offsetHeight;\n      activeResizeRef.current = 'captions';\n      const handleMouseMove = moveEvent => {\n        if (activeResizeRef.current !== 'captions') return;\n\n        // Calculate new height\n        const height = startHeight + (moveEvent.clientY - startY);\n\n        // Apply new height with min constraint\n        if (height > 100) {\n          captionsSection.style.height = `${height}px`;\n          captionsSection.style.maxHeight = `${height}px`;\n        }\n        moveEvent.preventDefault();\n      };\n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    return () => {\n      resizeHandle.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [availableLanguages.length]);\n\n  // Handle YouTube link input\n  const handleLinkChange = e => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async videoId => {\n    try {\n      var _uniqueTranscripts$fi, _uniqueTranscripts$;\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Received data:', data);\n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n\n      // Filter out duplicate transcripts based on language_code\n      const uniqueTranscripts = data.transcripts.filter((transcript, index, self) => index === self.findIndex(t => t.language_code === transcript.language_code));\n\n      // Store the filtered transcript information\n      setAvailableTranscripts(uniqueTranscripts);\n\n      // Also keep the unique language codes for backward compatibility\n      const languageCodes = uniqueTranscripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} unique languages:`, languageCodes);\n\n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = ((_uniqueTranscripts$fi = uniqueTranscripts.find(t => t.language_code === 'en')) === null || _uniqueTranscripts$fi === void 0 ? void 0 : _uniqueTranscripts$fi.language_code) || ((_uniqueTranscripts$ = uniqueTranscripts[0]) === null || _uniqueTranscripts$ === void 0 ? void 0 : _uniqueTranscripts$.language_code) || '';\n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: ''\n      });\n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n\n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      setStatus(`Loading transcripts (0/${languages.length})...`);\n\n      // Create an array of promises for parallel fetching\n      const fetchPromises = languages.map(async lang => {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            return {\n              lang,\n              error: true\n            };\n          }\n          const data = await response.json();\n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            return {\n              lang,\n              error: true\n            };\n          }\n\n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n\n          // Update captions immediately as each one loads\n          setCaptions(prev => ({\n            ...prev,\n            [lang]: processedTranscript\n          }));\n\n          // Update status with progress\n          setStatus(prevStatus => {\n            var _prevStatus$match;\n            const loadedCount = ((_prevStatus$match = prevStatus.match(/\\d+/)) === null || _prevStatus$match === void 0 ? void 0 : _prevStatus$match[0]) || 0;\n            return `Loading transcripts (${Number(loadedCount) + 1}/${languages.length})...`;\n          });\n          return {\n            lang,\n            transcript: processedTranscript\n          };\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n          return {\n            lang,\n            error: true\n          };\n        }\n      });\n\n      // Wait for all transcripts to load in parallel\n      const results = await Promise.all(fetchPromises);\n\n      // Count successful loads\n      const successfulLoads = results.filter(result => !result.error).length;\n\n      // Update final status\n      setStatus(`Successfully loaded captions in ${successfulLoads} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = text => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n\n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = {\n      ...selectedLanguages\n    };\n\n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => {\n      // Get existing customization or create new one with defaults\n      const existingCustomization = prev[lang] || {\n        fontFamily: 'Arial / Helvetica',\n        fontSize: 16,\n        fontWeight: 400,\n        textColor: darkMode ? '#FFFFFF' : '#000000',\n        letterSpacing: 0\n      };\n\n      // Create new customization object with updated property\n      const updatedCustomization = {\n        ...existingCustomization,\n        [property]: value\n      };\n\n      // Return new state with updated customization\n      return {\n        ...prev,\n        [lang]: updatedCustomization\n      };\n    });\n  };\n\n  // Get color based on settings\n  const getColor = type => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    switch (type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return darkMode ? '#FFFFFF' : '#000000';\n    }\n  };\n\n  // Format caption text using new StyledCaptionText component\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n\n    // Get the language's customization settings, or create default ones if none exist\n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial / Helvetica',\n      fontSize: 16,\n      fontWeight: 400,\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 0\n    };\n\n    // Ensure all required properties exist\n    const fullCustomization = {\n      ...customization,\n      fontFamily: customization.fontFamily || 'Arial / Helvetica',\n      fontSize: customization.fontSize || 16,\n      fontWeight: customization.fontWeight || 400,\n      textColor: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: customization.letterSpacing || 0\n    };\n    return /*#__PURE__*/_jsxDEV(StyledCaptionText, {\n      text: text,\n      customization: fullCustomization,\n      darkMode: darkMode,\n      getColor: getColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 766,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = lang => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    return {\n      fontFamily: getFontFamily(customization.fontFamily || 'Arial / Helvetica'),\n      fontSize: getFontSize(customization.fontSize || 16),\n      fontWeight: getFontWeight(customization.fontWeight || 400),\n      color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: getLetterSpacing(customization.letterSpacing || 0),\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(caption => currentTime >= caption.start && currentTime <= caption.end);\n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    let player = null;\n\n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n      player = event.target; // Store the player reference\n    }\n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (player && player.getCurrentTime) {\n            setCurrentTime(player.getCurrentTime());\n          }\n          if (player && player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = code => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = langCode => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return (transcript === null || transcript === void 0 ? void 0 : transcript.language) || langCode;\n  };\n\n  // Start dragging the caption overlay\n  const handleMouseDown = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n    const overlayElement = overlayRef.current;\n    if (!overlayElement) return;\n\n    // Calculate initial position relative to the container\n    const initialX = (e.clientX - rect.left) / rect.width * 100;\n    const initialY = (e.clientY - rect.top) / rect.height * 100;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n\n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n\n  // Handle mouse move during dragging - Improved for smoother movement\n  const handleMouseMove = e => {\n    if (!overlayPosition.isDragging) return;\n\n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate current position as percentage of container\n    const currentX = (e.clientX - rect.left) / rect.width * 100;\n    const currentY = (e.clientY - rect.top) / rect.height * 100;\n\n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n\n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n\n    // Update position with smooth transition\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY\n    }));\n\n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n\n  // Stop dragging with smooth finish\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle touch start for mobile devices - improved for smoother touch interaction\n  const handleTouchStart = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate initial touch position relative to container\n    const initialX = (touch.clientX - rect.left) / rect.width * 100;\n    const initialY = (touch.clientY - rect.top) / rect.height * 100;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', handleTouchEnd);\n\n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n\n  // Handle touch move for mobile devices - improved for smoother movement\n  const handleTouchMove = e => {\n    if (!overlayPosition.isDragging) return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate current position as percentage of container\n    const currentX = (touch.clientX - rect.left) / rect.width * 100;\n    const currentY = (touch.clientY - rect.top) / rect.height * 100;\n\n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n\n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n\n    // Update position with smooth transition\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY\n    }));\n\n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n\n  // Handle touch end for mobile devices - with smooth finish\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n\n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n\n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = time => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n\n  // Handle resize start\n  const handleResizeStart = (e, direction) => {\n    e.stopPropagation(); // Prevent drag event from firing\n    const videoContainer = videoContainerRef.current;\n    const overlay = overlayRef.current;\n    if (!videoContainer || !overlay) return;\n    setIsResizing(true);\n    setResizeDirection(direction);\n\n    // Store initial values\n    resizeStartRef.current = {\n      x: e.clientX,\n      width: overlayPosition.width,\n      containerWidth: videoContainer.getBoundingClientRect().width,\n      direction: direction,\n      initialX: overlayPosition.x // Store initial X position\n    };\n\n    // Add event listeners to document to ensure smooth dragging\n    document.addEventListener('mousemove', handleResize);\n    document.addEventListener('mouseup', handleResizeEnd);\n\n    // Prevent text selection and default behaviors\n    e.preventDefault();\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize\n  const handleResize = e => {\n    if (!isResizing || !resizeStartRef.current) return;\n    const {\n      x: startX,\n      width: startWidth,\n      containerWidth,\n      direction,\n      initialX\n    } = resizeStartRef.current;\n    const deltaX = e.clientX - startX;\n\n    // Calculate width change as percentage\n    const deltaWidth = deltaX / containerWidth * 100;\n\n    // Calculate new width based on resize direction\n    let newWidth;\n    if (direction === 'right') {\n      newWidth = Math.max(20, Math.min(90, startWidth + deltaWidth));\n    } else {\n      newWidth = Math.max(20, Math.min(90, startWidth - deltaWidth));\n    }\n\n    // If resizing from left, adjust position to maintain right edge position\n    if (direction === 'left') {\n      const currentRight = initialX + startWidth / 2;\n      const newX = currentRight - newWidth / 2;\n      setOverlayPosition(prev => ({\n        ...prev,\n        x: Math.max(newWidth / 2, Math.min(100 - newWidth / 2, newX)),\n        width: newWidth\n      }));\n    } else {\n      // Update width only for right resize\n      setOverlayPosition(prev => ({\n        ...prev,\n        width: newWidth\n      }));\n    }\n\n    // Prevent text selection during resize\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize end\n  const handleResizeEnd = () => {\n    if (!isResizing) return;\n    setIsResizing(false);\n    setResizeDirection(null);\n    resizeStartRef.current = null;\n\n    // Remove event listeners\n    document.removeEventListener('mousemove', handleResize);\n    document.removeEventListener('mouseup', handleResizeEnd);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"YouTube Multilingual Captions Extractor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dark-mode-toggle\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"toggle-checkbox\",\n          type: \"checkbox\",\n          checked: darkMode,\n          onChange: toggleDarkMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-slot\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sun-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify sun-icon\",\n              \"data-icon\": \"feather-sun\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1159,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"toggle-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"moon-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify moon-icon\",\n              \"data-icon\": \"feather-moon\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1163,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1162,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: youtubeLink,\n          onChange: handleLinkChange,\n          placeholder: \"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\",\n          className: \"input-field\",\n          \"aria-label\": \"YouTube video URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'Load Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1171,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1170,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-message\",\n      role: \"status\",\n      \"aria-live\": \"polite\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1192,\n      columnNumber: 9\n    }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          ref: videoContainerRef,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-header\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"placement-toggle\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"placement-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`,\n                  onClick: () => setCaptionPlacement('Below Video'),\n                  children: \"Below\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1206,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`,\n                  onClick: () => setCaptionPlacement('Overlay'),\n                  children: \"Overlay\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1212,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1205,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1204,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1203,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-wrapper\",\n            style: {\n              paddingTop: '56.25%'\n            },\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"youtube-player\",\n              className: \"video-frame\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1223,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1221,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: videoResizeHandleRef,\n            className: \"video-resize-handle\",\n            title: \"Drag to resize video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1227,\n            columnNumber: 15\n          }, this), captionPlacement === 'Overlay' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''} ${isResizing ? 'resizing' : ''}`,\n            style: {\n              position: 'absolute',\n              left: `${overlayPosition.x}%`,\n              top: `${overlayPosition.y}%`,\n              transform: 'translate(-50%, -50%)',\n              cursor: overlayPosition.isDragging ? 'grabbing' : 'grab',\n              transition: overlayPosition.isDragging || isResizing ? 'none' : 'all 0.1s ease-out',\n              width: `${overlayPosition.width}%`,\n              minWidth: '200px',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              backgroundColor: darkMode ? 'rgba(0, 0, 0, 0.7)' : 'rgba(255, 255, 255, 0.7)',\n              backdropFilter: 'blur(8px)',\n              borderRadius: '8px',\n              padding: '8px',\n              boxSizing: 'border-box',\n              border: '1px solid rgba(255, 255, 255, 0.1)'\n            },\n            ref: overlayRef,\n            onMouseDown: handleMouseDown,\n            onTouchStart: handleTouchStart,\n            tabIndex: \"0\",\n            role: \"region\",\n            \"aria-label\": \"Movable captions overlay\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"resize-handle resize-handle-left\",\n              style: {\n                position: 'absolute',\n                left: '-8px',\n                top: 0,\n                width: '16px',\n                height: '100%',\n                cursor: 'ew-resize',\n                backgroundColor: isResizing && resizeDirection === 'left' ? 'rgba(255, 255, 255, 0.2)' : 'transparent',\n                borderRadius: '4px 0 0 4px',\n                zIndex: 10\n              },\n              onMouseDown: e => handleResizeStart(e, 'left')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1264,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"resize-handle resize-handle-right\",\n              style: {\n                position: 'absolute',\n                right: '-8px',\n                top: 0,\n                width: '16px',\n                height: '100%',\n                cursor: 'ew-resize',\n                backgroundColor: isResizing && resizeDirection === 'right' ? 'rgba(255, 255, 255, 0.2)' : 'transparent',\n                borderRadius: '0 4px 4px 0',\n                zIndex: 10\n              },\n              onMouseDown: e => handleResizeStart(e, 'right')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1282,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: 'absolute',\n                left: '-4px',\n                top: '50%',\n                transform: 'translateY(-50%)',\n                width: '4px',\n                height: '24px',\n                backgroundColor: isResizing && resizeDirection === 'left' ? 'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                borderRadius: '2px',\n                pointerEvents: 'none',\n                transition: 'background-color 0.1s ease'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1300,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: 'absolute',\n                right: '-4px',\n                top: '50%',\n                transform: 'translateY(-50%)',\n                width: '4px',\n                height: '24px',\n                backgroundColor: isResizing && resizeDirection === 'right' ? 'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                borderRadius: '2px',\n                pointerEvents: 'none',\n                transition: 'background-color 0.1s ease'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1315,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-drag-instructions\",\n              children: \"Hold to move \\u2022 Drag edges to resize\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1331,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => activeCaptions[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-caption\",\n              style: {\n                ...getCaptionStyle(lang),\n                width: '100%',\n                textAlign: 'center',\n                padding: '4px 8px',\n                whiteSpace: 'pre-wrap',\n                overflowWrap: 'break-word',\n                wordWrap: 'break-word',\n                maxWidth: '100%',\n                display: 'block',\n                userSelect: 'none' // Prevent text selection while dragging\n              },\n              children: formatCaptionText(activeCaptions[lang].text, lang)\n            }, lang, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1337,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1235,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1202,\n          columnNumber: 13\n        }, this), captionPlacement === 'Below Video' && availableLanguages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"captions-container closer-to-video\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"toggle-caption-height\",\n              onClick: toggleCaptionsHeight,\n              title: captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions',\n              children: captionsHeight === 'normal' ? '↓' : '↑'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1368,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              // Skip hidden languages\n              if (hiddenLanguages[lang]) return null;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"caption-text-container\",\n                style: {\n                  marginBottom: `${captionSpacing}px`\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"caption-content-wrapper\",\n                  children: [activeCaptions[lang] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"caption-text\",\n                    children: formatCaptionText(activeCaptions[lang].text, lang)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1388,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"no-caption\",\n                    children: \"   ...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1392,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `language-tag-right ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`,\n                    children: getLanguageName(lang)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1394,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1386,\n                  columnNumber: 23\n                }, this)\n              }, `active-${lang}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1381,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1367,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"caption-spacing-control-below\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              id: \"caption-spacing-below\",\n              min: \"-20\",\n              max: \"40\",\n              step: \"0.25\",\n              value: captionSpacing,\n              onChange: e => setCaptionSpacing(Number(e.target.value)),\n              className: \"spacing-slider-below\",\n              \"aria-label\": \"Adjust caption spacing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1405,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1404,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: captionsResizeHandleRef,\n            className: \"resize-handle resize-handle-vertical\",\n            title: \"Drag to resize captions height\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1419,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transcripts-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"section-subtitle\",\n              children: \"Full Transcripts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1427,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _captions$lang;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"language-title\",\n                  children: [getLanguageName(lang), lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1431,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"captions-content\",\n                  children: (_captions$lang = captions[lang]) === null || _captions$lang === void 0 ? void 0 : _captions$lang.map((caption, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`,\n                    onClick: () => jumpToTime(caption.start),\n                    tabIndex: \"0\",\n                    role: \"button\",\n                    \"aria-label\": `Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`,\n                    onKeyDown: e => {\n                      if (e.key === 'Enter' || e.key === ' ') {\n                        jumpToTime(caption.start);\n                      }\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"timestamp\",\n                      children: [Math.floor(caption.start / 60), \":\", (caption.start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(caption.end / 60), \":\", (caption.end % 60).toFixed(1).padStart(4, '0')]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1452,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"caption-text\",\n                      children: formatCaptionText(caption.text, lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1456,\n                      columnNumber: 29\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1440,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1438,\n                  columnNumber: 23\n                }, this)]\n              }, `transcript-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1430,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1426,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1364,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1200,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"settings-toggle\",\n          onClick: toggleSettingsPanel,\n          title: settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\",\n          \"aria-expanded\": !settingsPanelCollapsed,\n          \"aria-controls\": \"settings-content\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"settings-toggle-icon\",\n            children: settingsPanelCollapsed ? '»' : '«'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1478,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1471,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"settings-content\",\n          style: {\n            display: settingsPanelCollapsed ? 'none' : 'block',\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Customize Display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1484,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Select Languages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1488,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"primary-language\",\n                children: \"Primary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1492,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"primary-language\",\n                  value: selectedLanguages.primary,\n                  onChange: e => setLanguageRank(e.target.value, 'primary'),\n                  className: \"settings-select language-dropdown\",\n                  children: availableTranscripts.map((transcript, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, `primary-${transcript.language_code}-${index}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1501,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1494,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1493,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1491,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"secondary-language\",\n                children: \"Secondary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1511,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"secondary-language\",\n                  value: selectedLanguages.secondary,\n                  onChange: e => setLanguageRank(e.target.value, 'secondary'),\n                  className: \"settings-select language-dropdown\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"None\"\n                  }, \"none\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1519,\n                    columnNumber: 23\n                  }, this), availableTranscripts.map((transcript, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, `secondary-${transcript.language_code}-${index}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1521,\n                    columnNumber: 25\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1513,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1512,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1510,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1487,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Language Customizations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1532,\n              columnNumber: 17\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _languageCustomizatio, _languageCustomizatio2;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `language-customization-card ${collapsedLanguages[lang] ? 'collapsed' : ''}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-header\",\n                  onClick: () => toggleLanguageCollapse(lang),\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"language-header-content\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-name\",\n                      children: getLanguageName(lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1541,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: `visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`,\n                      onClick: e => {\n                        e.stopPropagation();\n                        toggleLanguageVisibility(lang);\n                      },\n                      title: hiddenLanguages[lang] ? 'Show Language' : 'Hide Language',\n                      \"aria-label\": hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1542,\n                      columnNumber: 25\n                    }, this), lang === selectedLanguages.primary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag primary\",\n                      children: \"Primary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1551,\n                      columnNumber: 64\n                    }, this), lang === selectedLanguages.secondary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag secondary\",\n                      children: \"Secondary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1552,\n                      columnNumber: 66\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1540,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"collapse-toggle\",\n                    onClick: e => {\n                      e.stopPropagation();\n                      toggleLanguageCollapse(lang);\n                    },\n                    \"aria-label\": collapsedLanguages[lang] ? \"Expand language settings\" : \"Collapse language settings\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1554,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1536,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-content\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: `visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`,\n                    onClick: () => toggleLanguageVisibility(lang),\n                    title: hiddenLanguages[lang] ? 'Show Language' : 'Hide Language',\n                    \"aria-label\": hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1566,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Font\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1575,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      className: \"font-select\",\n                      value: ((_languageCustomizatio = languageCustomizations[lang]) === null || _languageCustomizatio === void 0 ? void 0 : _languageCustomizatio.fontFamily) || 'Arial / Helvetica',\n                      onChange: e => updateLanguageCustomization(lang, 'fontFamily', e.target.value),\n                      style: {\n                        fontFamily: getFontFamily(((_languageCustomizatio2 = languageCustomizations[lang]) === null || _languageCustomizatio2 === void 0 ? void 0 : _languageCustomizatio2.fontFamily) || 'Arial / Helvetica')\n                      },\n                      children: ['Arial / Helvetica', 'Roboto', 'Open Sans', 'Verdana'].map(font => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: font,\n                        style: {\n                          fontFamily: getFontFamily(font)\n                        },\n                        children: font\n                      }, font, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1583,\n                        columnNumber: 29\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1576,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1574,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Size\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1596,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"button-group\",\n                      children: [{\n                        value: 14,\n                        label: 'Small'\n                      }, {\n                        value: 18,\n                        label: 'Medium'\n                      }, {\n                        value: 24,\n                        label: 'Large'\n                      }].map(size => {\n                        var _languageCustomizatio3;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: `option-button ${((_languageCustomizatio3 = languageCustomizations[lang]) === null || _languageCustomizatio3 === void 0 ? void 0 : _languageCustomizatio3.fontSize) === size.value ? 'active' : ''}`,\n                          onClick: () => {\n                            const updatedCustomization = {\n                              ...languageCustomizations[lang],\n                              fontSize: size.value\n                            };\n                            setLanguageCustomizations(prev => ({\n                              ...prev,\n                              [lang]: updatedCustomization\n                            }));\n                          },\n                          children: size.label\n                        }, size.value, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1603,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1597,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1595,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Font Weight\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1625,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"button-group\",\n                      children: [{\n                        value: 300,\n                        label: 'Light'\n                      }, {\n                        value: 400,\n                        label: 'Regular'\n                      }, {\n                        value: 700,\n                        label: 'Bold'\n                      }].map(weight => {\n                        var _languageCustomizatio4;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: `option-button ${((_languageCustomizatio4 = languageCustomizations[lang]) === null || _languageCustomizatio4 === void 0 ? void 0 : _languageCustomizatio4.fontWeight) === weight.value ? 'active' : ''}`,\n                          onClick: () => {\n                            const updatedCustomization = {\n                              ...languageCustomizations[lang],\n                              fontWeight: weight.value\n                            };\n                            setLanguageCustomizations(prev => ({\n                              ...prev,\n                              [lang]: updatedCustomization\n                            }));\n                          },\n                          children: weight.label\n                        }, weight.value, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1632,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1626,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1624,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Color\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1654,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"color-options\",\n                      children: ['#000000',\n                      // Black - for light mode\n                      '#FFFFFF',\n                      // White - for dark mode\n                      '#0052CC',\n                      // Accessible blue\n                      '#2E7D32' // Accessible green\n                      ].map(color => {\n                        var _languageCustomizatio5;\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: `color-option ${((_languageCustomizatio5 = languageCustomizations[lang]) === null || _languageCustomizatio5 === void 0 ? void 0 : _languageCustomizatio5.textColor) === color ? 'active' : ''}`,\n                          style: {\n                            backgroundColor: color\n                          },\n                          onClick: () => updateLanguageCustomization(lang, 'textColor', color)\n                        }, color, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1662,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1655,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1653,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Character Spacing\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1674,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"button-group\",\n                      children: [{\n                        value: -1,\n                        label: 'Tight'\n                      }, {\n                        value: 0,\n                        label: 'Normal'\n                      }, {\n                        value: 2,\n                        label: 'Wide'\n                      }].map(spacing => {\n                        var _languageCustomizatio6;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: `option-button ${((_languageCustomizatio6 = languageCustomizations[lang]) === null || _languageCustomizatio6 === void 0 ? void 0 : _languageCustomizatio6.letterSpacing) === spacing.value ? 'active' : ''}`,\n                          onClick: () => updateLanguageCustomization(lang, 'letterSpacing', spacing.value),\n                          children: spacing.label\n                        }, spacing.value, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1681,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1675,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1673,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"preview-text\",\n                    style: getCaptionStyle(lang),\n                    children: \"The quick brown fox jumps over the lazy dog.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1693,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"button-row\",\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"action-button secondary\",\n                      onClick: () => {\n                        setLanguageCustomizations(prev => ({\n                          ...prev,\n                          [lang]: {\n                            fontFamily: 'Arial / Helvetica',\n                            fontSize: 16,\n                            fontWeight: 400,\n                            textColor: darkMode ? '#FFFFFF' : '#000000',\n                            letterSpacing: 0\n                          }\n                        }));\n                      },\n                      children: \"Reset\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1702,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1701,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1564,\n                  columnNumber: 21\n                }, this)]\n              }, `customize-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1535,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1531,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Keywords Highlighting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1727,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pos-color-controls\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"keyword-color\",\n                  value: keywordColor,\n                  onChange: e => setKeywordColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"#FF5733\",\n                    children: \"Orange Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1736,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"#007bff\",\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1737,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"#28a745\",\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1738,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"#ffc107\",\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1739,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"#6f42c1\",\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1740,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1730,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1729,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1728,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1726,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1483,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1470,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1198,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1145,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bkeISdDCTiRumXLFtXZVMPB1WZI=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledCaptionText\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","extractKeywords","text","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","setKeywords","keywords","map","item","error","console","StyledCaptionText","customization","darkMode","getColor","fontStyles","fontFamily","getFontFamily","fontSize","getFontSize","fontWeight","getFontWeight","color","textColor","letterSpacing","getLetterSpacing","lineHeight","display","processText","input","segments","currentIndex","tagRegex","match","exec","index","push","type","content","substring","length","style","children","segment","fileName","_jsxFileName","lineNumber","columnNumber","textDecoration","_c","API_BASE_URL","sizeValue","sizeMap","weightValue","toString","weightMap","spacingValue","fontOption","fontMap","App","_s","youtubeLink","setYoutubeLink","videoId","setVideoId","captions","setCaptions","selectedLanguages","setSelectedLanguages","primary","secondary","availableLanguages","setAvailableLanguages","availableTranscripts","setAvailableTranscripts","status","setStatus","isLoading","setIsLoading","currentTime","setCurrentTime","activeCaptions","setActiveCaptions","collapsedLanguages","setCollapsedLanguages","hiddenLanguages","setHiddenLanguages","captionPlacement","setCaptionPlacement","overlayPosition","setOverlayPosition","x","y","isDragging","startX","startY","lastX","lastY","width","nounColor","setNounColor","verbColor","setVerbColor","adjectiveColor","setAdjectiveColor","keywordColor","setKeywordColor","languageCustomizations","setLanguageCustomizations","setDarkMode","settingsPanelCollapsed","setSettingsPanelCollapsed","captionsHeight","setCaptionsHeight","captionSpacing","setCaptionSpacing","overlayRef","videoContainerRef","videoResizeHandleRef","captionsResizeHandleRef","activeResizeRef","isResizing","setIsResizing","resizeDirection","setResizeDirection","resizeStartRef","extractVideoId","url","regExp","toggleSettingsPanel","toggleCaptionsHeight","getSelectedLanguagesArray","Object","values","filter","lang","initialCollapsedState","forEach","toggleLanguageCollapse","prev","id","window","matchMedia","matches","document","classList","add","mediaQuery","handleChange","e","remove","Iconify","script","createElement","src","async","appendChild","addEventListener","removeEventListener","iconifyScript","querySelector","head","contains","removeChild","addListener","removeListener","newLanguageCustomizations","hasChanges","updatedCustomizations","keys","_updatedCustomization","_updatedCustomization2","toggleLanguageVisibility","videoContainer","current","resizeHandle","handleMouseDown","preventDefault","clientX","startWidth","offsetWidth","handleMouseMove","moveEvent","deltaX","newWidth","Math","max","videoWrapper","paddingTop","handleMouseUp","captionsSection","clientY","startHeight","offsetHeight","height","maxHeight","handleLinkChange","target","value","handleSubmit","fetchAvailableLanguages","_uniqueTranscripts$fi","_uniqueTranscripts$","log","errorText","uniqueTranscripts","transcripts","transcript","self","findIndex","t","language_code","languageCodes","defaultPrimary","find","fetchCaptions","message","languages","fetchPromises","warn","processedTranscript","caption","applyPOSTagging","end","start","duration","prevStatus","_prevStatus$match","loadedCount","Number","results","Promise","all","successfulLoads","result","commonNouns","commonVerbs","commonAdjectives","words","split","taggedText","i","originalWord","word","toLowerCase","replace","includes","setLanguageRank","rank","updatedLanguages","key","updateLanguageCustomization","property","existingCustomization","updatedCustomization","colorMap","formatCaptionText","fullCustomization","getCaptionStyle","isRTL","backgroundColor","direction","newActiveCaptions","activeCaption","player","YT","tag","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","createYouTubePlayer","destroy","Player","events","onPlayerReady","onPlayerStateChange","event","PlayerState","PLAYING","updateTime","getCurrentTime","getPlayerState","requestAnimationFrame","findTranscriptByLanguageCode","code","getLanguageName","langCode","language","rect","getBoundingClientRect","overlayElement","initialX","left","initialY","top","currentX","currentY","deltaY","newX","min","newY","getSelection","removeAllRanges","handleTouchStart","touch","touches","handleTouchMove","passive","handleTouchEnd","toggleDarkMode","jumpToTime","time","seekTo","playVideo","handleResizeStart","stopPropagation","overlay","containerWidth","handleResize","handleResizeEnd","deltaWidth","currentRight","className","checked","onChange","onSubmit","placeholder","disabled","role","ref","onClick","title","position","transform","cursor","transition","minWidth","flexDirection","alignItems","backdropFilter","borderRadius","padding","boxSizing","border","onMouseDown","onTouchStart","tabIndex","zIndex","right","pointerEvents","textAlign","whiteSpace","overflowWrap","wordWrap","maxWidth","userSelect","marginBottom","step","_captions$lang","floor","toFixed","padStart","onKeyDown","htmlFor","_languageCustomizatio","_languageCustomizatio2","font","label","size","_languageCustomizatio3","weight","_languageCustomizatio4","_languageCustomizatio5","spacing","_languageCustomizatio6","_c2","$RefreshReg$"],"sources":["/homes/iws/yc888/Multilingual/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nconst extractKeywords = async (text) => {\n  try {\n      const response = await fetch('/extract_keywords', {\n          method: 'POST',\n          headers: {\n              'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ text })\n      });\n\n      if (!response.ok) throw new Error('Failed to extract keywords');\n\n      const data = await response.json();\n      setKeywords(data.keywords.map(item => item[0])); // Take only the keyword, ignore the score\n  } catch (error) {\n      console.error('Failed to extract keywords:', error);\n  }\n};\n\n\n// Update this component (around line 5-89 in your code)\n// Fixed StyledCaptionText component\nconst StyledCaptionText = ({ text, customization, darkMode, getColor }) => {\n  // Font styles from customization\n  const fontStyles = {\n    fontFamily: getFontFamily(customization.fontFamily),\n    fontSize: getFontSize(customization.fontSize),\n    fontWeight: getFontWeight(customization.fontWeight),\n    color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n    letterSpacing: getLetterSpacing(customization.letterSpacing),\n    lineHeight: '1.4',\n    display: 'inline-block'\n  };\n\n  // Process the text to identify tagged parts\n  const processText = (input) => {\n    if (!input) return [];\n    \n    const segments = [];\n    let currentIndex = 0;\n    \n    // Regular expression to find tags\n    const tagRegex = /<(noun|verb|adjective)>(.*?)<\\/\\1>/g;\n    let match;\n    \n    // Find all tag matches\n    while ((match = tagRegex.exec(input)) !== null) {\n      // If there's text before the match, add it as plain text\n      if (match.index > currentIndex) {\n        segments.push({\n          type: 'text',\n          content: input.substring(currentIndex, match.index)\n        });\n      }\n      \n      // Add the tagged content\n      segments.push({\n        type: match[1], // noun, verb, or adjective\n        content: match[2] // the content inside the tags\n      });\n      \n      // Update the current index\n      currentIndex = match.index + match[0].length;\n    }\n    \n    // Add any remaining text after the last match\n    if (currentIndex < input.length) {\n      segments.push({\n        type: 'text',\n        content: input.substring(currentIndex)\n      });\n    }\n    \n    return segments;\n  };\n  \n  // Parse text into segments\n  const segments = processText(text);\n  \n  // Main render function - completely pure React approach\n  return (\n    <span style={fontStyles}>\n      {segments.map((segment, index) => {\n        if (segment.type === 'text') {\n          return <span key={index}>{segment.content}</span>;\n        } else if (segment.type === 'noun') {\n          return (\n            <span \n              key={index}\n              style={{\n                color: getColor('noun'),\n                textDecoration: 'underline'\n              }}\n            >\n              {segment.content}\n            </span>\n          );\n        } else if (segment.type === 'verb') {\n          return (\n            <span \n              key={index}\n              style={{\n                color: getColor('verb'),\n                textDecoration: 'underline'\n              }}\n            >\n              {segment.content}\n            </span>\n          );\n        } else if (segment.type === 'adjective') {\n          return (\n            <span \n              key={index}\n              style={{\n                color: getColor('adjective'),\n                textDecoration: 'underline'\n              }}\n            >\n              {segment.content}\n            </span>\n          );\n        }\n        return null;\n      })}\n    </span>\n  );\n};\n// API base URL - change this if your backend is running on a different port/host\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n // Get font size based on settings - now supports numeric values\nconst getFontSize = (sizeValue) => {\n  if (typeof sizeValue === 'number') {\n    return `${sizeValue}px`;\n  }\n  const sizeMap = {\n    'Small': '14px',\n    'Medium': '16px',\n    'Large': '20px',\n    'X-Large': '24px'\n  };\n  return sizeMap[sizeValue] || '16px';\n};\n\n// Get font weight based on settings - now supports numeric values\nconst getFontWeight = (weightValue) => {\n  if (typeof weightValue === 'number') {\n    return weightValue.toString();\n  }\n  const weightMap = {\n    'Light': '300',\n    'Regular': '400',\n    'Bold': '700'\n  };\n  return weightMap[weightValue] || '400';\n};\n\n// Get letter spacing based on settings - now supports numeric values\nconst getLetterSpacing = (spacingValue) => {\n  if (typeof spacingValue === 'number') {\n    return `${spacingValue}px`;\n  }\n  return spacingValue || 'normal';\n};\n\n// Get font family based on settings\nconst getFontFamily = (fontOption) => {\n  const fontMap = {\n    'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n    'Roboto': 'Roboto, Arial, sans-serif',\n    'Open Sans': 'Open Sans, Arial, sans-serif',\n    'Verdana': 'Verdana, Geneva, sans-serif'\n  };\n  \n  return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n};\n\nfunction App() {\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=zy2Zj8yIe6c');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n    // tertiary language removed\n  }); \n  \n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n  \n  // Add missing hiddenLanguages state\n  const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  \n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50, // percentage\n    y: 80, // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0,\n    lastX: 0,\n    lastY: 0,\n    width: 40 // percentage\n  });\n  \n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n\n  const [keywordColor, setKeywordColor] = useState('#FF5733'); // Default color for keywords\n  \n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n  \n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n  \n  // New state for UI enhancements\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n  const [captionsHeight, setCaptionsHeight] = useState('normal');\n  \n  // New state for caption spacing\n  const [captionSpacing, setCaptionSpacing] = useState(10); // Default 10px spacing\n  \n  // Refs\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const videoResizeHandleRef = useRef(null);\n  const captionsResizeHandleRef = useRef(null);\n  const activeResizeRef = useRef(null);\n\n  // Add new state for resize handling\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeDirection, setResizeDirection] = useState(null);\n  const resizeStartRef = useRef(null);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = (url) => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[7].length === 11) ? match[7] : null;\n  };\n\n  // Toggle settings panel collapse\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]); \n  \n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = (lang) => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n    \n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n    \n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e) => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n    \n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    \n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = { ...languageCustomizations };\n    let hasChanges = false;\n    \n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 16,\n          fontWeight: 400,\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 0\n        };\n        hasChanges = true;\n      }\n    });\n    \n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(newLanguageCustomizations);\n    }\n  }, [selectedLanguages]);\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = { ...languageCustomizations };\n    let hasChanges = false;\n    \n    Object.keys(updatedCustomizations).forEach(lang => {\n      if (updatedCustomizations[lang]?.textColor === '#000000' || updatedCustomizations[lang]?.textColor === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n        hasChanges = true;\n      }\n    });\n    \n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(updatedCustomizations);\n    }\n  }, [darkMode]);\n\n  // Add this function to toggle language visibility\n  const toggleLanguageVisibility = (lang) => {\n    setHiddenLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Set up video container resize functionality\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const videoContainer = videoContainerRef.current;\n    const resizeHandle = videoResizeHandleRef.current;\n    \n    if (!videoContainer || !resizeHandle) return;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Save initial position and dimensions\n      const startX = e.clientX;\n      const startWidth = videoContainer.offsetWidth;\n      \n      activeResizeRef.current = 'video';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'video') return;\n        \n        // Calculate new width based on mouse movement\n        const deltaX = moveEvent.clientX - startX;\n        const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n        \n        // Set width\n        videoContainer.style.width = `${newWidth}px`;\n        \n        // Update the video wrapper's padding-top to maintain aspect ratio\n        const videoWrapper = videoContainer.querySelector('.video-wrapper');\n        if (videoWrapper) {\n          // No need to explicitly set height - padding-top maintains ratio\n          videoWrapper.style.paddingTop = `${(9/16) * 100}%`; // Keep 16:9 ratio\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      if (resizeHandle) {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      }\n    };\n  }, [videoId]);\n\n  // Set up captions container resize functionality\n  useEffect(() => {\n    if (!captionsResizeHandleRef.current) return;\n    \n    const resizeHandle = captionsResizeHandleRef.current;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Find the active captions section\n      const captionsSection = document.querySelector('.active-captions-section');\n      if (!captionsSection) return;\n      \n      // Save initial position and dimensions\n      const startY = e.clientY;\n      const startHeight = captionsSection.offsetHeight;\n      \n      activeResizeRef.current = 'captions';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'captions') return;\n        \n        // Calculate new height\n        const height = startHeight + (moveEvent.clientY - startY);\n        \n        // Apply new height with min constraint\n        if (height > 100) {\n          captionsSection.style.height = `${height}px`;\n          captionsSection.style.maxHeight = `${height}px`;\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      resizeHandle.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [availableLanguages.length]);\n\n  // Handle YouTube link input\n  const handleLinkChange = (e) => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async (videoId) => {\n    try {\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Received data:', data);\n      \n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Filter out duplicate transcripts based on language_code\n      const uniqueTranscripts = data.transcripts.filter((transcript, index, self) =>\n        index === self.findIndex(t => t.language_code === transcript.language_code)\n      );\n      \n      // Store the filtered transcript information\n      setAvailableTranscripts(uniqueTranscripts);\n      \n      // Also keep the unique language codes for backward compatibility\n      const languageCodes = uniqueTranscripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} unique languages:`, languageCodes);\n      \n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = uniqueTranscripts.find(t => t.language_code === 'en')?.language_code \n        || (uniqueTranscripts[0]?.language_code || '');\n        \n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: ''\n      });\n      \n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n      \n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n      \n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      setStatus(`Loading transcripts (0/${languages.length})...`);\n      \n      // Create an array of promises for parallel fetching\n      const fetchPromises = languages.map(async (lang) => {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          \n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            return { lang, error: true };\n          }\n          \n          const data = await response.json();\n          \n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            return { lang, error: true };\n          }\n          \n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          \n          // Update captions immediately as each one loads\n          setCaptions(prev => ({\n            ...prev,\n            [lang]: processedTranscript\n          }));\n\n          // Update status with progress\n          setStatus(prevStatus => {\n            const loadedCount = (prevStatus.match(/\\d+/)?.[0] || 0);\n            return `Loading transcripts (${Number(loadedCount) + 1}/${languages.length})...`;\n          });\n          \n          return { lang, transcript: processedTranscript };\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n          return { lang, error: true };\n        }\n      });\n      \n      // Wait for all transcripts to load in parallel\n      const results = await Promise.all(fetchPromises);\n      \n      // Count successful loads\n      const successfulLoads = results.filter(result => !result.error).length;\n      \n      // Update final status\n      setStatus(`Successfully loaded captions in ${successfulLoads} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = (text) => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n    \n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      \n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      \n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = { ...selectedLanguages };\n    \n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => {\n      // Get existing customization or create new one with defaults\n      const existingCustomization = prev[lang] || {\n        fontFamily: 'Arial / Helvetica',\n        fontSize: 16,\n        fontWeight: 400,\n        textColor: darkMode ? '#FFFFFF' : '#000000',\n        letterSpacing: 0\n      };\n\n      // Create new customization object with updated property\n      const updatedCustomization = {\n        ...existingCustomization,\n        [property]: value\n      };\n\n      // Return new state with updated customization\n      return {\n        ...prev,\n        [lang]: updatedCustomization\n      };\n    });\n  };\n\n  // Get color based on settings\n  const getColor = (type) => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    \n    switch(type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return darkMode ? '#FFFFFF' : '#000000';\n    }\n  };\n\n  // Format caption text using new StyledCaptionText component\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    \n    // Get the language's customization settings, or create default ones if none exist\n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial / Helvetica',\n      fontSize: 16,\n      fontWeight: 400,\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 0\n    };\n\n    // Ensure all required properties exist\n    const fullCustomization = {\n      ...customization,\n      fontFamily: customization.fontFamily || 'Arial / Helvetica',\n      fontSize: customization.fontSize || 16,\n      fontWeight: customization.fontWeight || 400,\n      textColor: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: customization.letterSpacing || 0\n    };\n    \n    return (\n      <StyledCaptionText \n        text={text} \n        customization={fullCustomization} \n        darkMode={darkMode} \n        getColor={getColor} \n      />\n    );\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = (lang) => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    \n    return {\n      fontFamily: getFontFamily(customization.fontFamily || 'Arial / Helvetica'),\n      fontSize: getFontSize(customization.fontSize || 16),\n      fontWeight: getFontWeight(customization.fontWeight || 400),\n      color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: getLetterSpacing(customization.letterSpacing || 0),\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    \n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(\n          caption => currentTime >= caption.start && currentTime <= caption.end\n        );\n        \n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    \n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    \n    let player = null;\n    \n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      \n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    \n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      \n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    \n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n      player = event.target; // Store the player reference\n    }\n    \n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (player && player.getCurrentTime) {\n            setCurrentTime(player.getCurrentTime());\n          }\n          if (player && player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    \n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = (code) => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = (langCode) => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return transcript?.language || langCode;\n  };\n  \n  // Start dragging the caption overlay\n  const handleMouseDown = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    const overlayElement = overlayRef.current;\n    if (!overlayElement) return;\n\n    // Calculate initial position relative to the container\n    const initialX = (e.clientX - rect.left) / rect.width * 100;\n    const initialY = (e.clientY - rect.top) / rect.height * 100;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    \n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n  \n  // Handle mouse move during dragging - Improved for smoother movement\n  const handleMouseMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate current position as percentage of container\n    const currentX = (e.clientX - rect.left) / rect.width * 100;\n    const currentY = (e.clientY - rect.top) / rect.height * 100;\n    \n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n    \n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n    \n    // Update position with smooth transition\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX,\n      y: newY\n    }));\n    \n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n  \n  // Stop dragging with smooth finish\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle touch start for mobile devices - improved for smoother touch interaction\n  const handleTouchStart = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate initial touch position relative to container\n    const initialX = (touch.clientX - rect.left) / rect.width * 100;\n    const initialY = (touch.clientY - rect.top) / rect.height * 100;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, { passive: false });\n    document.addEventListener('touchend', handleTouchEnd);\n    \n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n  \n  // Handle touch move for mobile devices - improved for smoother movement\n  const handleTouchMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate current position as percentage of container\n    const currentX = (touch.clientX - rect.left) / rect.width * 100;\n    const currentY = (touch.clientY - rect.top) / rect.height * 100;\n    \n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n    \n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n    \n    // Update position with smooth transition\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX,\n      y: newY\n    }));\n    \n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n  \n  // Handle touch end for mobile devices - with smooth finish\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n  \n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    \n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = (time) => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n\n  // Handle resize start\n  const handleResizeStart = (e, direction) => {\n    e.stopPropagation(); // Prevent drag event from firing\n    const videoContainer = videoContainerRef.current;\n    const overlay = overlayRef.current;\n    if (!videoContainer || !overlay) return;\n\n    setIsResizing(true);\n    setResizeDirection(direction);\n    \n    // Store initial values\n    resizeStartRef.current = {\n      x: e.clientX,\n      width: overlayPosition.width,\n      containerWidth: videoContainer.getBoundingClientRect().width,\n      direction: direction,\n      initialX: overlayPosition.x // Store initial X position\n    };\n\n    // Add event listeners to document to ensure smooth dragging\n    document.addEventListener('mousemove', handleResize);\n    document.addEventListener('mouseup', handleResizeEnd);\n    \n    // Prevent text selection and default behaviors\n    e.preventDefault();\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize\n  const handleResize = (e) => {\n    if (!isResizing || !resizeStartRef.current) return;\n\n    const { x: startX, width: startWidth, containerWidth, direction, initialX } = resizeStartRef.current;\n    const deltaX = e.clientX - startX;\n    \n    // Calculate width change as percentage\n    const deltaWidth = (deltaX / containerWidth) * 100;\n    \n    // Calculate new width based on resize direction\n    let newWidth;\n    if (direction === 'right') {\n      newWidth = Math.max(20, Math.min(90, startWidth + deltaWidth));\n    } else {\n      newWidth = Math.max(20, Math.min(90, startWidth - deltaWidth));\n    }\n    \n    // If resizing from left, adjust position to maintain right edge position\n    if (direction === 'left') {\n      const currentRight = initialX + (startWidth / 2);\n      const newX = currentRight - (newWidth / 2);\n      setOverlayPosition(prev => ({\n        ...prev,\n        x: Math.max(newWidth / 2, Math.min(100 - newWidth / 2, newX)),\n        width: newWidth\n      }));\n    } else {\n      // Update width only for right resize\n      setOverlayPosition(prev => ({\n        ...prev,\n        width: newWidth\n      }));\n    }\n\n    // Prevent text selection during resize\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize end\n  const handleResizeEnd = () => {\n    if (!isResizing) return;\n    \n    setIsResizing(false);\n    setResizeDirection(null);\n    resizeStartRef.current = null;\n    \n    // Remove event listeners\n    document.removeEventListener('mousemove', handleResize);\n    document.removeEventListener('mouseup', handleResizeEnd);\n  };\n\n  return (\n    <div className={`app-container ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <h1 className=\"app-title\">YouTube Multilingual Captions Extractor</h1>\n      \n      {/* Fancy Dark Mode Toggle */}\n      <div className=\"dark-mode-toggle\">\n        <label>\n          <input \n            className=\"toggle-checkbox\" \n            type=\"checkbox\" \n            checked={darkMode}\n            onChange={toggleDarkMode}\n          />\n          <div className=\"toggle-slot\">\n            <div className=\"sun-icon-wrapper\">\n              <div className=\"iconify sun-icon\" data-icon=\"feather-sun\" data-inline=\"false\"></div>\n            </div>\n            <div className=\"toggle-button\"></div>\n            <div className=\"moon-icon-wrapper\">\n              <div className=\"iconify moon-icon\" data-icon=\"feather-moon\" data-inline=\"false\"></div>\n            </div>\n          </div>\n        </label>\n      </div>\n      \n      {/* Input Box */}\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={youtubeLink}\n            onChange={handleLinkChange}\n            placeholder=\"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\"\n            className=\"input-field\"\n            aria-label=\"YouTube video URL\"\n          />\n          <button \n            type=\"submit\"\n            className=\"submit-button\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load Video'}\n          </button>\n        </div>\n      </form>\n      \n      {/* Status message */}\n      {status && (\n        <div className=\"status-message\" role=\"status\" aria-live=\"polite\">\n          {status}\n        </div>\n      )}\n      \n      {videoId && (\n        <div className=\"main-content\">\n          {/* Main Content Area (Video + Captions) */}\n          <div className=\"content-area\">\n            {/* Video Embed Box */}\n            <div className=\"video-container\" ref={videoContainerRef}>\n              <div className=\"video-header\">\n                <div className=\"placement-toggle\">\n                  <div className=\"placement-buttons\">\n                    <button \n                      className={`placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`}\n                      onClick={() => setCaptionPlacement('Below Video')}\n                    >\n                      Below\n                    </button>\n                    <button \n                      className={`placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`}\n                      onClick={() => setCaptionPlacement('Overlay')}\n                    >\n                      Overlay\n                    </button>\n                  </div>\n                </div>\n              </div>\n              <div className=\"video-wrapper\" style={{ paddingTop: '56.25%' }}> {/* 16:9 Aspect Ratio */}\n                {/* YouTube player */}\n                <div id=\"youtube-player\" className=\"video-frame\"></div>\n              </div>\n              \n              {/* Video resize handle */}\n              <div \n                ref={videoResizeHandleRef}\n                className=\"video-resize-handle\" \n                title=\"Drag to resize video\"\n              ></div>\n              \n              {/* Real-time captions overlay - with improved draggable functionality */}\n              {captionPlacement === 'Overlay' && (\n                <div \n                  className={`captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''} ${isResizing ? 'resizing' : ''}`}\n                  style={{\n                    position: 'absolute',\n                    left: `${overlayPosition.x}%`,\n                    top: `${overlayPosition.y}%`,\n                    transform: 'translate(-50%, -50%)',\n                    cursor: overlayPosition.isDragging ? 'grabbing' : 'grab',\n                    transition: overlayPosition.isDragging || isResizing ? 'none' : 'all 0.1s ease-out',\n                    width: `${overlayPosition.width}%`,\n                    minWidth: '200px',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    backgroundColor: darkMode ? 'rgba(0, 0, 0, 0.7)' : 'rgba(255, 255, 255, 0.7)',\n                    backdropFilter: 'blur(8px)',\n                    borderRadius: '8px',\n                    padding: '8px',\n                    boxSizing: 'border-box',\n                    border: '1px solid rgba(255, 255, 255, 0.1)'\n                  }}\n                  ref={overlayRef}\n                  onMouseDown={handleMouseDown}\n                  onTouchStart={handleTouchStart}\n                  tabIndex=\"0\"\n                  role=\"region\"\n                  aria-label=\"Movable captions overlay\"\n                >\n                  {/* Left resize handle */}\n                  <div\n                    className=\"resize-handle resize-handle-left\"\n                    style={{\n                      position: 'absolute',\n                      left: '-8px',\n                      top: 0,\n                      width: '16px',\n                      height: '100%',\n                      cursor: 'ew-resize',\n                      backgroundColor: isResizing && resizeDirection === 'left' ? \n                        'rgba(255, 255, 255, 0.2)' : 'transparent',\n                      borderRadius: '4px 0 0 4px',\n                      zIndex: 10\n                    }}\n                    onMouseDown={(e) => handleResizeStart(e, 'left')}\n                  />\n\n                  {/* Right resize handle */}\n                  <div\n                    className=\"resize-handle resize-handle-right\"\n                    style={{\n                      position: 'absolute',\n                      right: '-8px',\n                      top: 0,\n                      width: '16px',\n                      height: '100%',\n                      cursor: 'ew-resize',\n                      backgroundColor: isResizing && resizeDirection === 'right' ? \n                        'rgba(255, 255, 255, 0.2)' : 'transparent',\n                      borderRadius: '0 4px 4px 0',\n                      zIndex: 10\n                    }}\n                    onMouseDown={(e) => handleResizeStart(e, 'right')}\n                  />\n\n                  {/* Resize indicators - always visible */}\n                  <div\n                    style={{\n                      position: 'absolute',\n                      left: '-4px',\n                      top: '50%',\n                      transform: 'translateY(-50%)',\n                      width: '4px',\n                      height: '24px',\n                      backgroundColor: isResizing && resizeDirection === 'left' ? \n                        'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                      borderRadius: '2px',\n                      pointerEvents: 'none',\n                      transition: 'background-color 0.1s ease'\n                    }}\n                  />\n                  <div\n                    style={{\n                      position: 'absolute',\n                      right: '-4px',\n                      top: '50%',\n                      transform: 'translateY(-50%)',\n                      width: '4px',\n                      height: '24px',\n                      backgroundColor: isResizing && resizeDirection === 'right' ? \n                        'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                      borderRadius: '2px',\n                      pointerEvents: 'none',\n                      transition: 'background-color 0.1s ease'\n                    }}\n                  />\n                  \n                  <div className=\"overlay-drag-instructions\">\n                    Hold to move • Drag edges to resize\n                  </div>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    activeCaptions[lang] && (\n                      <div \n                        key={lang} \n                        className=\"overlay-caption\" \n                        style={{\n                          ...getCaptionStyle(lang),\n                          width: '100%',\n                          textAlign: 'center',\n                          padding: '4px 8px',\n                          whiteSpace: 'pre-wrap',\n                          overflowWrap: 'break-word',\n                          wordWrap: 'break-word',\n                          maxWidth: '100%',\n                          display: 'block',\n                          userSelect: 'none' // Prevent text selection while dragging\n                        }}\n                      >\n                        {formatCaptionText(activeCaptions[lang].text, lang)}\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Captions Display - for Below Video mode only - with reduced spacing */}\n            {captionPlacement === 'Below Video' && \n             availableLanguages.length > 0 && (\n              <div className=\"captions-container closer-to-video\">\n                \n                {/* Current active captions section - all languages together */}\n                <div className={`active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`}>\n                  <button\n                    className=\"toggle-caption-height\"\n                    onClick={toggleCaptionsHeight}\n                    title={captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions'}\n                  >\n                    {captionsHeight === 'normal' ? '↓' : '↑'}\n                  </button>\n                  \n                  {getSelectedLanguagesArray().map(lang => {\n                  // Skip hidden languages\n                  if (hiddenLanguages[lang]) return null;\n                  \n                  return (\n                    <div \n                      key={`active-${lang}`} \n                      className=\"caption-text-container\"\n                      style={{ marginBottom: `${captionSpacing}px` }}\n                    >\n                      <div className=\"caption-content-wrapper\">\n                        {activeCaptions[lang] ? (\n                          <div className=\"caption-text\">\n                            {formatCaptionText(activeCaptions[lang].text, lang)}\n                          </div>\n                        ) : (\n                          <span className=\"no-caption\">   ...</span>\n                        )}\n                        <span className={`language-tag-right ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`}>\n                          {getLanguageName(lang)}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n                </div>\n\n                {/* Caption spacing control */}\n                <div className=\"caption-spacing-control-below\">\n                  <input\n                    type=\"range\"\n                    id=\"caption-spacing-below\"\n                    min=\"-20\"\n                    max=\"40\"\n                    step=\"0.25\"\n                    value={captionSpacing}\n                    onChange={(e) => setCaptionSpacing(Number(e.target.value))}\n                    className=\"spacing-slider-below\"\n                    aria-label=\"Adjust caption spacing\"\n                  />\n                </div>\n                \n                {/* Caption resize handle */}\n                <div \n                  ref={captionsResizeHandleRef}\n                  className=\"resize-handle resize-handle-vertical\" \n                  title=\"Drag to resize captions height\"\n                ></div>\n                \n                {/* Transcripts section - all languages */}\n                <div className=\"transcripts-section\">\n                  <h3 className=\"section-subtitle\">Full Transcripts</h3>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    <div key={`transcript-${lang}`} className=\"language-section\">\n                      <h4 className=\"language-title\">\n                        {getLanguageName(lang)} \n                        {lang === selectedLanguages.primary ? ' (Primary)' : \n                         lang === selectedLanguages.secondary ? ' (Secondary)' : ''}\n                      </h4>\n                      \n                      {/* Full transcript with timestamps */}\n                      <div className=\"captions-content\">\n                        {captions[lang]?.map((caption, index) => (\n                          <div key={index} \n                            className={`caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`}\n                            onClick={() => jumpToTime(caption.start)}\n                            tabIndex=\"0\"\n                            role=\"button\"\n                            aria-label={`Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`}\n                            onKeyDown={(e) => {\n                              if (e.key === 'Enter' || e.key === ' ') {\n                                jumpToTime(caption.start);\n                              }\n                            }}\n                          >\n                            <div className=\"timestamp\">\n                              {Math.floor(caption.start / 60)}:{(caption.start % 60).toFixed(1).padStart(4, '0')} - \n                              {Math.floor(caption.end / 60)}:{(caption.end % 60).toFixed(1).padStart(4, '0')}\n                            </div>\n                            <div className=\"caption-text\">\n                              {formatCaptionText(caption.text, lang)}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Settings Panel - Now with improved toggle */}\n          <div className={`settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`}>\n            <button \n              className=\"settings-toggle\" \n              onClick={toggleSettingsPanel}\n              title={settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\"}\n              aria-expanded={!settingsPanelCollapsed}\n              aria-controls=\"settings-content\"\n            >\n              <span className=\"settings-toggle-icon\">\n                {settingsPanelCollapsed ? '»' : '«'}\n              </span>\n            </button>\n            \n            <div id=\"settings-content\" style={{ display: settingsPanelCollapsed ? 'none' : 'block', width: '100%' }}>\n              <h2 className=\"section-title\">Customize Display</h2>\n              \n              {/* Language Selection */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Select Languages</h3>\n                \n                {/* Primary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"primary-language\">Primary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"primary-language\"\n                      value={selectedLanguages.primary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'primary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      {availableTranscripts.map((transcript, index) => (\n                        <option key={`primary-${transcript.language_code}-${index}`} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n                \n                {/* Secondary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"secondary-language\">Secondary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"secondary-language\"\n                      value={selectedLanguages.secondary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'secondary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      <option value=\"\" key=\"none\">None</option>\n                      {availableTranscripts.map((transcript, index) => (\n                        <option key={`secondary-${transcript.language_code}-${index}`} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Language-specific customization */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Language Customizations</h3>\n                \n                {getSelectedLanguagesArray().map(lang => (\n                  <div key={`customize-${lang}`} className={`language-customization-card ${collapsedLanguages[lang] ? 'collapsed' : ''}`}>\n                    <div \n                      className=\"language-card-header\"\n                      onClick={() => toggleLanguageCollapse(lang)}\n                    >\n                      <div className=\"language-header-content\">\n                        <span className=\"language-name\">{getLanguageName(lang)}</span>\n                        <button\n                          className={`visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`}\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            toggleLanguageVisibility(lang);\n                          }}\n                          title={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                          aria-label={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                        />\n                        {lang === selectedLanguages.primary && <span className=\"language-tag primary\">Primary</span>}\n                        {lang === selectedLanguages.secondary && <span className=\"language-tag secondary\">Secondary</span>}\n                      </div>\n                      <button \n                        className=\"collapse-toggle\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          toggleLanguageCollapse(lang);\n                        }}\n                        aria-label={collapsedLanguages[lang] ? \"Expand language settings\" : \"Collapse language settings\"}\n                      />\n                    </div>\n                    \n                    <div className=\"language-card-content\">\n                      {/* Visibility Toggle */}\n                      <button\n                        className={`visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`}\n                        onClick={() => toggleLanguageVisibility(lang)}\n                        title={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                        aria-label={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                      />\n\n                      {/* Font Selection */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Font</div>\n                        <select \n                          className=\"font-select\"\n                          value={languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica'}\n                          onChange={(e) => updateLanguageCustomization(lang, 'fontFamily', e.target.value)}\n                          style={{ fontFamily: getFontFamily(languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica') }}\n                        >\n                          {['Arial / Helvetica', 'Roboto', 'Open Sans', 'Verdana'].map(font => (\n                            <option \n                              key={font} \n                              value={font}\n                              style={{ fontFamily: getFontFamily(font) }}\n                            >\n                              {font}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n\n                      {/* Font Size */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Size</div>\n                        <div className=\"button-group\">\n                          {[\n                            { value: 14, label: 'Small' },\n                            { value: 18, label: 'Medium' },\n                            { value: 24, label: 'Large' }\n                          ].map(size => (\n                            <button\n                              key={size.value}\n                              className={`option-button ${(languageCustomizations[lang]?.fontSize === size.value) ? 'active' : ''}`}\n                              onClick={() => {\n                                const updatedCustomization = {\n                                  ...languageCustomizations[lang],\n                                  fontSize: size.value\n                                };\n                                setLanguageCustomizations(prev => ({\n                                  ...prev,\n                                  [lang]: updatedCustomization\n                                }));\n                              }}\n                            >\n                              {size.label}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Font Weight */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Font Weight</div>\n                        <div className=\"button-group\">\n                          {[\n                            { value: 300, label: 'Light' },\n                            { value: 400, label: 'Regular' },\n                            { value: 700, label: 'Bold' }\n                          ].map(weight => (\n                            <button\n                              key={weight.value}\n                              className={`option-button ${(languageCustomizations[lang]?.fontWeight === weight.value) ? 'active' : ''}`}\n                              onClick={() => {\n                                const updatedCustomization = {\n                                  ...languageCustomizations[lang],\n                                  fontWeight: weight.value\n                                };\n                                setLanguageCustomizations(prev => ({\n                                  ...prev,\n                                  [lang]: updatedCustomization\n                                }));\n                              }}\n                            >\n                              {weight.label}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Text Color */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Color</div>\n                        <div className=\"color-options\">\n                          {[\n                            '#000000', // Black - for light mode\n                            '#FFFFFF', // White - for dark mode\n                            '#0052CC', // Accessible blue\n                            '#2E7D32'  // Accessible green\n                          ].map(color => (\n                            <div\n                              key={color}\n                              className={`color-option ${languageCustomizations[lang]?.textColor === color ? 'active' : ''}`}\n                              style={{ backgroundColor: color }}\n                              onClick={() => updateLanguageCustomization(lang, 'textColor', color)}\n                            />\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Character Spacing */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Character Spacing</div>\n                        <div className=\"button-group\">\n                          {[\n                            { value: -1, label: 'Tight' },\n                            { value: 0, label: 'Normal' },\n                            { value: 2, label: 'Wide' }\n                          ].map(spacing => (\n                            <button\n                              key={spacing.value}\n                              className={`option-button ${languageCustomizations[lang]?.letterSpacing === spacing.value ? 'active' : ''}`}\n                              onClick={() => updateLanguageCustomization(lang, 'letterSpacing', spacing.value)}\n                            >\n                              {spacing.label}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Preview Text */}\n                      <div \n                        className=\"preview-text\"\n                        style={getCaptionStyle(lang)}\n                      >\n                        The quick brown fox jumps over the lazy dog.\n                      </div>\n\n                      {/* Action Buttons */}\n                      <div className=\"button-row\">\n                        <button \n                          className=\"action-button secondary\"\n                          onClick={() => {\n                            setLanguageCustomizations(prev => ({\n                              ...prev,\n                              [lang]: {\n                                fontFamily: 'Arial / Helvetica',\n                                fontSize: 16,\n                                fontWeight: 400,\n                                textColor: darkMode ? '#FFFFFF' : '#000000',\n                                letterSpacing: 0\n                              }\n                            }));\n                          }}\n                        >\n                          Reset\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              {/* Part of speech color customization */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Keywords Highlighting</h3>\n                <div className=\"pos-color-controls\">\n                  <div className=\"pos-color-item\">\n                    <select \n                      id=\"keyword-color\" \n                      value={keywordColor} \n                      onChange={(e) => setKeywordColor(e.target.value)} \n                      className=\"settings-select pos-select\"\n                    >\n                      <option value=\"#FF5733\">Orange Red</option>\n                      <option value=\"#007bff\">Electric Blue</option>\n                      <option value=\"#28a745\">Forest Green</option>\n                      <option value=\"#ffc107\">Sunny Yellow</option>\n                      <option value=\"#6f42c1\">Royal Purple</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}