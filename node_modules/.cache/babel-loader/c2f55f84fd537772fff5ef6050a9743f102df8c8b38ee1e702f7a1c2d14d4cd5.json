{"ast":null,"code":"var _jsxFileName = \"/homes/iws/yc888/Multilingual/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [keywords, setKeywords] = useState([]);\nconst handleExtractKeywords = async () => {\n  if (!captions[selectedLanguages.primary]) return;\n  const fullText = captions[selectedLanguages.primary].map(caption => caption.text).join(' ');\n  const extractedKeywords = await extractKeywords(fullText);\n  setKeywords(extractedKeywords);\n};\nconst highlightKeywords = (text, keywords, color) => {\n  if (!keywords || keywords.length === 0) return text;\n\n  // Escape regex characters in keywords\n  const escapedKeywords = keywords.map(k => k.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'));\n  const regex = new RegExp(`\\\\b(${escapedKeywords.join('|')})\\\\b`, 'gi');\n  return text.split(regex).map((part, i) => keywords.includes(part) ? /*#__PURE__*/_jsxDEV(\"span\", {\n    style: {\n      backgroundColor: color,\n      fontWeight: 'bold'\n    },\n    children: part\n  }, i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 7\n  }, this) : part);\n};\n\n// Update this component (around line 5-89 in your code)\n// Fixed StyledCaptionText component\nconst StyledCaptionText = ({\n  text,\n  customization,\n  darkMode,\n  getColor,\n  keywords\n}) => {\n  const fontStyles = {\n    fontFamily: getFontFamily(customization.fontFamily),\n    fontSize: getFontSize(customization.fontSize),\n    fontWeight: getFontWeight(customization.fontWeight),\n    color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n    letterSpacing: getLetterSpacing(customization.letterSpacing),\n    lineHeight: '1.4',\n    display: 'inline-block'\n  };\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: fontStyles,\n    children: highlightKeywords(text, keywords, getColor('keyword'))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n// const StyledCaptionText = ({ text, customization, darkMode, getColor }) => {\n//   // Font styles from customization\n//   const fontStyles = {\n//     fontFamily: getFontFamily(customization.fontFamily),\n//     fontSize: getFontSize(customization.fontSize),\n//     fontWeight: getFontWeight(customization.fontWeight),\n//     color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n//     letterSpacing: getLetterSpacing(customization.letterSpacing),\n//     lineHeight: '1.4',\n//     display: 'inline-block'\n//   };\n\n//   // Process the text to identify tagged parts\n//   const processText = (input) => {\n//     if (!input) return [];\n\n//     const segments = [];\n//     let currentIndex = 0;\n\n//     // Regular expression to find tags\n//     const tagRegex = /<(noun|verb|adjective)>(.*?)<\\/\\1>/g;\n//     let match;\n\n//     // Find all tag matches\n//     while ((match = tagRegex.exec(input)) !== null) {\n//       // If there's text before the match, add it as plain text\n//       if (match.index > currentIndex) {\n//         segments.push({\n//           type: 'text',\n//           content: input.substring(currentIndex, match.index)\n//         });\n//       }\n\n//       // Add the tagged content\n//       segments.push({\n//         type: match[1], // noun, verb, or adjective\n//         content: match[2] // the content inside the tags\n//       });\n\n//       // Update the current index\n//       currentIndex = match.index + match[0].length;\n//     }\n\n//     // Add any remaining text after the last match\n//     if (currentIndex < input.length) {\n//       segments.push({\n//         type: 'text',\n//         content: input.substring(currentIndex)\n//       });\n//     }\n\n//     return segments;\n//   };\n\n//   // Parse text into segments\n//   const segments = processText(text);\n\n//   // Main render function - completely pure React approach\n//   return (\n//     <span style={fontStyles}>\n//       {segments.map((segment, index) => {\n//         if (segment.type === 'text') {\n//           return <span key={index}>{segment.content}</span>;\n//         } else if (segment.type === 'noun') {\n//           return (\n//             <span \n//               key={index}\n//               style={{\n//                 color: getColor('noun'),\n//                 textDecoration: 'underline'\n//               }}\n//             >\n//               {segment.content}\n//             </span>\n//           );\n//         } else if (segment.type === 'verb') {\n//           return (\n//             <span \n//               key={index}\n//               style={{\n//                 color: getColor('verb'),\n//                 textDecoration: 'underline'\n//               }}\n//             >\n//               {segment.content}\n//             </span>\n//           );\n//         } else if (segment.type === 'adjective') {\n//           return (\n//             <span \n//               key={index}\n//               style={{\n//                 color: getColor('adjective'),\n//                 textDecoration: 'underline'\n//               }}\n//             >\n//               {segment.content}\n//             </span>\n//           );\n//         }\n//         return null;\n//       })}\n//     </span>\n//   );\n// };\n// API base URL - change this if your backend is running on a different port/host\n_c = StyledCaptionText;\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n// Get font size based on settings - now supports numeric values\nconst getFontSize = sizeValue => {\n  if (typeof sizeValue === 'number') {\n    return `${sizeValue}px`;\n  }\n  const sizeMap = {\n    'Small': '14px',\n    'Medium': '16px',\n    'Large': '20px',\n    'X-Large': '24px'\n  };\n  return sizeMap[sizeValue] || '16px';\n};\n\n// Get font weight based on settings - now supports numeric values\nconst getFontWeight = weightValue => {\n  if (typeof weightValue === 'number') {\n    return weightValue.toString();\n  }\n  const weightMap = {\n    'Light': '300',\n    'Regular': '400',\n    'Bold': '700'\n  };\n  return weightMap[weightValue] || '400';\n};\n\n// Get letter spacing based on settings - now supports numeric values\nconst getLetterSpacing = spacingValue => {\n  if (typeof spacingValue === 'number') {\n    return `${spacingValue}px`;\n  }\n  return spacingValue || 'normal';\n};\n\n// Get font family based on settings\nconst getFontFamily = fontOption => {\n  const fontMap = {\n    'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n    'Roboto': 'Roboto, Arial, sans-serif',\n    'Open Sans': 'Open Sans, Arial, sans-serif',\n    'Verdana': 'Verdana, Geneva, sans-serif'\n  };\n  return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n};\nfunction App() {\n  _s();\n  const extractKeywords = async text => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/extract_keywords', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) throw new Error('Failed to extract keywords');\n      const data = await response.json();\n      return data.keywords;\n    } catch (error) {\n      console.error('Error extracting keywords:', error);\n      return [];\n    }\n  };\n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=zy2Zj8yIe6c');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n    // tertiary language removed\n  });\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n\n  // Add missing hiddenLanguages state\n  const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n\n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50,\n    // percentage\n    y: 80,\n    // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0,\n    lastX: 0,\n    lastY: 0,\n    width: 40 // percentage\n  });\n\n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n  const [keywordColor, setKeywordColor] = useState('#FF5733'); // Default color for keywords\n\n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n\n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n\n  // New state for UI enhancements\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n  const [captionsHeight, setCaptionsHeight] = useState('normal');\n\n  // New state for caption spacing\n  const [captionSpacing, setCaptionSpacing] = useState(10); // Default 10px spacing\n\n  // Refs\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const videoResizeHandleRef = useRef(null);\n  const captionsResizeHandleRef = useRef(null);\n  const activeResizeRef = useRef(null);\n\n  // Add new state for resize handling\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeDirection, setResizeDirection] = useState(null);\n  const resizeStartRef = useRef(null);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = url => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[7].length === 11 ? match[7] : null;\n  };\n\n  // Toggle settings panel collapse\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]);\n\n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = lang => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n\n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n\n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n\n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = {\n      ...languageCustomizations\n    };\n    let hasChanges = false;\n\n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 16,\n          fontWeight: 400,\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 0\n        };\n        hasChanges = true;\n      }\n    });\n\n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(newLanguageCustomizations);\n    }\n  }, [selectedLanguages]);\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = {\n      ...languageCustomizations\n    };\n    let hasChanges = false;\n    Object.keys(updatedCustomizations).forEach(lang => {\n      var _updatedCustomization, _updatedCustomization2;\n      if (((_updatedCustomization = updatedCustomizations[lang]) === null || _updatedCustomization === void 0 ? void 0 : _updatedCustomization.textColor) === '#000000' || ((_updatedCustomization2 = updatedCustomizations[lang]) === null || _updatedCustomization2 === void 0 ? void 0 : _updatedCustomization2.textColor) === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n        hasChanges = true;\n      }\n    });\n\n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(updatedCustomizations);\n    }\n  }, [darkMode]);\n\n  // Add this function to toggle language visibility\n  const toggleLanguageVisibility = lang => {\n    setHiddenLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Set up video container resize functionality\n  useEffect(() => {\n    if (!videoId) return;\n    const videoContainer = videoContainerRef.current;\n    const resizeHandle = videoResizeHandleRef.current;\n    if (!videoContainer || !resizeHandle) return;\n    const handleMouseDown = e => {\n      e.preventDefault();\n\n      // Save initial position and dimensions\n      const startX = e.clientX;\n      const startWidth = videoContainer.offsetWidth;\n      activeResizeRef.current = 'video';\n      const handleMouseMove = moveEvent => {\n        if (activeResizeRef.current !== 'video') return;\n\n        // Calculate new width based on mouse movement\n        const deltaX = moveEvent.clientX - startX;\n        const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n\n        // Set width\n        videoContainer.style.width = `${newWidth}px`;\n\n        // Update the video wrapper's padding-top to maintain aspect ratio\n        const videoWrapper = videoContainer.querySelector('.video-wrapper');\n        if (videoWrapper) {\n          // No need to explicitly set height - padding-top maintains ratio\n          videoWrapper.style.paddingTop = `${9 / 16 * 100}%`; // Keep 16:9 ratio\n        }\n        moveEvent.preventDefault();\n      };\n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    return () => {\n      if (resizeHandle) {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      }\n    };\n  }, [videoId]);\n\n  // Set up captions container resize functionality\n  useEffect(() => {\n    if (!captionsResizeHandleRef.current) return;\n    const resizeHandle = captionsResizeHandleRef.current;\n    const handleMouseDown = e => {\n      e.preventDefault();\n\n      // Find the active captions section\n      const captionsSection = document.querySelector('.active-captions-section');\n      if (!captionsSection) return;\n\n      // Save initial position and dimensions\n      const startY = e.clientY;\n      const startHeight = captionsSection.offsetHeight;\n      activeResizeRef.current = 'captions';\n      const handleMouseMove = moveEvent => {\n        if (activeResizeRef.current !== 'captions') return;\n\n        // Calculate new height\n        const height = startHeight + (moveEvent.clientY - startY);\n\n        // Apply new height with min constraint\n        if (height > 100) {\n          captionsSection.style.height = `${height}px`;\n          captionsSection.style.maxHeight = `${height}px`;\n        }\n        moveEvent.preventDefault();\n      };\n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    return () => {\n      resizeHandle.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [availableLanguages.length]);\n\n  // Handle YouTube link input\n  const handleLinkChange = e => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async videoId => {\n    try {\n      var _uniqueTranscripts$fi, _uniqueTranscripts$;\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Received data:', data);\n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n\n      // Filter out duplicate transcripts based on language_code\n      const uniqueTranscripts = data.transcripts.filter((transcript, index, self) => index === self.findIndex(t => t.language_code === transcript.language_code));\n\n      // Store the filtered transcript information\n      setAvailableTranscripts(uniqueTranscripts);\n\n      // Also keep the unique language codes for backward compatibility\n      const languageCodes = uniqueTranscripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} unique languages:`, languageCodes);\n\n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = ((_uniqueTranscripts$fi = uniqueTranscripts.find(t => t.language_code === 'en')) === null || _uniqueTranscripts$fi === void 0 ? void 0 : _uniqueTranscripts$fi.language_code) || ((_uniqueTranscripts$ = uniqueTranscripts[0]) === null || _uniqueTranscripts$ === void 0 ? void 0 : _uniqueTranscripts$.language_code) || '';\n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: ''\n      });\n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n\n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      setStatus(`Loading transcripts (0/${languages.length})...`);\n\n      // Create an array of promises for parallel fetching\n      const fetchPromises = languages.map(async lang => {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            return {\n              lang,\n              error: true\n            };\n          }\n          const data = await response.json();\n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            return {\n              lang,\n              error: true\n            };\n          }\n\n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n\n          // Update captions immediately as each one loads\n          setCaptions(prev => ({\n            ...prev,\n            [lang]: processedTranscript\n          }));\n\n          // Update status with progress\n          setStatus(prevStatus => {\n            var _prevStatus$match;\n            const loadedCount = ((_prevStatus$match = prevStatus.match(/\\d+/)) === null || _prevStatus$match === void 0 ? void 0 : _prevStatus$match[0]) || 0;\n            return `Loading transcripts (${Number(loadedCount) + 1}/${languages.length})...`;\n          });\n          return {\n            lang,\n            transcript: processedTranscript\n          };\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n          return {\n            lang,\n            error: true\n          };\n        }\n      });\n\n      // Wait for all transcripts to load in parallel\n      const results = await Promise.all(fetchPromises);\n\n      // Count successful loads\n      const successfulLoads = results.filter(result => !result.error).length;\n\n      // Update final status\n      setStatus(`Successfully loaded captions in ${successfulLoads} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = text => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n\n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = {\n      ...selectedLanguages\n    };\n\n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => {\n      // Get existing customization or create new one with defaults\n      const existingCustomization = prev[lang] || {\n        fontFamily: 'Arial / Helvetica',\n        fontSize: 16,\n        fontWeight: 400,\n        textColor: darkMode ? '#FFFFFF' : '#000000',\n        letterSpacing: 0\n      };\n\n      // Create new customization object with updated property\n      const updatedCustomization = {\n        ...existingCustomization,\n        [property]: value\n      };\n\n      // Return new state with updated customization\n      return {\n        ...prev,\n        [lang]: updatedCustomization\n      };\n    });\n  };\n\n  // Get color based on settings\n  const getColor = type => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    switch (type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return darkMode ? '#FFFFFF' : '#000000';\n    }\n  };\n\n  // Format caption text using new StyledCaptionText component\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n\n    // Get the language's customization settings, or create default ones if none exist\n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial / Helvetica',\n      fontSize: 16,\n      fontWeight: 400,\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 0\n    };\n\n    // Ensure all required properties exist\n    const fullCustomization = {\n      ...customization,\n      fontFamily: customization.fontFamily || 'Arial / Helvetica',\n      fontSize: customization.fontSize || 16,\n      fontWeight: customization.fontWeight || 400,\n      textColor: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: customization.letterSpacing || 0\n    };\n    return /*#__PURE__*/_jsxDEV(StyledCaptionText, {\n      text: text,\n      customization: fullCustomization,\n      darkMode: darkMode,\n      getColor: getColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 814,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = lang => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    return {\n      fontFamily: getFontFamily(customization.fontFamily || 'Arial / Helvetica'),\n      fontSize: getFontSize(customization.fontSize || 16),\n      fontWeight: getFontWeight(customization.fontWeight || 400),\n      color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: getLetterSpacing(customization.letterSpacing || 0),\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(caption => currentTime >= caption.start && currentTime <= caption.end);\n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    let player = null;\n\n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n      player = event.target; // Store the player reference\n    }\n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (player && player.getCurrentTime) {\n            setCurrentTime(player.getCurrentTime());\n          }\n          if (player && player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = code => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = langCode => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return (transcript === null || transcript === void 0 ? void 0 : transcript.language) || langCode;\n  };\n\n  // Start dragging the caption overlay\n  const handleMouseDown = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n    const overlayElement = overlayRef.current;\n    if (!overlayElement) return;\n\n    // Calculate initial position relative to the container\n    const initialX = (e.clientX - rect.left) / rect.width * 100;\n    const initialY = (e.clientY - rect.top) / rect.height * 100;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n\n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n\n  // Handle mouse move during dragging - Improved for smoother movement\n  const handleMouseMove = e => {\n    if (!overlayPosition.isDragging) return;\n\n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate current position as percentage of container\n    const currentX = (e.clientX - rect.left) / rect.width * 100;\n    const currentY = (e.clientY - rect.top) / rect.height * 100;\n\n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n\n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n\n    // Update position with smooth transition\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY\n    }));\n\n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n\n  // Stop dragging with smooth finish\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle touch start for mobile devices - improved for smoother touch interaction\n  const handleTouchStart = e => {\n    if (captionPlacement !== 'Overlay') return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate initial touch position relative to container\n    const initialX = (touch.clientX - rect.left) / rect.width * 100;\n    const initialY = (touch.clientY - rect.top) / rect.height * 100;\n\n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', handleTouchEnd);\n\n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n\n  // Handle touch move for mobile devices - improved for smoother movement\n  const handleTouchMove = e => {\n    if (!overlayPosition.isDragging) return;\n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    const rect = videoContainer.getBoundingClientRect();\n\n    // Calculate current position as percentage of container\n    const currentX = (touch.clientX - rect.left) / rect.width * 100;\n    const currentY = (touch.clientY - rect.top) / rect.height * 100;\n\n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n\n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n\n    // Update position with smooth transition\n    setOverlayPosition(prev => ({\n      ...prev,\n      x: newX,\n      y: newY\n    }));\n\n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n\n  // Handle touch end for mobile devices - with smooth finish\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({\n      ...prev,\n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n\n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n\n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n\n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = time => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n\n  // Handle resize start\n  const handleResizeStart = (e, direction) => {\n    e.stopPropagation(); // Prevent drag event from firing\n    const videoContainer = videoContainerRef.current;\n    const overlay = overlayRef.current;\n    if (!videoContainer || !overlay) return;\n    setIsResizing(true);\n    setResizeDirection(direction);\n\n    // Store initial values\n    resizeStartRef.current = {\n      x: e.clientX,\n      width: overlayPosition.width,\n      containerWidth: videoContainer.getBoundingClientRect().width,\n      direction: direction,\n      initialX: overlayPosition.x // Store initial X position\n    };\n\n    // Add event listeners to document to ensure smooth dragging\n    document.addEventListener('mousemove', handleResize);\n    document.addEventListener('mouseup', handleResizeEnd);\n\n    // Prevent text selection and default behaviors\n    e.preventDefault();\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize\n  const handleResize = e => {\n    if (!isResizing || !resizeStartRef.current) return;\n    const {\n      x: startX,\n      width: startWidth,\n      containerWidth,\n      direction,\n      initialX\n    } = resizeStartRef.current;\n    const deltaX = e.clientX - startX;\n\n    // Calculate width change as percentage\n    const deltaWidth = deltaX / containerWidth * 100;\n\n    // Calculate new width based on resize direction\n    let newWidth;\n    if (direction === 'right') {\n      newWidth = Math.max(20, Math.min(90, startWidth + deltaWidth));\n    } else {\n      newWidth = Math.max(20, Math.min(90, startWidth - deltaWidth));\n    }\n\n    // If resizing from left, adjust position to maintain right edge position\n    if (direction === 'left') {\n      const currentRight = initialX + startWidth / 2;\n      const newX = currentRight - newWidth / 2;\n      setOverlayPosition(prev => ({\n        ...prev,\n        x: Math.max(newWidth / 2, Math.min(100 - newWidth / 2, newX)),\n        width: newWidth\n      }));\n    } else {\n      // Update width only for right resize\n      setOverlayPosition(prev => ({\n        ...prev,\n        width: newWidth\n      }));\n    }\n\n    // Prevent text selection during resize\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize end\n  const handleResizeEnd = () => {\n    if (!isResizing) return;\n    setIsResizing(false);\n    setResizeDirection(null);\n    resizeStartRef.current = null;\n\n    // Remove event listeners\n    document.removeEventListener('mousemove', handleResize);\n    document.removeEventListener('mouseup', handleResizeEnd);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"YouTube Multilingual Captions Extractor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dark-mode-toggle\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"toggle-checkbox\",\n          type: \"checkbox\",\n          checked: darkMode,\n          onChange: toggleDarkMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-slot\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sun-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify sun-icon\",\n              \"data-icon\": \"feather-sun\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1207,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1206,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"toggle-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1209,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"moon-icon-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"iconify moon-icon\",\n              \"data-icon\": \"feather-moon\",\n              \"data-inline\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1211,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1210,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1205,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1198,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: youtubeLink,\n          onChange: handleLinkChange,\n          placeholder: \"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\",\n          className: \"input-field\",\n          \"aria-label\": \"YouTube video URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'Load Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1219,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1218,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-message\",\n      role: \"status\",\n      \"aria-live\": \"polite\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1240,\n      columnNumber: 9\n    }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          ref: videoContainerRef,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-header\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"placement-toggle\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"placement-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`,\n                  onClick: () => setCaptionPlacement('Below Video'),\n                  children: \"Below\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1254,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`,\n                  onClick: () => setCaptionPlacement('Overlay'),\n                  children: \"Overlay\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1260,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1253,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1252,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1251,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-wrapper\",\n            style: {\n              paddingTop: '56.25%'\n            },\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"youtube-player\",\n              className: \"video-frame\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1271,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1269,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: videoResizeHandleRef,\n            className: \"video-resize-handle\",\n            title: \"Drag to resize video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1275,\n            columnNumber: 15\n          }, this), captionPlacement === 'Overlay' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''} ${isResizing ? 'resizing' : ''}`,\n            style: {\n              position: 'absolute',\n              left: `${overlayPosition.x}%`,\n              top: `${overlayPosition.y}%`,\n              transform: 'translate(-50%, -50%)',\n              cursor: overlayPosition.isDragging ? 'grabbing' : 'grab',\n              transition: overlayPosition.isDragging || isResizing ? 'none' : 'all 0.1s ease-out',\n              width: `${overlayPosition.width}%`,\n              minWidth: '200px',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              backgroundColor: darkMode ? 'rgba(0, 0, 0, 0.7)' : 'rgba(255, 255, 255, 0.7)',\n              backdropFilter: 'blur(8px)',\n              borderRadius: '8px',\n              padding: '8px',\n              boxSizing: 'border-box',\n              border: '1px solid rgba(255, 255, 255, 0.1)'\n            },\n            ref: overlayRef,\n            onMouseDown: handleMouseDown,\n            onTouchStart: handleTouchStart,\n            tabIndex: \"0\",\n            role: \"region\",\n            \"aria-label\": \"Movable captions overlay\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"resize-handle resize-handle-left\",\n              style: {\n                position: 'absolute',\n                left: '-8px',\n                top: 0,\n                width: '16px',\n                height: '100%',\n                cursor: 'ew-resize',\n                backgroundColor: isResizing && resizeDirection === 'left' ? 'rgba(255, 255, 255, 0.2)' : 'transparent',\n                borderRadius: '4px 0 0 4px',\n                zIndex: 10\n              },\n              onMouseDown: e => handleResizeStart(e, 'left')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1312,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"resize-handle resize-handle-right\",\n              style: {\n                position: 'absolute',\n                right: '-8px',\n                top: 0,\n                width: '16px',\n                height: '100%',\n                cursor: 'ew-resize',\n                backgroundColor: isResizing && resizeDirection === 'right' ? 'rgba(255, 255, 255, 0.2)' : 'transparent',\n                borderRadius: '0 4px 4px 0',\n                zIndex: 10\n              },\n              onMouseDown: e => handleResizeStart(e, 'right')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1330,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: 'absolute',\n                left: '-4px',\n                top: '50%',\n                transform: 'translateY(-50%)',\n                width: '4px',\n                height: '24px',\n                backgroundColor: isResizing && resizeDirection === 'left' ? 'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                borderRadius: '2px',\n                pointerEvents: 'none',\n                transition: 'background-color 0.1s ease'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1348,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: 'absolute',\n                right: '-4px',\n                top: '50%',\n                transform: 'translateY(-50%)',\n                width: '4px',\n                height: '24px',\n                backgroundColor: isResizing && resizeDirection === 'right' ? 'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                borderRadius: '2px',\n                pointerEvents: 'none',\n                transition: 'background-color 0.1s ease'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1363,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-drag-instructions\",\n              children: \"Hold to move \\u2022 Drag edges to resize\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1379,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => activeCaptions[lang] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-caption\",\n              style: {\n                ...getCaptionStyle(lang),\n                width: '100%',\n                textAlign: 'center',\n                padding: '4px 8px',\n                whiteSpace: 'pre-wrap',\n                overflowWrap: 'break-word',\n                wordWrap: 'break-word',\n                maxWidth: '100%',\n                display: 'block',\n                userSelect: 'none' // Prevent text selection while dragging\n              },\n              children: formatCaptionText(activeCaptions[lang].text, lang)\n            }, lang, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1385,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1283,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1250,\n          columnNumber: 13\n        }, this), captionPlacement === 'Below Video' && availableLanguages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"captions-container closer-to-video\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"toggle-caption-height\",\n              onClick: toggleCaptionsHeight,\n              title: captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions',\n              children: captionsHeight === 'normal' ? '↓' : '↑'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1416,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              // Skip hidden languages\n              if (hiddenLanguages[lang]) return null;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"caption-text-container\",\n                style: {\n                  marginBottom: `${captionSpacing}px`\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"caption-content-wrapper\",\n                  children: [activeCaptions[lang] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"caption-text\",\n                    children: formatCaptionText(activeCaptions[lang].text, lang)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1436,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"no-caption\",\n                    children: \"   ...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1440,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `language-tag-right ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`,\n                    children: getLanguageName(lang)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1442,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1434,\n                  columnNumber: 23\n                }, this)\n              }, `active-${lang}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1429,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1415,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"caption-spacing-control-below\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              id: \"caption-spacing-below\",\n              min: \"-20\",\n              max: \"40\",\n              step: \"0.25\",\n              value: captionSpacing,\n              onChange: e => setCaptionSpacing(Number(e.target.value)),\n              className: \"spacing-slider-below\",\n              \"aria-label\": \"Adjust caption spacing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1453,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1452,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: captionsResizeHandleRef,\n            className: \"resize-handle resize-handle-vertical\",\n            title: \"Drag to resize captions height\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1467,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transcripts-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"section-subtitle\",\n              children: \"Full Transcripts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1475,\n              columnNumber: 19\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _captions$lang;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"language-title\",\n                  children: [getLanguageName(lang), lang === selectedLanguages.primary ? ' (Primary)' : lang === selectedLanguages.secondary ? ' (Secondary)' : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1479,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"captions-content\",\n                  children: (_captions$lang = captions[lang]) === null || _captions$lang === void 0 ? void 0 : _captions$lang.map((caption, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`,\n                    onClick: () => jumpToTime(caption.start),\n                    tabIndex: \"0\",\n                    role: \"button\",\n                    \"aria-label\": `Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`,\n                    onKeyDown: e => {\n                      if (e.key === 'Enter' || e.key === ' ') {\n                        jumpToTime(caption.start);\n                      }\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"timestamp\",\n                      children: [Math.floor(caption.start / 60), \":\", (caption.start % 60).toFixed(1).padStart(4, '0'), \" -\", Math.floor(caption.end / 60), \":\", (caption.end % 60).toFixed(1).padStart(4, '0')]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1500,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"caption-text\",\n                      children: formatCaptionText(caption.text, lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1504,\n                      columnNumber: 29\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1488,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1486,\n                  columnNumber: 23\n                }, this)]\n              }, `transcript-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1478,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1474,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1412,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1248,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"settings-toggle\",\n          onClick: toggleSettingsPanel,\n          title: settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\",\n          \"aria-expanded\": !settingsPanelCollapsed,\n          \"aria-controls\": \"settings-content\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"settings-toggle-icon\",\n            children: settingsPanelCollapsed ? '»' : '«'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1526,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1519,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"settings-content\",\n          style: {\n            display: settingsPanelCollapsed ? 'none' : 'block',\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Customize Display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1532,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Select Languages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1536,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"primary-language\",\n                children: \"Primary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1540,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"primary-language\",\n                  value: selectedLanguages.primary,\n                  onChange: e => setLanguageRank(e.target.value, 'primary'),\n                  className: \"settings-select language-dropdown\",\n                  children: availableTranscripts.map((transcript, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, `primary-${transcript.language_code}-${index}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1549,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1542,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1541,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1539,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-selection-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-label\",\n                htmlFor: \"secondary-language\",\n                children: \"Secondary Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1559,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-dropdown-container\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"secondary-language\",\n                  value: selectedLanguages.secondary,\n                  onChange: e => setLanguageRank(e.target.value, 'secondary'),\n                  className: \"settings-select language-dropdown\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"None\"\n                  }, \"none\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1567,\n                    columnNumber: 23\n                  }, this), availableTranscripts.map((transcript, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: transcript.language_code,\n                    children: transcript.language\n                  }, `secondary-${transcript.language_code}-${index}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1569,\n                    columnNumber: 25\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1561,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1560,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1558,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1535,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Language Customizations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1580,\n              columnNumber: 17\n            }, this), getSelectedLanguagesArray().map(lang => {\n              var _languageCustomizatio, _languageCustomizatio2;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `language-customization-card ${collapsedLanguages[lang] ? 'collapsed' : ''}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-header\",\n                  onClick: () => toggleLanguageCollapse(lang),\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"language-header-content\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-name\",\n                      children: getLanguageName(lang)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1589,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: `visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`,\n                      onClick: e => {\n                        e.stopPropagation();\n                        toggleLanguageVisibility(lang);\n                      },\n                      title: hiddenLanguages[lang] ? 'Show Language' : 'Hide Language',\n                      \"aria-label\": hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1590,\n                      columnNumber: 25\n                    }, this), lang === selectedLanguages.primary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag primary\",\n                      children: \"Primary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1599,\n                      columnNumber: 64\n                    }, this), lang === selectedLanguages.secondary && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"language-tag secondary\",\n                      children: \"Secondary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1600,\n                      columnNumber: 66\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1588,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"collapse-toggle\",\n                    onClick: e => {\n                      e.stopPropagation();\n                      toggleLanguageCollapse(lang);\n                    },\n                    \"aria-label\": collapsedLanguages[lang] ? \"Expand language settings\" : \"Collapse language settings\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1602,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1584,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"language-card-content\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: `visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`,\n                    onClick: () => toggleLanguageVisibility(lang),\n                    title: hiddenLanguages[lang] ? 'Show Language' : 'Hide Language',\n                    \"aria-label\": hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1614,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Font\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1623,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      className: \"font-select\",\n                      value: ((_languageCustomizatio = languageCustomizations[lang]) === null || _languageCustomizatio === void 0 ? void 0 : _languageCustomizatio.fontFamily) || 'Arial / Helvetica',\n                      onChange: e => updateLanguageCustomization(lang, 'fontFamily', e.target.value),\n                      style: {\n                        fontFamily: getFontFamily(((_languageCustomizatio2 = languageCustomizations[lang]) === null || _languageCustomizatio2 === void 0 ? void 0 : _languageCustomizatio2.fontFamily) || 'Arial / Helvetica')\n                      },\n                      children: ['Arial / Helvetica', 'Roboto', 'Open Sans', 'Verdana'].map(font => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: font,\n                        style: {\n                          fontFamily: getFontFamily(font)\n                        },\n                        children: font\n                      }, font, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1631,\n                        columnNumber: 29\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1624,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1622,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Size\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1644,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"button-group\",\n                      children: [{\n                        value: 14,\n                        label: 'Small'\n                      }, {\n                        value: 18,\n                        label: 'Medium'\n                      }, {\n                        value: 24,\n                        label: 'Large'\n                      }].map(size => {\n                        var _languageCustomizatio3;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: `option-button ${((_languageCustomizatio3 = languageCustomizations[lang]) === null || _languageCustomizatio3 === void 0 ? void 0 : _languageCustomizatio3.fontSize) === size.value ? 'active' : ''}`,\n                          onClick: () => {\n                            const updatedCustomization = {\n                              ...languageCustomizations[lang],\n                              fontSize: size.value\n                            };\n                            setLanguageCustomizations(prev => ({\n                              ...prev,\n                              [lang]: updatedCustomization\n                            }));\n                          },\n                          children: size.label\n                        }, size.value, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1651,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1645,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1643,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Font Weight\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1673,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"button-group\",\n                      children: [{\n                        value: 300,\n                        label: 'Light'\n                      }, {\n                        value: 400,\n                        label: 'Regular'\n                      }, {\n                        value: 700,\n                        label: 'Bold'\n                      }].map(weight => {\n                        var _languageCustomizatio4;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: `option-button ${((_languageCustomizatio4 = languageCustomizations[lang]) === null || _languageCustomizatio4 === void 0 ? void 0 : _languageCustomizatio4.fontWeight) === weight.value ? 'active' : ''}`,\n                          onClick: () => {\n                            const updatedCustomization = {\n                              ...languageCustomizations[lang],\n                              fontWeight: weight.value\n                            };\n                            setLanguageCustomizations(prev => ({\n                              ...prev,\n                              [lang]: updatedCustomization\n                            }));\n                          },\n                          children: weight.label\n                        }, weight.value, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1680,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1674,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1672,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Color\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1702,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"color-options\",\n                      children: ['#000000',\n                      // Black - for light mode\n                      '#FFFFFF',\n                      // White - for dark mode\n                      '#0052CC',\n                      // Accessible blue\n                      '#2E7D32' // Accessible green\n                      ].map(color => {\n                        var _languageCustomizatio5;\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: `color-option ${((_languageCustomizatio5 = languageCustomizations[lang]) === null || _languageCustomizatio5 === void 0 ? void 0 : _languageCustomizatio5.textColor) === color ? 'active' : ''}`,\n                          style: {\n                            backgroundColor: color\n                          },\n                          onClick: () => updateLanguageCustomization(lang, 'textColor', color)\n                        }, color, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1710,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1703,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1701,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"option-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"option-label\",\n                      children: \"Character Spacing\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1722,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"button-group\",\n                      children: [{\n                        value: -1,\n                        label: 'Tight'\n                      }, {\n                        value: 0,\n                        label: 'Normal'\n                      }, {\n                        value: 2,\n                        label: 'Wide'\n                      }].map(spacing => {\n                        var _languageCustomizatio6;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: `option-button ${((_languageCustomizatio6 = languageCustomizations[lang]) === null || _languageCustomizatio6 === void 0 ? void 0 : _languageCustomizatio6.letterSpacing) === spacing.value ? 'active' : ''}`,\n                          onClick: () => updateLanguageCustomization(lang, 'letterSpacing', spacing.value),\n                          children: spacing.label\n                        }, spacing.value, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1729,\n                          columnNumber: 29\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1723,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1721,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"preview-text\",\n                    style: getCaptionStyle(lang),\n                    children: \"The quick brown fox jumps over the lazy dog.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1741,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"button-row\",\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"action-button secondary\",\n                      onClick: () => {\n                        setLanguageCustomizations(prev => ({\n                          ...prev,\n                          [lang]: {\n                            fontFamily: 'Arial / Helvetica',\n                            fontSize: 16,\n                            fontWeight: 400,\n                            textColor: darkMode ? '#FFFFFF' : '#000000',\n                            letterSpacing: 0\n                          }\n                        }));\n                      },\n                      children: \"Reset\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1750,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1749,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1612,\n                  columnNumber: 21\n                }, this)]\n              }, `customize-${lang}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1583,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1579,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"settings-title\",\n              children: \"Keywords Highlighting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1775,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pos-color-controls\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pos-color-item\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"keyword-color\",\n                  value: keywordColor,\n                  onChange: e => setKeywordColor(e.target.value),\n                  className: \"settings-select pos-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"#FF5733\",\n                    children: \"Orange Red\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1784,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"#007bff\",\n                    children: \"Electric Blue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1785,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"#28a745\",\n                    children: \"Forest Green\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1786,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"#ffc107\",\n                    children: \"Sunny Yellow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1787,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"#6f42c1\",\n                    children: \"Royal Purple\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1788,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1778,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1777,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1776,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1774,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1531,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1518,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1246,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1193,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bkeISdDCTiRumXLFtXZVMPB1WZI=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledCaptionText\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","keywords","setKeywords","handleExtractKeywords","captions","selectedLanguages","primary","fullText","map","caption","text","join","extractedKeywords","extractKeywords","highlightKeywords","color","length","escapedKeywords","k","replace","regex","RegExp","split","part","i","includes","style","backgroundColor","fontWeight","children","fileName","_jsxFileName","lineNumber","columnNumber","StyledCaptionText","customization","darkMode","getColor","fontStyles","fontFamily","getFontFamily","fontSize","getFontSize","getFontWeight","textColor","letterSpacing","getLetterSpacing","lineHeight","display","_c","API_BASE_URL","sizeValue","sizeMap","weightValue","toString","weightMap","spacingValue","fontOption","fontMap","App","_s","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","console","youtubeLink","setYoutubeLink","videoId","setVideoId","setCaptions","setSelectedLanguages","secondary","availableLanguages","setAvailableLanguages","availableTranscripts","setAvailableTranscripts","status","setStatus","isLoading","setIsLoading","currentTime","setCurrentTime","activeCaptions","setActiveCaptions","collapsedLanguages","setCollapsedLanguages","hiddenLanguages","setHiddenLanguages","captionPlacement","setCaptionPlacement","overlayPosition","setOverlayPosition","x","y","isDragging","startX","startY","lastX","lastY","width","nounColor","setNounColor","verbColor","setVerbColor","adjectiveColor","setAdjectiveColor","keywordColor","setKeywordColor","languageCustomizations","setLanguageCustomizations","setDarkMode","settingsPanelCollapsed","setSettingsPanelCollapsed","captionsHeight","setCaptionsHeight","captionSpacing","setCaptionSpacing","overlayRef","videoContainerRef","videoResizeHandleRef","captionsResizeHandleRef","activeResizeRef","isResizing","setIsResizing","resizeDirection","setResizeDirection","resizeStartRef","extractVideoId","url","regExp","match","toggleSettingsPanel","toggleCaptionsHeight","getSelectedLanguagesArray","Object","values","filter","lang","initialCollapsedState","forEach","toggleLanguageCollapse","prev","id","window","matchMedia","matches","document","classList","add","mediaQuery","handleChange","e","remove","Iconify","script","createElement","src","async","appendChild","addEventListener","removeEventListener","iconifyScript","querySelector","head","contains","removeChild","addListener","removeListener","newLanguageCustomizations","hasChanges","updatedCustomizations","keys","_updatedCustomization","_updatedCustomization2","toggleLanguageVisibility","videoContainer","current","resizeHandle","handleMouseDown","preventDefault","clientX","startWidth","offsetWidth","handleMouseMove","moveEvent","deltaX","newWidth","Math","max","videoWrapper","paddingTop","handleMouseUp","captionsSection","clientY","startHeight","offsetHeight","height","maxHeight","handleLinkChange","target","value","handleSubmit","fetchAvailableLanguages","_uniqueTranscripts$fi","_uniqueTranscripts$","log","errorText","uniqueTranscripts","transcripts","transcript","index","self","findIndex","t","language_code","languageCodes","defaultPrimary","find","fetchCaptions","message","languages","fetchPromises","warn","processedTranscript","applyPOSTagging","end","start","duration","prevStatus","_prevStatus$match","loadedCount","Number","results","Promise","all","successfulLoads","result","commonNouns","commonVerbs","commonAdjectives","words","taggedText","originalWord","word","toLowerCase","setLanguageRank","rank","updatedLanguages","key","updateLanguageCustomization","property","existingCustomization","updatedCustomization","type","colorMap","formatCaptionText","fullCustomization","getCaptionStyle","isRTL","direction","newActiveCaptions","activeCaption","player","YT","tag","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","createYouTubePlayer","destroy","Player","events","onPlayerReady","onPlayerStateChange","event","PlayerState","PLAYING","updateTime","getCurrentTime","getPlayerState","requestAnimationFrame","findTranscriptByLanguageCode","code","getLanguageName","langCode","language","rect","getBoundingClientRect","overlayElement","initialX","left","initialY","top","currentX","currentY","deltaY","newX","min","newY","getSelection","removeAllRanges","handleTouchStart","touch","touches","handleTouchMove","passive","handleTouchEnd","toggleDarkMode","jumpToTime","time","seekTo","playVideo","handleResizeStart","stopPropagation","overlay","containerWidth","handleResize","handleResizeEnd","deltaWidth","currentRight","className","checked","onChange","onSubmit","placeholder","disabled","role","ref","onClick","title","position","transform","cursor","transition","minWidth","flexDirection","alignItems","backdropFilter","borderRadius","padding","boxSizing","border","onMouseDown","onTouchStart","tabIndex","zIndex","right","pointerEvents","textAlign","whiteSpace","overflowWrap","wordWrap","maxWidth","userSelect","marginBottom","step","_captions$lang","floor","toFixed","padStart","onKeyDown","htmlFor","_languageCustomizatio","_languageCustomizatio2","font","label","size","_languageCustomizatio3","weight","_languageCustomizatio4","_languageCustomizatio5","spacing","_languageCustomizatio6","_c2","$RefreshReg$"],"sources":["/homes/iws/yc888/Multilingual/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nconst [keywords, setKeywords] = useState([]);\n\nconst handleExtractKeywords = async () => {\n  if (!captions[selectedLanguages.primary]) return;\n\n  const fullText = captions[selectedLanguages.primary]\n    .map(caption => caption.text)\n    .join(' ');\n\n  const extractedKeywords = await extractKeywords(fullText);\n  setKeywords(extractedKeywords);\n};\n\n\nconst highlightKeywords = (text, keywords, color) => {\n  if (!keywords || keywords.length === 0) return text;\n\n  // Escape regex characters in keywords\n  const escapedKeywords = keywords.map(k => k.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'));\n  \n  const regex = new RegExp(`\\\\b(${escapedKeywords.join('|')})\\\\b`, 'gi');\n  \n  return text.split(regex).map((part, i) =>\n    keywords.includes(part) ? (\n      <span key={i} style={{ backgroundColor: color, fontWeight: 'bold' }}>\n        {part}\n      </span>\n    ) : part\n  );\n};\n\n// Update this component (around line 5-89 in your code)\n// Fixed StyledCaptionText component\nconst StyledCaptionText = ({ text, customization, darkMode, getColor, keywords }) => {\n  const fontStyles = {\n    fontFamily: getFontFamily(customization.fontFamily),\n    fontSize: getFontSize(customization.fontSize),\n    fontWeight: getFontWeight(customization.fontWeight),\n    color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n    letterSpacing: getLetterSpacing(customization.letterSpacing),\n    lineHeight: '1.4',\n    display: 'inline-block'\n  };\n\n  return (\n    <span style={fontStyles}>\n      {highlightKeywords(text, keywords, getColor('keyword'))}\n    </span>\n  );\n};\n\n\n// const StyledCaptionText = ({ text, customization, darkMode, getColor }) => {\n//   // Font styles from customization\n//   const fontStyles = {\n//     fontFamily: getFontFamily(customization.fontFamily),\n//     fontSize: getFontSize(customization.fontSize),\n//     fontWeight: getFontWeight(customization.fontWeight),\n//     color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n//     letterSpacing: getLetterSpacing(customization.letterSpacing),\n//     lineHeight: '1.4',\n//     display: 'inline-block'\n//   };\n\n//   // Process the text to identify tagged parts\n//   const processText = (input) => {\n//     if (!input) return [];\n    \n//     const segments = [];\n//     let currentIndex = 0;\n    \n//     // Regular expression to find tags\n//     const tagRegex = /<(noun|verb|adjective)>(.*?)<\\/\\1>/g;\n//     let match;\n    \n//     // Find all tag matches\n//     while ((match = tagRegex.exec(input)) !== null) {\n//       // If there's text before the match, add it as plain text\n//       if (match.index > currentIndex) {\n//         segments.push({\n//           type: 'text',\n//           content: input.substring(currentIndex, match.index)\n//         });\n//       }\n      \n//       // Add the tagged content\n//       segments.push({\n//         type: match[1], // noun, verb, or adjective\n//         content: match[2] // the content inside the tags\n//       });\n      \n//       // Update the current index\n//       currentIndex = match.index + match[0].length;\n//     }\n    \n//     // Add any remaining text after the last match\n//     if (currentIndex < input.length) {\n//       segments.push({\n//         type: 'text',\n//         content: input.substring(currentIndex)\n//       });\n//     }\n    \n//     return segments;\n//   };\n  \n//   // Parse text into segments\n//   const segments = processText(text);\n  \n//   // Main render function - completely pure React approach\n//   return (\n//     <span style={fontStyles}>\n//       {segments.map((segment, index) => {\n//         if (segment.type === 'text') {\n//           return <span key={index}>{segment.content}</span>;\n//         } else if (segment.type === 'noun') {\n//           return (\n//             <span \n//               key={index}\n//               style={{\n//                 color: getColor('noun'),\n//                 textDecoration: 'underline'\n//               }}\n//             >\n//               {segment.content}\n//             </span>\n//           );\n//         } else if (segment.type === 'verb') {\n//           return (\n//             <span \n//               key={index}\n//               style={{\n//                 color: getColor('verb'),\n//                 textDecoration: 'underline'\n//               }}\n//             >\n//               {segment.content}\n//             </span>\n//           );\n//         } else if (segment.type === 'adjective') {\n//           return (\n//             <span \n//               key={index}\n//               style={{\n//                 color: getColor('adjective'),\n//                 textDecoration: 'underline'\n//               }}\n//             >\n//               {segment.content}\n//             </span>\n//           );\n//         }\n//         return null;\n//       })}\n//     </span>\n//   );\n// };\n// API base URL - change this if your backend is running on a different port/host\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n // Get font size based on settings - now supports numeric values\nconst getFontSize = (sizeValue) => {\n  if (typeof sizeValue === 'number') {\n    return `${sizeValue}px`;\n  }\n  const sizeMap = {\n    'Small': '14px',\n    'Medium': '16px',\n    'Large': '20px',\n    'X-Large': '24px'\n  };\n  return sizeMap[sizeValue] || '16px';\n};\n\n// Get font weight based on settings - now supports numeric values\nconst getFontWeight = (weightValue) => {\n  if (typeof weightValue === 'number') {\n    return weightValue.toString();\n  }\n  const weightMap = {\n    'Light': '300',\n    'Regular': '400',\n    'Bold': '700'\n  };\n  return weightMap[weightValue] || '400';\n};\n\n// Get letter spacing based on settings - now supports numeric values\nconst getLetterSpacing = (spacingValue) => {\n  if (typeof spacingValue === 'number') {\n    return `${spacingValue}px`;\n  }\n  return spacingValue || 'normal';\n};\n\n// Get font family based on settings\nconst getFontFamily = (fontOption) => {\n  const fontMap = {\n    'Arial / Helvetica': 'Arial, Helvetica, sans-serif',\n    'Roboto': 'Roboto, Arial, sans-serif',\n    'Open Sans': 'Open Sans, Arial, sans-serif',\n    'Verdana': 'Verdana, Geneva, sans-serif'\n  };\n  \n  return fontMap[fontOption] || 'Arial, Helvetica, sans-serif';\n};\n\nfunction App() {\n  const extractKeywords = async (text) => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/extract_keywords', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ text })\n      });\n  \n      if (!response.ok) throw new Error('Failed to extract keywords');\n  \n      const data = await response.json();\n      return data.keywords;\n    } catch (error) {\n      console.error('Error extracting keywords:', error);\n      return [];\n    }\n  };\n  \n  const [youtubeLink, setYoutubeLink] = useState('https://www.youtube.com/watch?v=zy2Zj8yIe6c');\n  const [videoId, setVideoId] = useState('');\n  const [captions, setCaptions] = useState({});\n  const [selectedLanguages, setSelectedLanguages] = useState({\n    primary: 'en',\n    secondary: ''\n    // tertiary language removed\n  }); \n  \n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableTranscripts, setAvailableTranscripts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [activeCaptions, setActiveCaptions] = useState({});\n\n  // New state for managing language customization collapse\n  const [collapsedLanguages, setCollapsedLanguages] = useState({});\n  \n  // Add missing hiddenLanguages state\n  const [hiddenLanguages, setHiddenLanguages] = useState({});\n\n  // Caption placement state with updated options\n  const [captionPlacement, setCaptionPlacement] = useState('Below Video');\n  \n  // State for free movement of overlay captions\n  const [overlayPosition, setOverlayPosition] = useState({\n    x: 50, // percentage\n    y: 80, // percentage\n    isDragging: false,\n    startX: 0,\n    startY: 0,\n    lastX: 0,\n    lastY: 0,\n    width: 40 // percentage\n  });\n  \n  // Global customization options\n  const [nounColor, setNounColor] = useState('Electric Blue');\n  const [verbColor, setVerbColor] = useState('Cherry Red');\n  const [adjectiveColor, setAdjectiveColor] = useState('Forest Green');\n\n  const [keywordColor, setKeywordColor] = useState('#FF5733'); // Default color for keywords\n  \n  // Per-language customization settings with updated defaults\n  const [languageCustomizations, setLanguageCustomizations] = useState({});\n  \n  // Replace high contrast with theme mode\n  const [darkMode, setDarkMode] = useState(false);\n  \n  // New state for UI enhancements\n  const [settingsPanelCollapsed, setSettingsPanelCollapsed] = useState(false);\n  const [captionsHeight, setCaptionsHeight] = useState('normal');\n  \n  // New state for caption spacing\n  const [captionSpacing, setCaptionSpacing] = useState(10); // Default 10px spacing\n  \n  // Refs\n  const overlayRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const videoResizeHandleRef = useRef(null);\n  const captionsResizeHandleRef = useRef(null);\n  const activeResizeRef = useRef(null);\n\n  // Add new state for resize handling\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeDirection, setResizeDirection] = useState(null);\n  const resizeStartRef = useRef(null);\n\n  // Extract video ID from YouTube URL\n  const extractVideoId = (url) => {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[7].length === 11) ? match[7] : null;\n  };\n\n  // Toggle settings panel collapse\n  const toggleSettingsPanel = () => {\n    setSettingsPanelCollapsed(!settingsPanelCollapsed);\n  };\n\n  // Toggle captions height\n  const toggleCaptionsHeight = () => {\n    setCaptionsHeight(captionsHeight === 'normal' ? 'expanded' : 'normal');\n  };\n\n  // Get selected languages as an array (for compatibility with the rest of the code)\n  const getSelectedLanguagesArray = () => {\n    return Object.values(selectedLanguages).filter(lang => lang !== '');\n  };\n\n  useEffect(() => {\n    const initialCollapsedState = {};\n    getSelectedLanguagesArray().forEach(lang => {\n      initialCollapsedState[lang] = true; // Default: Collapsed (closed)\n    });\n    setCollapsedLanguages(initialCollapsedState);\n  }, [selectedLanguages]); \n  \n  // Toggle collapse for a specific language\n  const toggleLanguageCollapse = (lang) => {\n    setCollapsedLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Initialize with the default URL and load Iconify script\n  useEffect(() => {\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n    }\n    \n    // Check for user's preferred color scheme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDarkMode(true);\n      document.body.classList.add('dark-mode');\n    }\n    \n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e) => {\n      setDarkMode(e.matches);\n      if (e.matches) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    };\n    \n    // Load Iconify script if it's not already loaded (for the dark mode toggle)\n    if (!window.Iconify) {\n      const script = document.createElement('script');\n      script.src = 'https://code.iconify.design/1/1.0.4/iconify.min.js';\n      script.async = true;\n      document.body.appendChild(script);\n    }\n    \n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => {\n        mediaQuery.removeEventListener('change', handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n      return () => {\n        mediaQuery.removeListener(handleChange);\n        // Clean up Iconify script if we added it\n        const iconifyScript = document.querySelector('script[src=\"https://code.iconify.design/1/1.0.4/iconify.min.js\"]');\n        if (iconifyScript && !document.head.contains(iconifyScript)) {\n          document.body.removeChild(iconifyScript);\n        }\n      };\n    }\n  }, []);\n\n  // Initialize language customizations when new languages are selected\n  useEffect(() => {\n    const newLanguageCustomizations = { ...languageCustomizations };\n    let hasChanges = false;\n    \n    // Initialize customizations for any new languages with improved default options\n    Object.values(selectedLanguages).forEach(lang => {\n      if (lang && !newLanguageCustomizations[lang]) {\n        newLanguageCustomizations[lang] = {\n          fontFamily: 'Arial / Helvetica',\n          fontSize: 16,\n          fontWeight: 400,\n          textColor: darkMode ? '#FFFFFF' : '#000000',\n          letterSpacing: 0\n        };\n        hasChanges = true;\n      }\n    });\n    \n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(newLanguageCustomizations);\n    }\n  }, [selectedLanguages]);\n\n  // Update language customizations when dark mode changes\n  useEffect(() => {\n    // Update text colors for all languages when dark mode changes\n    const updatedCustomizations = { ...languageCustomizations };\n    let hasChanges = false;\n    \n    Object.keys(updatedCustomizations).forEach(lang => {\n      if (updatedCustomizations[lang]?.textColor === '#000000' || updatedCustomizations[lang]?.textColor === '#FFFFFF') {\n        updatedCustomizations[lang].textColor = darkMode ? '#FFFFFF' : '#000000';\n        hasChanges = true;\n      }\n    });\n    \n    // Only update state if there are actual changes\n    if (hasChanges) {\n      setLanguageCustomizations(updatedCustomizations);\n    }\n  }, [darkMode]);\n\n  // Add this function to toggle language visibility\n  const toggleLanguageVisibility = (lang) => {\n    setHiddenLanguages(prev => ({\n      ...prev,\n      [lang]: !prev[lang]\n    }));\n  };\n\n  // Set up video container resize functionality\n  useEffect(() => {\n    if (!videoId) return;\n    \n    const videoContainer = videoContainerRef.current;\n    const resizeHandle = videoResizeHandleRef.current;\n    \n    if (!videoContainer || !resizeHandle) return;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Save initial position and dimensions\n      const startX = e.clientX;\n      const startWidth = videoContainer.offsetWidth;\n      \n      activeResizeRef.current = 'video';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'video') return;\n        \n        // Calculate new width based on mouse movement\n        const deltaX = moveEvent.clientX - startX;\n        const newWidth = Math.max(300, startWidth + deltaX); // Minimum 300px width\n        \n        // Set width\n        videoContainer.style.width = `${newWidth}px`;\n        \n        // Update the video wrapper's padding-top to maintain aspect ratio\n        const videoWrapper = videoContainer.querySelector('.video-wrapper');\n        if (videoWrapper) {\n          // No need to explicitly set height - padding-top maintains ratio\n          videoWrapper.style.paddingTop = `${(9/16) * 100}%`; // Keep 16:9 ratio\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      if (resizeHandle) {\n        resizeHandle.removeEventListener('mousedown', handleMouseDown);\n      }\n    };\n  }, [videoId]);\n\n  // Set up captions container resize functionality\n  useEffect(() => {\n    if (!captionsResizeHandleRef.current) return;\n    \n    const resizeHandle = captionsResizeHandleRef.current;\n    \n    const handleMouseDown = (e) => {\n      e.preventDefault();\n      \n      // Find the active captions section\n      const captionsSection = document.querySelector('.active-captions-section');\n      if (!captionsSection) return;\n      \n      // Save initial position and dimensions\n      const startY = e.clientY;\n      const startHeight = captionsSection.offsetHeight;\n      \n      activeResizeRef.current = 'captions';\n      \n      const handleMouseMove = (moveEvent) => {\n        if (activeResizeRef.current !== 'captions') return;\n        \n        // Calculate new height\n        const height = startHeight + (moveEvent.clientY - startY);\n        \n        // Apply new height with min constraint\n        if (height > 100) {\n          captionsSection.style.height = `${height}px`;\n          captionsSection.style.maxHeight = `${height}px`;\n        }\n        \n        moveEvent.preventDefault();\n      };\n      \n      const handleMouseUp = () => {\n        activeResizeRef.current = null;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n      \n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    resizeHandle.addEventListener('mousedown', handleMouseDown);\n    \n    return () => {\n      resizeHandle.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [availableLanguages.length]);\n\n  // Handle YouTube link input\n  const handleLinkChange = (e) => {\n    setYoutubeLink(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = extractVideoId(youtubeLink);\n    if (id) {\n      setVideoId(id);\n      setStatus('Fetching available languages...');\n      setIsLoading(true);\n      fetchAvailableLanguages(id);\n    } else {\n      setStatus('Invalid YouTube URL');\n    }\n  };\n\n  // Function to fetch available languages using the youtube_transcript_api\n  const fetchAvailableLanguages = async (videoId) => {\n    try {\n      console.log(`Fetching languages for video ID: ${videoId}`);\n      const response = await fetch(`${API_BASE_URL}/api/list-transcripts?videoId=${videoId}`);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API error (${response.status}):`, errorText);\n        throw new Error(`Failed to fetch transcript list: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Received data:', data);\n      \n      if (data.error) {\n        console.error('API returned error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Filter out duplicate transcripts based on language_code\n      const uniqueTranscripts = data.transcripts.filter((transcript, index, self) =>\n        index === self.findIndex(t => t.language_code === transcript.language_code)\n      );\n      \n      // Store the filtered transcript information\n      setAvailableTranscripts(uniqueTranscripts);\n      \n      // Also keep the unique language codes for backward compatibility\n      const languageCodes = uniqueTranscripts.map(t => t.language_code);\n      setAvailableLanguages(languageCodes);\n      console.log(`Found ${languageCodes.length} unique languages:`, languageCodes);\n      \n      // Set primary language to English if available, otherwise first available language\n      const defaultPrimary = uniqueTranscripts.find(t => t.language_code === 'en')?.language_code \n        || (uniqueTranscripts[0]?.language_code || '');\n        \n      setSelectedLanguages({\n        primary: defaultPrimary,\n        secondary: ''\n      });\n      \n      setStatus(`Found captions in ${languageCodes.length} languages. Fetching transcripts...`);\n      \n      // Fetch transcripts for all available languages\n      await fetchCaptions(videoId, languageCodes);\n      \n    } catch (error) {\n      console.error('Error fetching transcript languages:', error);\n      setStatus(`Error: ${error.message}`);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to fetch transcripts for all available languages\n  const fetchCaptions = async (videoId, languages) => {\n    try {\n      setStatus(`Loading transcripts (0/${languages.length})...`);\n      \n      // Create an array of promises for parallel fetching\n      const fetchPromises = languages.map(async (lang) => {\n        try {\n          const response = await fetch(`${API_BASE_URL}/api/get-transcript?videoId=${videoId}&lang=${lang}`);\n          \n          if (!response.ok) {\n            console.warn(`Failed to fetch transcript for ${lang}: ${response.status}`);\n            return { lang, error: true };\n          }\n          \n          const data = await response.json();\n          \n          if (data.error) {\n            console.warn(`Error fetching transcript for ${lang}: ${data.error}`);\n            return { lang, error: true };\n          }\n          \n          // Process the transcript data - add POS tagging\n          const processedTranscript = data.transcript.map(caption => ({\n            ...caption,\n            text: applyPOSTagging(caption.text),\n            end: caption.start + caption.duration // Calculate end time\n          }));\n          \n          // Update captions immediately as each one loads\n          setCaptions(prev => ({\n            ...prev,\n            [lang]: processedTranscript\n          }));\n\n          // Update status with progress\n          setStatus(prevStatus => {\n            const loadedCount = (prevStatus.match(/\\d+/)?.[0] || 0);\n            return `Loading transcripts (${Number(loadedCount) + 1}/${languages.length})...`;\n          });\n          \n          return { lang, transcript: processedTranscript };\n        } catch (error) {\n          console.warn(`Error processing transcript for ${lang}:`, error);\n          return { lang, error: true };\n        }\n      });\n      \n      // Wait for all transcripts to load in parallel\n      const results = await Promise.all(fetchPromises);\n      \n      // Count successful loads\n      const successfulLoads = results.filter(result => !result.error).length;\n      \n      // Update final status\n      setStatus(`Successfully loaded captions in ${successfulLoads} languages`);\n    } catch (error) {\n      console.error('Error fetching captions:', error);\n      setStatus(`Error fetching captions: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to apply part-of-speech tagging (simplified for demo)\n  const applyPOSTagging = (text) => {\n    // This is a simplified implementation. In a production environment,\n    // you would use a more sophisticated NLP approach.\n    \n    // Common words lists for basic POS tagging\n    const commonNouns = ['person', 'time', 'year', 'way', 'day', 'thing', 'man', 'world', 'life', 'hand', 'part', 'child', 'eye', 'woman', 'place', 'work', 'week', 'case', 'point', 'government', 'company', 'number', 'group', 'problem', 'fact'];\n    const commonVerbs = ['be', 'have', 'do', 'say', 'go', 'can', 'get', 'would', 'make', 'know', 'will', 'think', 'take', 'see', 'come', 'could', 'want', 'look', 'use', 'find', 'give', 'tell', 'work', 'may', 'should', 'call', 'try', 'ask', 'need', 'feel', 'become', 'leave', 'put', 'mean', 'keep', 'let', 'begin', 'seem', 'help', 'talk', 'turn', 'start', 'might', 'show', 'hear', 'play', 'run', 'move', 'like', 'live', 'believe', 'hold', 'bring', 'happen', 'must', 'write', 'provide'];\n    const commonAdjectives = ['good', 'new', 'first', 'last', 'long', 'great', 'little', 'own', 'other', 'old', 'right', 'big', 'high', 'different', 'small', 'large', 'next', 'early', 'young', 'important', 'few', 'public', 'bad', 'same', 'able', 'true'];\n\n    // Tokenize the text\n    const words = text.split(/\\s+/);\n    let taggedText = '';\n\n    for (let i = 0; i < words.length; i++) {\n      const originalWord = words[i];\n      const word = originalWord.toLowerCase().replace(/[^\\w\\s]/g, '');\n      \n      if (commonNouns.includes(word)) {\n        taggedText += originalWord.replace(word, `<noun>${word}</noun>`);\n      } else if (commonVerbs.includes(word)) {\n        taggedText += originalWord.replace(word, `<verb>${word}</verb>`);\n      } else if (commonAdjectives.includes(word)) {\n        taggedText += originalWord.replace(word, `<adjective>${word}</adjective>`);\n      } else {\n        taggedText += originalWord;\n      }\n      \n      if (i < words.length - 1) {\n        taggedText += ' ';\n      }\n    }\n\n    return taggedText;\n  };\n\n  // Set language rank (primary, secondary)\n  const setLanguageRank = (lang, rank) => {\n    // If language is already selected in another rank, clear it\n    const updatedLanguages = { ...selectedLanguages };\n    \n    // If this language is already in another position, remove it\n    Object.keys(updatedLanguages).forEach(key => {\n      if (updatedLanguages[key] === lang && key !== rank) {\n        updatedLanguages[key] = '';\n      }\n    });\n\n    // Set the language to the new rank\n    updatedLanguages[rank] = lang;\n    setSelectedLanguages(updatedLanguages);\n  };\n\n  // Update customization for a specific language\n  const updateLanguageCustomization = (lang, property, value) => {\n    setLanguageCustomizations(prev => {\n      // Get existing customization or create new one with defaults\n      const existingCustomization = prev[lang] || {\n        fontFamily: 'Arial / Helvetica',\n        fontSize: 16,\n        fontWeight: 400,\n        textColor: darkMode ? '#FFFFFF' : '#000000',\n        letterSpacing: 0\n      };\n\n      // Create new customization object with updated property\n      const updatedCustomization = {\n        ...existingCustomization,\n        [property]: value\n      };\n\n      // Return new state with updated customization\n      return {\n        ...prev,\n        [lang]: updatedCustomization\n      };\n    });\n  };\n\n  // Get color based on settings\n  const getColor = (type) => {\n    const colorMap = {\n      'Electric Blue': '#007bff',\n      'Cherry Red': '#dc3545',\n      'Forest Green': '#28a745',\n      'Sunny Yellow': '#ffc107',\n      'Royal Purple': '#6f42c1'\n    };\n    \n    switch(type) {\n      case 'noun':\n        return colorMap[nounColor] || colorMap['Electric Blue'];\n      case 'verb':\n        return colorMap[verbColor] || colorMap['Cherry Red'];\n      case 'adjective':\n        return colorMap[adjectiveColor] || colorMap['Forest Green'];\n      default:\n        return darkMode ? '#FFFFFF' : '#000000';\n    }\n  };\n\n  // Format caption text using new StyledCaptionText component\n  const formatCaptionText = (text, lang) => {\n    if (!text) return '';\n    \n    // Get the language's customization settings, or create default ones if none exist\n    const customization = languageCustomizations[lang] || {\n      fontFamily: 'Arial / Helvetica',\n      fontSize: 16,\n      fontWeight: 400,\n      textColor: darkMode ? '#FFFFFF' : '#000000',\n      letterSpacing: 0\n    };\n\n    // Ensure all required properties exist\n    const fullCustomization = {\n      ...customization,\n      fontFamily: customization.fontFamily || 'Arial / Helvetica',\n      fontSize: customization.fontSize || 16,\n      fontWeight: customization.fontWeight || 400,\n      textColor: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: customization.letterSpacing || 0\n    };\n    \n    return (\n      <StyledCaptionText \n        text={text} \n        customization={fullCustomization} \n        darkMode={darkMode} \n        getColor={getColor} \n      />\n    );\n  };\n\n  // Get caption style for a specific language (simplified)\n  const getCaptionStyle = (lang) => {\n    const customization = languageCustomizations[lang] || {};\n    const isRTL = ['ar', 'fa', 'he', 'ur'].includes(lang);\n    \n    return {\n      fontFamily: getFontFamily(customization.fontFamily || 'Arial / Helvetica'),\n      fontSize: getFontSize(customization.fontSize || 16),\n      fontWeight: getFontWeight(customization.fontWeight || 400),\n      color: customization.textColor || (darkMode ? '#FFFFFF' : '#000000'),\n      letterSpacing: getLetterSpacing(customization.letterSpacing || 0),\n      backgroundColor: 'transparent',\n      direction: isRTL ? 'rtl' : 'ltr'\n    };\n  };\n\n  // Update the active captions based on current time\n  useEffect(() => {\n    const newActiveCaptions = {};\n    \n    getSelectedLanguagesArray().forEach(lang => {\n      if (captions[lang]) {\n        const activeCaption = captions[lang].find(\n          caption => currentTime >= caption.start && currentTime <= caption.end\n        );\n        \n        if (activeCaption) {\n          newActiveCaptions[lang] = activeCaption;\n        }\n      }\n    });\n    \n    setActiveCaptions(newActiveCaptions);\n  }, [currentTime, captions, selectedLanguages]);\n\n  // Initialize YouTube API and player\n  useEffect(() => {\n    if (!videoId) return;\n    \n    let player = null;\n    \n    // Load YouTube iframe API if it's not already loaded\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      \n      window.onYouTubeIframeAPIReady = () => {\n        createYouTubePlayer();\n      };\n    } else {\n      createYouTubePlayer();\n    }\n    \n    function createYouTubePlayer() {\n      if (window.player) {\n        window.player.destroy();\n      }\n      \n      window.player = new window.YT.Player('youtube-player', {\n        videoId: videoId,\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange\n        }\n      });\n    }\n    \n    function onPlayerReady(event) {\n      console.log('YouTube player ready');\n      player = event.target; // Store the player reference\n    }\n    \n    function onPlayerStateChange(event) {\n      // Update current time when video is playing\n      if (event.data === window.YT.PlayerState.PLAYING) {\n        const updateTime = () => {\n          if (player && player.getCurrentTime) {\n            setCurrentTime(player.getCurrentTime());\n          }\n          if (player && player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n            requestAnimationFrame(updateTime);\n          }\n        };\n        updateTime();\n      }\n    }\n    \n    return () => {\n      if (window.player) {\n        window.player.destroy();\n        window.player = null;\n      }\n    };\n  }, [videoId]);\n\n  // Find transcript by language code\n  const findTranscriptByLanguageCode = (code) => {\n    return availableTranscripts.find(t => t.language_code === code);\n  };\n\n  // Helper function to get language name\n  const getLanguageName = (langCode) => {\n    const transcript = findTranscriptByLanguageCode(langCode);\n    return transcript?.language || langCode;\n  };\n  \n  // Start dragging the caption overlay\n  const handleMouseDown = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    const overlayElement = overlayRef.current;\n    if (!overlayElement) return;\n\n    // Calculate initial position relative to the container\n    const initialX = (e.clientX - rect.left) / rect.width * 100;\n    const initialY = (e.clientY - rect.top) / rect.height * 100;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    \n    // Prevent default dragging behavior\n    e.preventDefault();\n  };\n  \n  // Handle mouse move during dragging - Improved for smoother movement\n  const handleMouseMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    // Get the video container dimensions\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate current position as percentage of container\n    const currentX = (e.clientX - rect.left) / rect.width * 100;\n    const currentY = (e.clientY - rect.top) / rect.height * 100;\n    \n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n    \n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n    \n    // Update position with smooth transition\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX,\n      y: newY\n    }));\n    \n    // Prevent text selection during drag\n    window.getSelection().removeAllRanges();\n  };\n  \n  // Stop dragging with smooth finish\n  const handleMouseUp = () => {\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle touch start for mobile devices - improved for smoother touch interaction\n  const handleTouchStart = (e) => {\n    if (captionPlacement !== 'Overlay') return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate initial touch position relative to container\n    const initialX = (touch.clientX - rect.left) / rect.width * 100;\n    const initialY = (touch.clientY - rect.top) / rect.height * 100;\n    \n    // Set dragging to true and store initial positions\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: true,\n      startX: initialX,\n      startY: initialY,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Add event listeners\n    document.addEventListener('touchmove', handleTouchMove, { passive: false });\n    document.addEventListener('touchend', handleTouchEnd);\n    \n    // Prevent default behavior like scrolling\n    e.preventDefault();\n  };\n  \n  // Handle touch move for mobile devices - improved for smoother movement\n  const handleTouchMove = (e) => {\n    if (!overlayPosition.isDragging) return;\n    \n    const touch = e.touches[0];\n    const videoContainer = videoContainerRef.current;\n    if (!videoContainer) return;\n    \n    const rect = videoContainer.getBoundingClientRect();\n    \n    // Calculate current position as percentage of container\n    const currentX = (touch.clientX - rect.left) / rect.width * 100;\n    const currentY = (touch.clientY - rect.top) / rect.height * 100;\n    \n    // Calculate the delta movement from the start position\n    const deltaX = currentX - overlayPosition.startX;\n    const deltaY = currentY - overlayPosition.startY;\n    \n    // Calculate new position with smooth movement\n    const newX = Math.max(0, Math.min(100, overlayPosition.lastX + deltaX));\n    const newY = Math.max(0, Math.min(100, overlayPosition.lastY + deltaY));\n    \n    // Update position with smooth transition\n    setOverlayPosition(prev => ({ \n      ...prev, \n      x: newX,\n      y: newY\n    }));\n    \n    // Prevent scrolling while dragging\n    e.preventDefault();\n  };\n  \n  // Handle touch end for mobile devices - with smooth finish\n  const handleTouchEnd = () => {\n    setOverlayPosition(prev => ({ \n      ...prev, \n      isDragging: false,\n      lastX: prev.x,\n      lastY: prev.y\n    }));\n    \n    // Remove event listeners\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n  };\n  \n  // Toggle dark mode using the new fancy toggle\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    \n    // Update body class for global styling\n    if (!darkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n      document.body.classList.add('light-mode');\n    }\n  };\n\n  // Jump to time in video when clicking on a transcript\n  const jumpToTime = (time) => {\n    if (window.player && window.player.seekTo) {\n      window.player.seekTo(time);\n      window.player.playVideo();\n    }\n  };\n\n  // Handle resize start\n  const handleResizeStart = (e, direction) => {\n    e.stopPropagation(); // Prevent drag event from firing\n    const videoContainer = videoContainerRef.current;\n    const overlay = overlayRef.current;\n    if (!videoContainer || !overlay) return;\n\n    setIsResizing(true);\n    setResizeDirection(direction);\n    \n    // Store initial values\n    resizeStartRef.current = {\n      x: e.clientX,\n      width: overlayPosition.width,\n      containerWidth: videoContainer.getBoundingClientRect().width,\n      direction: direction,\n      initialX: overlayPosition.x // Store initial X position\n    };\n\n    // Add event listeners to document to ensure smooth dragging\n    document.addEventListener('mousemove', handleResize);\n    document.addEventListener('mouseup', handleResizeEnd);\n    \n    // Prevent text selection and default behaviors\n    e.preventDefault();\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize\n  const handleResize = (e) => {\n    if (!isResizing || !resizeStartRef.current) return;\n\n    const { x: startX, width: startWidth, containerWidth, direction, initialX } = resizeStartRef.current;\n    const deltaX = e.clientX - startX;\n    \n    // Calculate width change as percentage\n    const deltaWidth = (deltaX / containerWidth) * 100;\n    \n    // Calculate new width based on resize direction\n    let newWidth;\n    if (direction === 'right') {\n      newWidth = Math.max(20, Math.min(90, startWidth + deltaWidth));\n    } else {\n      newWidth = Math.max(20, Math.min(90, startWidth - deltaWidth));\n    }\n    \n    // If resizing from left, adjust position to maintain right edge position\n    if (direction === 'left') {\n      const currentRight = initialX + (startWidth / 2);\n      const newX = currentRight - (newWidth / 2);\n      setOverlayPosition(prev => ({\n        ...prev,\n        x: Math.max(newWidth / 2, Math.min(100 - newWidth / 2, newX)),\n        width: newWidth\n      }));\n    } else {\n      // Update width only for right resize\n      setOverlayPosition(prev => ({\n        ...prev,\n        width: newWidth\n      }));\n    }\n\n    // Prevent text selection during resize\n    window.getSelection().removeAllRanges();\n  };\n\n  // Handle resize end\n  const handleResizeEnd = () => {\n    if (!isResizing) return;\n    \n    setIsResizing(false);\n    setResizeDirection(null);\n    resizeStartRef.current = null;\n    \n    // Remove event listeners\n    document.removeEventListener('mousemove', handleResize);\n    document.removeEventListener('mouseup', handleResizeEnd);\n  };\n\n  return (\n    <div className={`app-container ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <h1 className=\"app-title\">YouTube Multilingual Captions Extractor</h1>\n      \n      {/* Fancy Dark Mode Toggle */}\n      <div className=\"dark-mode-toggle\">\n        <label>\n          <input \n            className=\"toggle-checkbox\" \n            type=\"checkbox\" \n            checked={darkMode}\n            onChange={toggleDarkMode}\n          />\n          <div className=\"toggle-slot\">\n            <div className=\"sun-icon-wrapper\">\n              <div className=\"iconify sun-icon\" data-icon=\"feather-sun\" data-inline=\"false\"></div>\n            </div>\n            <div className=\"toggle-button\"></div>\n            <div className=\"moon-icon-wrapper\">\n              <div className=\"iconify moon-icon\" data-icon=\"feather-moon\" data-inline=\"false\"></div>\n            </div>\n          </div>\n        </label>\n      </div>\n      \n      {/* Input Box */}\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={youtubeLink}\n            onChange={handleLinkChange}\n            placeholder=\"Paste YouTube URL here (e.g., https://www.youtube.com/watch?v=D9Ihs241zeg)\"\n            className=\"input-field\"\n            aria-label=\"YouTube video URL\"\n          />\n          <button \n            type=\"submit\"\n            className=\"submit-button\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load Video'}\n          </button>\n        </div>\n      </form>\n      \n      {/* Status message */}\n      {status && (\n        <div className=\"status-message\" role=\"status\" aria-live=\"polite\">\n          {status}\n        </div>\n      )}\n      \n      {videoId && (\n        <div className=\"main-content\">\n          {/* Main Content Area (Video + Captions) */}\n          <div className=\"content-area\">\n            {/* Video Embed Box */}\n            <div className=\"video-container\" ref={videoContainerRef}>\n              <div className=\"video-header\">\n                <div className=\"placement-toggle\">\n                  <div className=\"placement-buttons\">\n                    <button \n                      className={`placement-button ${captionPlacement === 'Below Video' ? 'active' : ''}`}\n                      onClick={() => setCaptionPlacement('Below Video')}\n                    >\n                      Below\n                    </button>\n                    <button \n                      className={`placement-button ${captionPlacement === 'Overlay' ? 'active' : ''}`}\n                      onClick={() => setCaptionPlacement('Overlay')}\n                    >\n                      Overlay\n                    </button>\n                  </div>\n                </div>\n              </div>\n              <div className=\"video-wrapper\" style={{ paddingTop: '56.25%' }}> {/* 16:9 Aspect Ratio */}\n                {/* YouTube player */}\n                <div id=\"youtube-player\" className=\"video-frame\"></div>\n              </div>\n              \n              {/* Video resize handle */}\n              <div \n                ref={videoResizeHandleRef}\n                className=\"video-resize-handle\" \n                title=\"Drag to resize video\"\n              ></div>\n              \n              {/* Real-time captions overlay - with improved draggable functionality */}\n              {captionPlacement === 'Overlay' && (\n                <div \n                  className={`captions-overlay ${overlayPosition.isDragging ? 'dragging' : ''} ${isResizing ? 'resizing' : ''}`}\n                  style={{\n                    position: 'absolute',\n                    left: `${overlayPosition.x}%`,\n                    top: `${overlayPosition.y}%`,\n                    transform: 'translate(-50%, -50%)',\n                    cursor: overlayPosition.isDragging ? 'grabbing' : 'grab',\n                    transition: overlayPosition.isDragging || isResizing ? 'none' : 'all 0.1s ease-out',\n                    width: `${overlayPosition.width}%`,\n                    minWidth: '200px',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    backgroundColor: darkMode ? 'rgba(0, 0, 0, 0.7)' : 'rgba(255, 255, 255, 0.7)',\n                    backdropFilter: 'blur(8px)',\n                    borderRadius: '8px',\n                    padding: '8px',\n                    boxSizing: 'border-box',\n                    border: '1px solid rgba(255, 255, 255, 0.1)'\n                  }}\n                  ref={overlayRef}\n                  onMouseDown={handleMouseDown}\n                  onTouchStart={handleTouchStart}\n                  tabIndex=\"0\"\n                  role=\"region\"\n                  aria-label=\"Movable captions overlay\"\n                >\n                  {/* Left resize handle */}\n                  <div\n                    className=\"resize-handle resize-handle-left\"\n                    style={{\n                      position: 'absolute',\n                      left: '-8px',\n                      top: 0,\n                      width: '16px',\n                      height: '100%',\n                      cursor: 'ew-resize',\n                      backgroundColor: isResizing && resizeDirection === 'left' ? \n                        'rgba(255, 255, 255, 0.2)' : 'transparent',\n                      borderRadius: '4px 0 0 4px',\n                      zIndex: 10\n                    }}\n                    onMouseDown={(e) => handleResizeStart(e, 'left')}\n                  />\n\n                  {/* Right resize handle */}\n                  <div\n                    className=\"resize-handle resize-handle-right\"\n                    style={{\n                      position: 'absolute',\n                      right: '-8px',\n                      top: 0,\n                      width: '16px',\n                      height: '100%',\n                      cursor: 'ew-resize',\n                      backgroundColor: isResizing && resizeDirection === 'right' ? \n                        'rgba(255, 255, 255, 0.2)' : 'transparent',\n                      borderRadius: '0 4px 4px 0',\n                      zIndex: 10\n                    }}\n                    onMouseDown={(e) => handleResizeStart(e, 'right')}\n                  />\n\n                  {/* Resize indicators - always visible */}\n                  <div\n                    style={{\n                      position: 'absolute',\n                      left: '-4px',\n                      top: '50%',\n                      transform: 'translateY(-50%)',\n                      width: '4px',\n                      height: '24px',\n                      backgroundColor: isResizing && resizeDirection === 'left' ? \n                        'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                      borderRadius: '2px',\n                      pointerEvents: 'none',\n                      transition: 'background-color 0.1s ease'\n                    }}\n                  />\n                  <div\n                    style={{\n                      position: 'absolute',\n                      right: '-4px',\n                      top: '50%',\n                      transform: 'translateY(-50%)',\n                      width: '4px',\n                      height: '24px',\n                      backgroundColor: isResizing && resizeDirection === 'right' ? \n                        'rgba(255, 255, 255, 0.5)' : 'rgba(255, 255, 255, 0.3)',\n                      borderRadius: '2px',\n                      pointerEvents: 'none',\n                      transition: 'background-color 0.1s ease'\n                    }}\n                  />\n                  \n                  <div className=\"overlay-drag-instructions\">\n                    Hold to move • Drag edges to resize\n                  </div>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    activeCaptions[lang] && (\n                      <div \n                        key={lang} \n                        className=\"overlay-caption\" \n                        style={{\n                          ...getCaptionStyle(lang),\n                          width: '100%',\n                          textAlign: 'center',\n                          padding: '4px 8px',\n                          whiteSpace: 'pre-wrap',\n                          overflowWrap: 'break-word',\n                          wordWrap: 'break-word',\n                          maxWidth: '100%',\n                          display: 'block',\n                          userSelect: 'none' // Prevent text selection while dragging\n                        }}\n                      >\n                        {formatCaptionText(activeCaptions[lang].text, lang)}\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Captions Display - for Below Video mode only - with reduced spacing */}\n            {captionPlacement === 'Below Video' && \n             availableLanguages.length > 0 && (\n              <div className=\"captions-container closer-to-video\">\n                \n                {/* Current active captions section - all languages together */}\n                <div className={`active-captions-section ${captionsHeight === 'expanded' ? 'expanded' : ''}`}>\n                  <button\n                    className=\"toggle-caption-height\"\n                    onClick={toggleCaptionsHeight}\n                    title={captionsHeight === 'normal' ? 'Expand captions' : 'Collapse captions'}\n                  >\n                    {captionsHeight === 'normal' ? '↓' : '↑'}\n                  </button>\n                  \n                  {getSelectedLanguagesArray().map(lang => {\n                  // Skip hidden languages\n                  if (hiddenLanguages[lang]) return null;\n                  \n                  return (\n                    <div \n                      key={`active-${lang}`} \n                      className=\"caption-text-container\"\n                      style={{ marginBottom: `${captionSpacing}px` }}\n                    >\n                      <div className=\"caption-content-wrapper\">\n                        {activeCaptions[lang] ? (\n                          <div className=\"caption-text\">\n                            {formatCaptionText(activeCaptions[lang].text, lang)}\n                          </div>\n                        ) : (\n                          <span className=\"no-caption\">   ...</span>\n                        )}\n                        <span className={`language-tag-right ${lang === selectedLanguages.primary ? 'primary' : 'secondary'}`}>\n                          {getLanguageName(lang)}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n                </div>\n\n                {/* Caption spacing control */}\n                <div className=\"caption-spacing-control-below\">\n                  <input\n                    type=\"range\"\n                    id=\"caption-spacing-below\"\n                    min=\"-20\"\n                    max=\"40\"\n                    step=\"0.25\"\n                    value={captionSpacing}\n                    onChange={(e) => setCaptionSpacing(Number(e.target.value))}\n                    className=\"spacing-slider-below\"\n                    aria-label=\"Adjust caption spacing\"\n                  />\n                </div>\n                \n                {/* Caption resize handle */}\n                <div \n                  ref={captionsResizeHandleRef}\n                  className=\"resize-handle resize-handle-vertical\" \n                  title=\"Drag to resize captions height\"\n                ></div>\n                \n                {/* Transcripts section - all languages */}\n                <div className=\"transcripts-section\">\n                  <h3 className=\"section-subtitle\">Full Transcripts</h3>\n                  \n                  {getSelectedLanguagesArray().map(lang => (\n                    <div key={`transcript-${lang}`} className=\"language-section\">\n                      <h4 className=\"language-title\">\n                        {getLanguageName(lang)} \n                        {lang === selectedLanguages.primary ? ' (Primary)' : \n                         lang === selectedLanguages.secondary ? ' (Secondary)' : ''}\n                      </h4>\n                      \n                      {/* Full transcript with timestamps */}\n                      <div className=\"captions-content\">\n                        {captions[lang]?.map((caption, index) => (\n                          <div key={index} \n                            className={`caption-item ${currentTime >= caption.start && currentTime <= caption.end ? 'active-caption' : ''}`}\n                            onClick={() => jumpToTime(caption.start)}\n                            tabIndex=\"0\"\n                            role=\"button\"\n                            aria-label={`Jump to ${Math.floor(caption.start / 60)}:${(caption.start % 60).toFixed(1).padStart(4, '0')}`}\n                            onKeyDown={(e) => {\n                              if (e.key === 'Enter' || e.key === ' ') {\n                                jumpToTime(caption.start);\n                              }\n                            }}\n                          >\n                            <div className=\"timestamp\">\n                              {Math.floor(caption.start / 60)}:{(caption.start % 60).toFixed(1).padStart(4, '0')} - \n                              {Math.floor(caption.end / 60)}:{(caption.end % 60).toFixed(1).padStart(4, '0')}\n                            </div>\n                            <div className=\"caption-text\">\n                              {formatCaptionText(caption.text, lang)}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Settings Panel - Now with improved toggle */}\n          <div className={`settings-panel ${settingsPanelCollapsed ? 'collapsed' : ''}`}>\n            <button \n              className=\"settings-toggle\" \n              onClick={toggleSettingsPanel}\n              title={settingsPanelCollapsed ? \"Expand settings panel\" : \"Collapse settings panel\"}\n              aria-expanded={!settingsPanelCollapsed}\n              aria-controls=\"settings-content\"\n            >\n              <span className=\"settings-toggle-icon\">\n                {settingsPanelCollapsed ? '»' : '«'}\n              </span>\n            </button>\n            \n            <div id=\"settings-content\" style={{ display: settingsPanelCollapsed ? 'none' : 'block', width: '100%' }}>\n              <h2 className=\"section-title\">Customize Display</h2>\n              \n              {/* Language Selection */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Select Languages</h3>\n                \n                {/* Primary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"primary-language\">Primary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"primary-language\"\n                      value={selectedLanguages.primary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'primary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      {availableTranscripts.map((transcript, index) => (\n                        <option key={`primary-${transcript.language_code}-${index}`} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n                \n                {/* Secondary Language Dropdown */}\n                <div className=\"language-selection-item\">\n                  <label className=\"settings-label\" htmlFor=\"secondary-language\">Secondary Language</label>\n                  <div className=\"language-dropdown-container\">\n                    <select \n                      id=\"secondary-language\"\n                      value={selectedLanguages.secondary} \n                      onChange={(e) => setLanguageRank(e.target.value, 'secondary')}\n                      className=\"settings-select language-dropdown\"\n                    >\n                      <option value=\"\" key=\"none\">None</option>\n                      {availableTranscripts.map((transcript, index) => (\n                        <option key={`secondary-${transcript.language_code}-${index}`} value={transcript.language_code}>\n                          {transcript.language}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Language-specific customization */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Language Customizations</h3>\n                \n                {getSelectedLanguagesArray().map(lang => (\n                  <div key={`customize-${lang}`} className={`language-customization-card ${collapsedLanguages[lang] ? 'collapsed' : ''}`}>\n                    <div \n                      className=\"language-card-header\"\n                      onClick={() => toggleLanguageCollapse(lang)}\n                    >\n                      <div className=\"language-header-content\">\n                        <span className=\"language-name\">{getLanguageName(lang)}</span>\n                        <button\n                          className={`visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`}\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            toggleLanguageVisibility(lang);\n                          }}\n                          title={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                          aria-label={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                        />\n                        {lang === selectedLanguages.primary && <span className=\"language-tag primary\">Primary</span>}\n                        {lang === selectedLanguages.secondary && <span className=\"language-tag secondary\">Secondary</span>}\n                      </div>\n                      <button \n                        className=\"collapse-toggle\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          toggleLanguageCollapse(lang);\n                        }}\n                        aria-label={collapsedLanguages[lang] ? \"Expand language settings\" : \"Collapse language settings\"}\n                      />\n                    </div>\n                    \n                    <div className=\"language-card-content\">\n                      {/* Visibility Toggle */}\n                      <button\n                        className={`visibility-toggle-icon ${hiddenLanguages[lang] ? 'hidden' : ''}`}\n                        onClick={() => toggleLanguageVisibility(lang)}\n                        title={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                        aria-label={hiddenLanguages[lang] ? 'Show Language' : 'Hide Language'}\n                      />\n\n                      {/* Font Selection */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Font</div>\n                        <select \n                          className=\"font-select\"\n                          value={languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica'}\n                          onChange={(e) => updateLanguageCustomization(lang, 'fontFamily', e.target.value)}\n                          style={{ fontFamily: getFontFamily(languageCustomizations[lang]?.fontFamily || 'Arial / Helvetica') }}\n                        >\n                          {['Arial / Helvetica', 'Roboto', 'Open Sans', 'Verdana'].map(font => (\n                            <option \n                              key={font} \n                              value={font}\n                              style={{ fontFamily: getFontFamily(font) }}\n                            >\n                              {font}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n\n                      {/* Font Size */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Size</div>\n                        <div className=\"button-group\">\n                          {[\n                            { value: 14, label: 'Small' },\n                            { value: 18, label: 'Medium' },\n                            { value: 24, label: 'Large' }\n                          ].map(size => (\n                            <button\n                              key={size.value}\n                              className={`option-button ${(languageCustomizations[lang]?.fontSize === size.value) ? 'active' : ''}`}\n                              onClick={() => {\n                                const updatedCustomization = {\n                                  ...languageCustomizations[lang],\n                                  fontSize: size.value\n                                };\n                                setLanguageCustomizations(prev => ({\n                                  ...prev,\n                                  [lang]: updatedCustomization\n                                }));\n                              }}\n                            >\n                              {size.label}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Font Weight */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Font Weight</div>\n                        <div className=\"button-group\">\n                          {[\n                            { value: 300, label: 'Light' },\n                            { value: 400, label: 'Regular' },\n                            { value: 700, label: 'Bold' }\n                          ].map(weight => (\n                            <button\n                              key={weight.value}\n                              className={`option-button ${(languageCustomizations[lang]?.fontWeight === weight.value) ? 'active' : ''}`}\n                              onClick={() => {\n                                const updatedCustomization = {\n                                  ...languageCustomizations[lang],\n                                  fontWeight: weight.value\n                                };\n                                setLanguageCustomizations(prev => ({\n                                  ...prev,\n                                  [lang]: updatedCustomization\n                                }));\n                              }}\n                            >\n                              {weight.label}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Text Color */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Color</div>\n                        <div className=\"color-options\">\n                          {[\n                            '#000000', // Black - for light mode\n                            '#FFFFFF', // White - for dark mode\n                            '#0052CC', // Accessible blue\n                            '#2E7D32'  // Accessible green\n                          ].map(color => (\n                            <div\n                              key={color}\n                              className={`color-option ${languageCustomizations[lang]?.textColor === color ? 'active' : ''}`}\n                              style={{ backgroundColor: color }}\n                              onClick={() => updateLanguageCustomization(lang, 'textColor', color)}\n                            />\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Character Spacing */}\n                      <div className=\"option-group\">\n                        <div className=\"option-label\">Character Spacing</div>\n                        <div className=\"button-group\">\n                          {[\n                            { value: -1, label: 'Tight' },\n                            { value: 0, label: 'Normal' },\n                            { value: 2, label: 'Wide' }\n                          ].map(spacing => (\n                            <button\n                              key={spacing.value}\n                              className={`option-button ${languageCustomizations[lang]?.letterSpacing === spacing.value ? 'active' : ''}`}\n                              onClick={() => updateLanguageCustomization(lang, 'letterSpacing', spacing.value)}\n                            >\n                              {spacing.label}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Preview Text */}\n                      <div \n                        className=\"preview-text\"\n                        style={getCaptionStyle(lang)}\n                      >\n                        The quick brown fox jumps over the lazy dog.\n                      </div>\n\n                      {/* Action Buttons */}\n                      <div className=\"button-row\">\n                        <button \n                          className=\"action-button secondary\"\n                          onClick={() => {\n                            setLanguageCustomizations(prev => ({\n                              ...prev,\n                              [lang]: {\n                                fontFamily: 'Arial / Helvetica',\n                                fontSize: 16,\n                                fontWeight: 400,\n                                textColor: darkMode ? '#FFFFFF' : '#000000',\n                                letterSpacing: 0\n                              }\n                            }));\n                          }}\n                        >\n                          Reset\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              {/* Part of speech color customization */}\n              <div className=\"settings-section\">\n                <h3 className=\"settings-title\">Keywords Highlighting</h3>\n                <div className=\"pos-color-controls\">\n                  <div className=\"pos-color-item\">\n                    <select \n                      id=\"keyword-color\" \n                      value={keywordColor} \n                      onChange={(e) => setKeywordColor(e.target.value)} \n                      className=\"settings-select pos-select\"\n                    >\n                      <option value=\"#FF5733\">Orange Red</option>\n                      <option value=\"#007bff\">Electric Blue</option>\n                      <option value=\"#28a745\">Forest Green</option>\n                      <option value=\"#ffc107\">Sunny Yellow</option>\n                      <option value=\"#6f42c1\">Royal Purple</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}